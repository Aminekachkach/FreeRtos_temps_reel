
tp_freertos_reentrance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080069c4  080069c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b2c  08006b2c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b34  08006b34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b34  08006b34  00016b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b38  08006b38  00016b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004028  20000074  08006bb0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000409c  08006bb0  0002409c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001132b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca2  00000000  00000000  000313cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00034078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00034e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028526  00000000  00000000  00035af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011717  00000000  00000000  0005e016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f20c2  00000000  00000000  0006f72d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001617ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea4  00000000  00000000  00161840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080069ac 	.word	0x080069ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080069ac 	.word	0x080069ac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000094 	.word	0x20000094
 80005e4:	200000e8 	.word	0x200000e8

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_FREERTOS_Init+0x30>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f003 f863 	bl	80036d0 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <MX_FREERTOS_Init+0x34>)
 800060e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	080069d0 	.word	0x080069d0
 800061c:	20000090 	.word	0x20000090

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f003 f89d 	bl	8003768 <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x8>

08000630 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000646:	4bad      	ldr	r3, [pc, #692]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4aac      	ldr	r2, [pc, #688]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4baa      	ldr	r3, [pc, #680]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
 800065c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800065e:	4ba7      	ldr	r3, [pc, #668]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4aa6      	ldr	r2, [pc, #664]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4ba4      	ldr	r3, [pc, #656]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4ba1      	ldr	r3, [pc, #644]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4aa0      	ldr	r2, [pc, #640]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b9e      	ldr	r3, [pc, #632]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	623b      	str	r3, [r7, #32]
 800068c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	4b9b      	ldr	r3, [pc, #620]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a9a      	ldr	r2, [pc, #616]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b98      	ldr	r3, [pc, #608]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	61fb      	str	r3, [r7, #28]
 80006a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b95      	ldr	r3, [pc, #596]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a94      	ldr	r2, [pc, #592]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b92      	ldr	r3, [pc, #584]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b8f      	ldr	r3, [pc, #572]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a8e      	ldr	r2, [pc, #568]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b8c      	ldr	r3, [pc, #560]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006d6:	4b89      	ldr	r3, [pc, #548]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a88      	ldr	r2, [pc, #544]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b86      	ldr	r3, [pc, #536]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ee:	4b83      	ldr	r3, [pc, #524]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a82      	ldr	r2, [pc, #520]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b80      	ldr	r3, [pc, #512]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000706:	4b7d      	ldr	r3, [pc, #500]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a7c      	ldr	r2, [pc, #496]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800070c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b7a      	ldr	r3, [pc, #488]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071e:	4b77      	ldr	r3, [pc, #476]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a76      	ldr	r2, [pc, #472]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000724:	f043 0320 	orr.w	r3, r3, #32
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b74      	ldr	r3, [pc, #464]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0320 	and.w	r3, r3, #32
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b71      	ldr	r3, [pc, #452]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a70      	ldr	r2, [pc, #448]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b6e      	ldr	r3, [pc, #440]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2120      	movs	r1, #32
 8000752:	486b      	ldr	r0, [pc, #428]	; (8000900 <MX_GPIO_Init+0x2d0>)
 8000754:	f001 f9e4 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f241 010c 	movw	r1, #4108	; 0x100c
 800075e:	4869      	ldr	r0, [pc, #420]	; (8000904 <MX_GPIO_Init+0x2d4>)
 8000760:	f001 f9de 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2108      	movs	r1, #8
 8000768:	4867      	ldr	r0, [pc, #412]	; (8000908 <MX_GPIO_Init+0x2d8>)
 800076a:	f001 f9d9 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000774:	4865      	ldr	r0, [pc, #404]	; (800090c <MX_GPIO_Init+0x2dc>)
 8000776:	f001 f9d3 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	21c8      	movs	r1, #200	; 0xc8
 800077e:	4864      	ldr	r0, [pc, #400]	; (8000910 <MX_GPIO_Init+0x2e0>)
 8000780:	f001 f9ce 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000784:	2310      	movs	r3, #16
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000794:	230e      	movs	r3, #14
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800079c:	4619      	mov	r1, r3
 800079e:	485d      	ldr	r0, [pc, #372]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007a0:	f001 f812 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007a4:	2308      	movs	r3, #8
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	4857      	ldr	r0, [pc, #348]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007b8:	f001 f806 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007bc:	2304      	movs	r3, #4
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007cc:	2309      	movs	r3, #9
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	484f      	ldr	r0, [pc, #316]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007d8:	f000 fff6 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80007dc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ee:	230b      	movs	r3, #11
 80007f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f6:	4619      	mov	r1, r3
 80007f8:	4845      	ldr	r0, [pc, #276]	; (8000910 <MX_GPIO_Init+0x2e0>)
 80007fa:	f000 ffe5 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80007fe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000810:	230c      	movs	r3, #12
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000818:	4619      	mov	r1, r3
 800081a:	483e      	ldr	r0, [pc, #248]	; (8000914 <MX_GPIO_Init+0x2e4>)
 800081c:	f000 ffd4 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000820:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000826:	2312      	movs	r3, #18
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000832:	2304      	movs	r3, #4
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083a:	4619      	mov	r1, r3
 800083c:	4836      	ldr	r0, [pc, #216]	; (8000918 <MX_GPIO_Init+0x2e8>)
 800083e:	f000 ffc3 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000842:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000854:	230a      	movs	r3, #10
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085c:	4619      	mov	r1, r3
 800085e:	482e      	ldr	r0, [pc, #184]	; (8000918 <MX_GPIO_Init+0x2e8>)
 8000860:	f000 ffb2 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000864:	2310      	movs	r3, #16
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000874:	2302      	movs	r3, #2
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087c:	4619      	mov	r1, r3
 800087e:	4826      	ldr	r0, [pc, #152]	; (8000918 <MX_GPIO_Init+0x2e8>)
 8000880:	f000 ffa2 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000894:	2308      	movs	r3, #8
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089c:	4619      	mov	r1, r3
 800089e:	4818      	ldr	r0, [pc, #96]	; (8000900 <MX_GPIO_Init+0x2d0>)
 80008a0:	f000 ff92 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008b6:	230c      	movs	r3, #12
 80008b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008be:	4619      	mov	r1, r3
 80008c0:	4816      	ldr	r0, [pc, #88]	; (800091c <MX_GPIO_Init+0x2ec>)
 80008c2:	f000 ff81 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008d8:	2301      	movs	r3, #1
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e0:	4619      	mov	r1, r3
 80008e2:	480f      	ldr	r0, [pc, #60]	; (8000920 <MX_GPIO_Init+0x2f0>)
 80008e4:	f000 ff70 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80008e8:	2360      	movs	r3, #96	; 0x60
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008f8:	230d      	movs	r3, #13
 80008fa:	e013      	b.n	8000924 <MX_GPIO_Init+0x2f4>
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020c00 	.word	0x40020c00
 8000904:	40022000 	.word	0x40022000
 8000908:	40022800 	.word	0x40022800
 800090c:	40021c00 	.word	0x40021c00
 8000910:	40021800 	.word	0x40021800
 8000914:	40021000 	.word	0x40021000
 8000918:	40020400 	.word	0x40020400
 800091c:	40020800 	.word	0x40020800
 8000920:	40020000 	.word	0x40020000
 8000924:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800092a:	4619      	mov	r1, r3
 800092c:	48bc      	ldr	r0, [pc, #752]	; (8000c20 <MX_GPIO_Init+0x5f0>)
 800092e:	f000 ff4b 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000942:	230a      	movs	r3, #10
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800094a:	4619      	mov	r1, r3
 800094c:	48b5      	ldr	r0, [pc, #724]	; (8000c24 <MX_GPIO_Init+0x5f4>)
 800094e:	f000 ff3b 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000952:	f248 1333 	movw	r3, #33075	; 0x8133
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000964:	230c      	movs	r3, #12
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096c:	4619      	mov	r1, r3
 800096e:	48ae      	ldr	r0, [pc, #696]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000970:	f000 ff2a 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000974:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000986:	230e      	movs	r3, #14
 8000988:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800098a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098e:	4619      	mov	r1, r3
 8000990:	48a6      	ldr	r0, [pc, #664]	; (8000c2c <MX_GPIO_Init+0x5fc>)
 8000992:	f000 ff19 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a8:	4619      	mov	r1, r3
 80009aa:	48a0      	ldr	r0, [pc, #640]	; (8000c2c <MX_GPIO_Init+0x5fc>)
 80009ac:	f000 ff0c 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009b0:	2340      	movs	r3, #64	; 0x40
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c2:	4619      	mov	r1, r3
 80009c4:	489a      	ldr	r0, [pc, #616]	; (8000c30 <MX_GPIO_Init+0x600>)
 80009c6:	f000 feff 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009ca:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009dc:	230c      	movs	r3, #12
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e4:	4619      	mov	r1, r3
 80009e6:	4892      	ldr	r0, [pc, #584]	; (8000c30 <MX_GPIO_Init+0x600>)
 80009e8:	f000 feee 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80009ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009fe:	230a      	movs	r3, #10
 8000a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a06:	4619      	mov	r1, r3
 8000a08:	488a      	ldr	r0, [pc, #552]	; (8000c34 <MX_GPIO_Init+0x604>)
 8000a0a:	f000 fedd 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a0e:	23f0      	movs	r3, #240	; 0xf0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a1e:	230a      	movs	r3, #10
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a26:	4619      	mov	r1, r3
 8000a28:	4883      	ldr	r0, [pc, #524]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000a2a:	f000 fecd 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a2e:	23f7      	movs	r3, #247	; 0xf7
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a3e:	230e      	movs	r3, #14
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	487c      	ldr	r0, [pc, #496]	; (8000c3c <MX_GPIO_Init+0x60c>)
 8000a4a:	f000 febd 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a60:	2309      	movs	r3, #9
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	486f      	ldr	r0, [pc, #444]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000a6c:	f000 feac 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a82:	230a      	movs	r3, #10
 8000a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4866      	ldr	r0, [pc, #408]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000a8e:	f000 fe9b 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a92:	2320      	movs	r3, #32
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4861      	ldr	r0, [pc, #388]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000aaa:	f000 fe8d 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000abe:	230d      	movs	r3, #13
 8000ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4859      	ldr	r0, [pc, #356]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000aca:	f000 fe7d 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000ace:	f241 030c 	movw	r3, #4108	; 0x100c
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4854      	ldr	r0, [pc, #336]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000ae8:	f000 fe6e 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	484f      	ldr	r0, [pc, #316]	; (8000c40 <MX_GPIO_Init+0x610>)
 8000b02:	f000 fe61 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b06:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b20:	4619      	mov	r1, r3
 8000b22:	4848      	ldr	r0, [pc, #288]	; (8000c44 <MX_GPIO_Init+0x614>)
 8000b24:	f000 fe50 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b28:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b3a:	230e      	movs	r3, #14
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b42:	4619      	mov	r1, r3
 8000b44:	483c      	ldr	r0, [pc, #240]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000b46:	f000 fe3f 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4836      	ldr	r0, [pc, #216]	; (8000c3c <MX_GPIO_Init+0x60c>)
 8000b62:	f000 fe31 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b78:	230d      	movs	r3, #13
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b80:	4619      	mov	r1, r3
 8000b82:	4829      	ldr	r0, [pc, #164]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000b84:	f000 fe20 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4825      	ldr	r0, [pc, #148]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000b9c:	f000 fe14 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481d      	ldr	r0, [pc, #116]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000bbc:	f000 fe04 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000bc0:	f248 0304 	movw	r3, #32772	; 0x8004
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481c      	ldr	r0, [pc, #112]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000bd6:	f000 fdf7 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bea:	2305      	movs	r3, #5
 8000bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4810      	ldr	r0, [pc, #64]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000bf6:	f000 fde7 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c10:	4619      	mov	r1, r3
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_GPIO_Init+0x618>)
 8000c14:	f000 fdd8 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c18:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000c1c:	e016      	b.n	8000c4c <MX_GPIO_Init+0x61c>
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40021800 	.word	0x40021800
 8000c2c:	40022400 	.word	0x40022400
 8000c30:	40020c00 	.word	0x40020c00
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40022000 	.word	0x40022000
 8000c3c:	40022800 	.word	0x40022800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40021400 	.word	0x40021400
 8000c48:	40021c00 	.word	0x40021c00
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c5a:	230d      	movs	r3, #13
 8000c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c62:	4619      	mov	r1, r3
 8000c64:	48a5      	ldr	r0, [pc, #660]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000c66:	f000 fdaf 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c82:	4619      	mov	r1, r3
 8000c84:	489e      	ldr	r0, [pc, #632]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000c86:	f000 fd9f 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4897      	ldr	r0, [pc, #604]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000ca8:	f000 fd8e 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cb2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	488f      	ldr	r0, [pc, #572]	; (8000f00 <MX_GPIO_Init+0x8d0>)
 8000cc4:	f000 fd80 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cc8:	23c0      	movs	r3, #192	; 0xc0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4889      	ldr	r0, [pc, #548]	; (8000f08 <MX_GPIO_Init+0x8d8>)
 8000ce4:	f000 fd70 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000ce8:	2310      	movs	r3, #16
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d00:	4619      	mov	r1, r3
 8000d02:	487e      	ldr	r0, [pc, #504]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000d04:	f000 fd60 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d08:	2328      	movs	r3, #40	; 0x28
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d18:	230c      	movs	r3, #12
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d20:	4619      	mov	r1, r3
 8000d22:	4876      	ldr	r0, [pc, #472]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000d24:	f000 fd50 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d28:	23c8      	movs	r3, #200	; 0xc8
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4873      	ldr	r0, [pc, #460]	; (8000f0c <MX_GPIO_Init+0x8dc>)
 8000d40:	f000 fd42 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d44:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d56:	4619      	mov	r1, r3
 8000d58:	486d      	ldr	r0, [pc, #436]	; (8000f10 <MX_GPIO_Init+0x8e0>)
 8000d5a:	f000 fd35 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d76:	4619      	mov	r1, r3
 8000d78:	4863      	ldr	r0, [pc, #396]	; (8000f08 <MX_GPIO_Init+0x8d8>)
 8000d7a:	f000 fd25 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d8e:	230a      	movs	r3, #10
 8000d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d96:	4619      	mov	r1, r3
 8000d98:	485b      	ldr	r0, [pc, #364]	; (8000f08 <MX_GPIO_Init+0x8d8>)
 8000d9a:	f000 fd15 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d9e:	2332      	movs	r3, #50	; 0x32
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dae:	230b      	movs	r3, #11
 8000db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db6:	4619      	mov	r1, r3
 8000db8:	4853      	ldr	r0, [pc, #332]	; (8000f08 <MX_GPIO_Init+0x8d8>)
 8000dba:	f000 fd05 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dce:	2309      	movs	r3, #9
 8000dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	484e      	ldr	r0, [pc, #312]	; (8000f14 <MX_GPIO_Init+0x8e4>)
 8000dda:	f000 fcf5 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000dde:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000df0:	2309      	movs	r3, #9
 8000df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4847      	ldr	r0, [pc, #284]	; (8000f18 <MX_GPIO_Init+0x8e8>)
 8000dfc:	f000 fce4 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e00:	2304      	movs	r3, #4
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e10:	4619      	mov	r1, r3
 8000e12:	483e      	ldr	r0, [pc, #248]	; (8000f0c <MX_GPIO_Init+0x8dc>)
 8000e14:	f000 fcd8 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e18:	2386      	movs	r3, #134	; 0x86
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e28:	230b      	movs	r3, #11
 8000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e30:	4619      	mov	r1, r3
 8000e32:	4834      	ldr	r0, [pc, #208]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000e34:	f000 fcc8 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e48:	4619      	mov	r1, r3
 8000e4a:	482e      	ldr	r0, [pc, #184]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000e4c:	f000 fcbc 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e50:	2350      	movs	r3, #80	; 0x50
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e60:	230d      	movs	r3, #13
 8000e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4826      	ldr	r0, [pc, #152]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000e6c:	f000 fcac 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e70:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e76:	2312      	movs	r3, #18
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e82:	2304      	movs	r3, #4
 8000e84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	481b      	ldr	r0, [pc, #108]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000e8e:	f000 fc9b 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000e92:	2328      	movs	r3, #40	; 0x28
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ea2:	230a      	movs	r3, #10
 8000ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4815      	ldr	r0, [pc, #84]	; (8000f04 <MX_GPIO_Init+0x8d4>)
 8000eae:	f000 fc8b 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000eb2:	2340      	movs	r3, #64	; 0x40
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ec2:	2309      	movs	r3, #9
 8000ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <MX_GPIO_Init+0x8cc>)
 8000ece:	f000 fc7b 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000ed2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ee4:	2305      	movs	r3, #5
 8000ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eec:	4619      	mov	r1, r3
 8000eee:	4809      	ldr	r0, [pc, #36]	; (8000f14 <MX_GPIO_Init+0x8e4>)
 8000ef0:	f000 fc6a 	bl	80017c8 <HAL_GPIO_Init>

}
 8000ef4:	bf00      	nop
 8000ef6:	3740      	adds	r7, #64	; 0x40
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021c00 	.word	0x40021c00
 8000f00:	40022000 	.word	0x40022000
 8000f04:	40020000 	.word	0x40020000
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	40021800 	.word	0x40021800
 8000f10:	40021400 	.word	0x40021400
 8000f14:	40020400 	.word	0x40020400
 8000f18:	40020c00 	.word	0x40020c00

08000f1c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f24:	1d39      	adds	r1, r7, #4
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <__io_putchar+0x20>)
 8000f2e:	f001 ff29 	bl	8002d84 <HAL_UART_Transmit>
	return ch;
 8000f32:	687b      	ldr	r3, [r7, #4]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200002f0 	.word	0x200002f0

08000f40 <task1>:

void task1(void * pvParameters)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	int delay = (int) pvParameters;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		if (xSemaphoreTake(mutex, portMAX_DELAY) == pdTRUE) {
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <task1+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fed3 	bl	8003d00 <xQueueSemaphoreTake>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d1f5      	bne.n	8000f4c <task1+0xc>
			printf("Je suis la tache 1 et je m'endors pour %d ticks\r\n", delay);
 8000f60:	68f9      	ldr	r1, [r7, #12]
 8000f62:	4808      	ldr	r0, [pc, #32]	; (8000f84 <task1+0x44>)
 8000f64:	f004 fd1e 	bl	80059a4 <iprintf>
			vTaskDelay(delay);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 fa7a 	bl	8004464 <vTaskDelay>
			xSemaphoreGive(mutex);
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <task1+0x40>)
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	2300      	movs	r3, #0
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	f002 fdbb 	bl	8003af4 <xQueueGenericSend>
		if (xSemaphoreTake(mutex, portMAX_DELAY) == pdTRUE) {
 8000f7e:	e7e5      	b.n	8000f4c <task1+0xc>
 8000f80:	200002e8 	.word	0x200002e8
 8000f84:	080069ec 	.word	0x080069ec

08000f88 <task2>:
		}
	}
}

void task2(void * pvParameters)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	int delay = (int) pvParameters;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		if (xSemaphoreTake(mutex, portMAX_DELAY) == pdTRUE) {
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <task2+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 feaf 	bl	8003d00 <xQueueSemaphoreTake>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d1f5      	bne.n	8000f94 <task2+0xc>
			printf("Je suis la tache 2 et je m'endors pour %d ticks\r\n", delay);
 8000fa8:	68f9      	ldr	r1, [r7, #12]
 8000faa:	4808      	ldr	r0, [pc, #32]	; (8000fcc <task2+0x44>)
 8000fac:	f004 fcfa 	bl	80059a4 <iprintf>
			vTaskDelay(delay);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f003 fa56 	bl	8004464 <vTaskDelay>
			xSemaphoreGive(mutex);
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <task2+0x40>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	f002 fd97 	bl	8003af4 <xQueueGenericSend>
		if (xSemaphoreTake(mutex, portMAX_DELAY) == pdTRUE) {
 8000fc6:	e7e5      	b.n	8000f94 <task2+0xc>
 8000fc8:	200002e8 	.word	0x200002e8
 8000fcc:	08006a20 	.word	0x08006a20

08000fd0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fd6:	f000 fab4 	bl	8001542 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fda:	f000 f863 	bl	80010a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fde:	f7ff fb27 	bl	8000630 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000fe2:	f000 f9d3 	bl	800138c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	BaseType_t ret;
	TaskHandle_t h_task1 = NULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
	TaskHandle_t h_task2 = NULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]

	/* Create the task, storing the handle. */
	mutex = xSemaphoreCreateMutex();
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f002 fd67 	bl	8003ac2 <xQueueCreateMutex>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a25      	ldr	r2, [pc, #148]	; (800108c <main+0xbc>)
 8000ff8:	6013      	str	r3, [r2, #0]
    if (mutex == NULL)
 8000ffa:	4b24      	ldr	r3, [pc, #144]	; (800108c <main+0xbc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d104      	bne.n	800100c <main+0x3c>
    {
        printf("Error Mutex\r\n");
 8001002:	4823      	ldr	r0, [pc, #140]	; (8001090 <main+0xc0>)
 8001004:	f004 fd54 	bl	8005ab0 <puts>
		Error_Handler();
 8001008:	f000 f8ba 	bl	8001180 <Error_Handler>
    }

	ret = xTaskCreate(task1, "Tache 1", STACK_SIZE, (void *) TASK1_DELAY, TASK1_PRIORITY, &h_task1);
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	2301      	movs	r3, #1
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101c:	491d      	ldr	r1, [pc, #116]	; (8001094 <main+0xc4>)
 800101e:	481e      	ldr	r0, [pc, #120]	; (8001098 <main+0xc8>)
 8001020:	f003 f8e7 	bl	80041f2 <xTaskCreate>
 8001024:	6178      	str	r0, [r7, #20]
	configASSERT(pdPASS == ret);
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d00c      	beq.n	8001046 <main+0x76>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800102c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001030:	b672      	cpsid	i
 8001032:	f383 8811 	msr	BASEPRI, r3
 8001036:	f3bf 8f6f 	isb	sy
 800103a:	f3bf 8f4f 	dsb	sy
 800103e:	b662      	cpsie	i
 8001040:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001042:	bf00      	nop
 8001044:	e7fe      	b.n	8001044 <main+0x74>
	ret = xTaskCreate(task2, "Tache 2", STACK_SIZE, (void *) TASK2_DELAY, TASK2_PRIORITY, &h_task2);
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	2302      	movs	r3, #2
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2302      	movs	r3, #2
 8001050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001054:	4911      	ldr	r1, [pc, #68]	; (800109c <main+0xcc>)
 8001056:	4812      	ldr	r0, [pc, #72]	; (80010a0 <main+0xd0>)
 8001058:	f003 f8cb 	bl	80041f2 <xTaskCreate>
 800105c:	6178      	str	r0, [r7, #20]
	configASSERT(pdPASS == ret);
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d00c      	beq.n	800107e <main+0xae>
	__asm volatile
 8001064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001068:	b672      	cpsid	i
 800106a:	f383 8811 	msr	BASEPRI, r3
 800106e:	f3bf 8f6f 	isb	sy
 8001072:	f3bf 8f4f 	dsb	sy
 8001076:	b662      	cpsie	i
 8001078:	60fb      	str	r3, [r7, #12]
}
 800107a:	bf00      	nop
 800107c:	e7fe      	b.n	800107c <main+0xac>

	vTaskStartScheduler();
 800107e:	f003 fa27 	bl	80044d0 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8001082:	f7ff fab1 	bl	80005e8 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001086:	f002 fb1c 	bl	80036c2 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800108a:	e7fe      	b.n	800108a <main+0xba>
 800108c:	200002e8 	.word	0x200002e8
 8001090:	08006a54 	.word	0x08006a54
 8001094:	08006a64 	.word	0x08006a64
 8001098:	08000f41 	.word	0x08000f41
 800109c:	08006a6c 	.word	0x08006a6c
 80010a0:	08000f89 	.word	0x08000f89

080010a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2230      	movs	r2, #48	; 0x30
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 fc6e 	bl	8005994 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <SystemClock_Config+0xd4>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	4a2a      	ldr	r2, [pc, #168]	; (8001178 <SystemClock_Config+0xd4>)
 80010ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d2:	6413      	str	r3, [r2, #64]	; 0x40
 80010d4:	4b28      	ldr	r3, [pc, #160]	; (8001178 <SystemClock_Config+0xd4>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <SystemClock_Config+0xd8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a25      	ldr	r2, [pc, #148]	; (800117c <SystemClock_Config+0xd8>)
 80010e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <SystemClock_Config+0xd8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001106:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 800110c:	2319      	movs	r3, #25
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 432;
 8001110:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001114:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fd66 	bl	8001bf4 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 800112e:	f000 f827 	bl	8001180 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001132:	f000 fd0f 	bl	8001b54 <HAL_PWREx_EnableOverDrive>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 800113c:	f000 f820 	bl	8001180 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001140:	230f      	movs	r3, #15
 8001142:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001144:	2302      	movs	r3, #2
 8001146:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800114c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001150:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001156:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2107      	movs	r1, #7
 800115e:	4618      	mov	r0, r3
 8001160:	f000 ffec 	bl	800213c <HAL_RCC_ClockConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0xca>
	{
		Error_Handler();
 800116a:	f000 f809 	bl	8001180 <Error_Handler>
	}
}
 800116e:	bf00      	nop
 8001170:	3750      	adds	r7, #80	; 0x50
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001188:	e7fe      	b.n	8001188 <Error_Handler+0x8>
	...

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_MspInit+0x4c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_MspInit+0x4c>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_MspInit+0x4c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HAL_MspInit+0x4c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	210f      	movs	r1, #15
 80011c6:	f06f 0001 	mvn.w	r0, #1
 80011ca:	f000 fad4 	bl	8001776 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <NMI_Handler+0x4>

080011e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <MemManage_Handler+0x4>

080011ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120c:	f000 f9d6 	bl	80015bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001210:	f003 fd70 	bl	8004cf4 <xTaskGetSchedulerState>
 8001214:	4603      	mov	r3, r0
 8001216:	2b01      	cmp	r3, #1
 8001218:	d001      	beq.n	800121e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800121a:	f004 f94d 	bl	80054b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}

08001222 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	e00a      	b.n	800124a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001234:	f3af 8000 	nop.w
 8001238:	4601      	mov	r1, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	60ba      	str	r2, [r7, #8]
 8001240:	b2ca      	uxtb	r2, r1
 8001242:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3301      	adds	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	dbf0      	blt.n	8001234 <_read+0x12>
  }

  return len;
 8001252:	687b      	ldr	r3, [r7, #4]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	e009      	b.n	8001282 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	60ba      	str	r2, [r7, #8]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fe50 	bl	8000f1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3301      	adds	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	dbf1      	blt.n	800126e <_write+0x12>
  }
  return len;
 800128a:	687b      	ldr	r3, [r7, #4]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <_close>:

int _close(int file)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012bc:	605a      	str	r2, [r3, #4]
  return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_isatty>:

int _isatty(int file)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012d4:	2301      	movs	r3, #1
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b085      	sub	sp, #20
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001304:	4a14      	ldr	r2, [pc, #80]	; (8001358 <_sbrk+0x5c>)
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <_sbrk+0x60>)
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <_sbrk+0x64>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <_sbrk+0x68>)
 800131c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	429a      	cmp	r2, r3
 800132a:	d207      	bcs.n	800133c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800132c:	f004 fafa 	bl	8005924 <__errno>
 8001330:	4603      	mov	r3, r0
 8001332:	220c      	movs	r2, #12
 8001334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	e009      	b.n	8001350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <_sbrk+0x64>)
 800134c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20050000 	.word	0x20050000
 800135c:	00000400 	.word	0x00000400
 8001360:	200002ec 	.word	0x200002ec
 8001364:	200040a0 	.word	0x200040a0

08001368 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <SystemInit+0x20>)
 800136e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <SystemInit+0x20>)
 8001374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 8001392:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <MX_USART1_UART_Init+0x5c>)
 8001394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800139c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013d0:	f001 fc8a 	bl	8002ce8 <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013da:	f7ff fed1 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002f0 	.word	0x200002f0
 80013e8:	40011000 	.word	0x40011000

080013ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0ac      	sub	sp, #176	; 0xb0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	2284      	movs	r2, #132	; 0x84
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fac1 	bl	8005994 <memset>
  if(uartHandle->Instance==USART1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d15c      	bne.n	80014d6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800141c:	2340      	movs	r3, #64	; 0x40
 800141e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001420:	2300      	movs	r3, #0
 8001422:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001424:	f107 0318 	add.w	r3, r7, #24
 8001428:	4618      	mov	r0, r3
 800142a:	f001 f86d 	bl	8002508 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001434:	f7ff fea4 	bl	8001180 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001438:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	6453      	str	r3, [r2, #68]	; 0x44
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 8001446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6313      	str	r3, [r2, #48]	; 0x30
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001498:	2307      	movs	r3, #7
 800149a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014a2:	4619      	mov	r1, r3
 80014a4:	4810      	ldr	r0, [pc, #64]	; (80014e8 <HAL_UART_MspInit+0xfc>)
 80014a6:	f000 f98f 	bl	80017c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80014aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c4:	2307      	movs	r3, #7
 80014c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014ce:	4619      	mov	r1, r3
 80014d0:	4806      	ldr	r0, [pc, #24]	; (80014ec <HAL_UART_MspInit+0x100>)
 80014d2:	f000 f979 	bl	80017c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014d6:	bf00      	nop
 80014d8:	37b0      	adds	r7, #176	; 0xb0
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40011000 	.word	0x40011000
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020000 	.word	0x40020000

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014f6:	490e      	ldr	r1, [pc, #56]	; (8001530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f8:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800150c:	4c0b      	ldr	r4, [pc, #44]	; (800153c <LoopFillZerobss+0x26>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800151a:	f7ff ff25 	bl	8001368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151e:	f004 fa07 	bl	8005930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff fd55 	bl	8000fd0 <main>
  bx  lr    
 8001526:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001528:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001534:	08006b3c 	.word	0x08006b3c
  ldr r2, =_sbss
 8001538:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800153c:	2000409c 	.word	0x2000409c

08001540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC_IRQHandler>

08001542 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001546:	2003      	movs	r0, #3
 8001548:	f000 f90a 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154c:	200f      	movs	r0, #15
 800154e:	f000 f805 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001552:	f7ff fe1b 	bl	800118c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_InitTick+0x54>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_InitTick+0x58>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001572:	fbb3 f3f1 	udiv	r3, r3, r1
 8001576:	fbb2 f3f3 	udiv	r3, r2, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f917 	bl	80017ae <HAL_SYSTICK_Config>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00e      	b.n	80015a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d80a      	bhi.n	80015a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f000 f8ed 	bl	8001776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800159c:	4a06      	ldr	r2, [pc, #24]	; (80015b8 <HAL_InitTick+0x5c>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000008 	.word	0x20000008
 80015b8:	20000004 	.word	0x20000004

080015bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_IncTick+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x24>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_IncTick+0x24>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000008 	.word	0x20000008
 80015e0:	20000378 	.word	0x20000378

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000378 	.word	0x20000378

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <__NVIC_SetPriorityGrouping+0x40>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001626:	4313      	orrs	r3, r2
 8001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <__NVIC_SetPriorityGrouping+0x40>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00
 8001640:	05fa0000 	.word	0x05fa0000

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800172c:	d301      	bcc.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <SysTick_Config+0x40>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	210f      	movs	r1, #15
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f7ff ff8e 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <SysTick_Config+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <SysTick_Config+0x40>)
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff47 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001788:	f7ff ff5c 	bl	8001644 <__NVIC_GetPriorityGrouping>
 800178c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff ff8e 	bl	80016b4 <NVIC_EncodePriority>
 8001798:	4602      	mov	r2, r0
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff5d 	bl	8001660 <__NVIC_SetPriority>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ffb0 	bl	800171c <SysTick_Config>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	e175      	b.n	8001ad4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017e8:	2201      	movs	r2, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	429a      	cmp	r2, r3
 8001802:	f040 8164 	bne.w	8001ace <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	2b01      	cmp	r3, #1
 8001810:	d005      	beq.n	800181e <HAL_GPIO_Init+0x56>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d130      	bne.n	8001880 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001854:	2201      	movs	r2, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 0201 	and.w	r2, r3, #1
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b03      	cmp	r3, #3
 800188a:	d017      	beq.n	80018bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d123      	bne.n	8001910 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	08da      	lsrs	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3208      	adds	r2, #8
 80018d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	08da      	lsrs	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3208      	adds	r2, #8
 800190a:	69b9      	ldr	r1, [r7, #24]
 800190c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0203 	and.w	r2, r3, #3
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80be 	beq.w	8001ace <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	4b66      	ldr	r3, [pc, #408]	; (8001aec <HAL_GPIO_Init+0x324>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a65      	ldr	r2, [pc, #404]	; (8001aec <HAL_GPIO_Init+0x324>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b63      	ldr	r3, [pc, #396]	; (8001aec <HAL_GPIO_Init+0x324>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800196a:	4a61      	ldr	r2, [pc, #388]	; (8001af0 <HAL_GPIO_Init+0x328>)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	220f      	movs	r2, #15
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a58      	ldr	r2, [pc, #352]	; (8001af4 <HAL_GPIO_Init+0x32c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d037      	beq.n	8001a06 <HAL_GPIO_Init+0x23e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a57      	ldr	r2, [pc, #348]	; (8001af8 <HAL_GPIO_Init+0x330>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d031      	beq.n	8001a02 <HAL_GPIO_Init+0x23a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a56      	ldr	r2, [pc, #344]	; (8001afc <HAL_GPIO_Init+0x334>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d02b      	beq.n	80019fe <HAL_GPIO_Init+0x236>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a55      	ldr	r2, [pc, #340]	; (8001b00 <HAL_GPIO_Init+0x338>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d025      	beq.n	80019fa <HAL_GPIO_Init+0x232>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a54      	ldr	r2, [pc, #336]	; (8001b04 <HAL_GPIO_Init+0x33c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d01f      	beq.n	80019f6 <HAL_GPIO_Init+0x22e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a53      	ldr	r2, [pc, #332]	; (8001b08 <HAL_GPIO_Init+0x340>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d019      	beq.n	80019f2 <HAL_GPIO_Init+0x22a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_GPIO_Init+0x344>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <HAL_GPIO_Init+0x226>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a51      	ldr	r2, [pc, #324]	; (8001b10 <HAL_GPIO_Init+0x348>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00d      	beq.n	80019ea <HAL_GPIO_Init+0x222>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a50      	ldr	r2, [pc, #320]	; (8001b14 <HAL_GPIO_Init+0x34c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d007      	beq.n	80019e6 <HAL_GPIO_Init+0x21e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4f      	ldr	r2, [pc, #316]	; (8001b18 <HAL_GPIO_Init+0x350>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d101      	bne.n	80019e2 <HAL_GPIO_Init+0x21a>
 80019de:	2309      	movs	r3, #9
 80019e0:	e012      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019e2:	230a      	movs	r3, #10
 80019e4:	e010      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019e6:	2308      	movs	r3, #8
 80019e8:	e00e      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019ea:	2307      	movs	r3, #7
 80019ec:	e00c      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019ee:	2306      	movs	r3, #6
 80019f0:	e00a      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019f2:	2305      	movs	r3, #5
 80019f4:	e008      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019f6:	2304      	movs	r3, #4
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019fa:	2303      	movs	r3, #3
 80019fc:	e004      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e002      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_GPIO_Init+0x240>
 8001a06:	2300      	movs	r3, #0
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	f002 0203 	and.w	r2, r2, #3
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	4093      	lsls	r3, r2
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a18:	4935      	ldr	r1, [pc, #212]	; (8001af0 <HAL_GPIO_Init+0x328>)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a26:	4b3d      	ldr	r3, [pc, #244]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4a:	4a34      	ldr	r2, [pc, #208]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a50:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a74:	4a29      	ldr	r2, [pc, #164]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a7a:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a9e:	4a1f      	ldr	r2, [pc, #124]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <HAL_GPIO_Init+0x354>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2b0f      	cmp	r3, #15
 8001ad8:	f67f ae86 	bls.w	80017e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40013800 	.word	0x40013800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40020800 	.word	0x40020800
 8001b00:	40020c00 	.word	0x40020c00
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40021400 	.word	0x40021400
 8001b0c:	40021800 	.word	0x40021800
 8001b10:	40021c00 	.word	0x40021c00
 8001b14:	40022000 	.word	0x40022000
 8001b18:	40022400 	.word	0x40022400
 8001b1c:	40013c00 	.word	0x40013c00

08001b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b3c:	e003      	b.n	8001b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b3e:	887b      	ldrh	r3, [r7, #2]
 8001b40:	041a      	lsls	r2, r3, #16
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	619a      	str	r2, [r3, #24]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <HAL_PWREx_EnableOverDrive+0x98>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a22      	ldr	r2, [pc, #136]	; (8001bec <HAL_PWREx_EnableOverDrive+0x98>)
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <HAL_PWREx_EnableOverDrive+0x98>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b76:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b82:	f7ff fd2f 	bl	80015e4 <HAL_GetTick>
 8001b86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b88:	e009      	b.n	8001b9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b8a:	f7ff fd2b 	bl	80015e4 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b98:	d901      	bls.n	8001b9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e022      	b.n	8001be4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001baa:	d1ee      	bne.n	8001b8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0f      	ldr	r2, [pc, #60]	; (8001bf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb8:	f7ff fd14 	bl	80015e4 <HAL_GetTick>
 8001bbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bbe:	e009      	b.n	8001bd4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bc0:	f7ff fd10 	bl	80015e4 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bce:	d901      	bls.n	8001bd4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e007      	b.n	8001be4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001be0:	d1ee      	bne.n	8001bc0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40007000 	.word	0x40007000

08001bf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e291      	b.n	800212e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8087 	beq.w	8001d26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c18:	4b96      	ldr	r3, [pc, #600]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d00c      	beq.n	8001c3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c24:	4b93      	ldr	r3, [pc, #588]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 030c 	and.w	r3, r3, #12
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d112      	bne.n	8001c56 <HAL_RCC_OscConfig+0x62>
 8001c30:	4b90      	ldr	r3, [pc, #576]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c3c:	d10b      	bne.n	8001c56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3e:	4b8d      	ldr	r3, [pc, #564]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d06c      	beq.n	8001d24 <HAL_RCC_OscConfig+0x130>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d168      	bne.n	8001d24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e26b      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x7a>
 8001c60:	4b84      	ldr	r3, [pc, #528]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a83      	ldr	r2, [pc, #524]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	e02e      	b.n	8001ccc <HAL_RCC_OscConfig+0xd8>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x9c>
 8001c76:	4b7f      	ldr	r3, [pc, #508]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a7e      	ldr	r2, [pc, #504]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b7c      	ldr	r3, [pc, #496]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a7b      	ldr	r2, [pc, #492]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e01d      	b.n	8001ccc <HAL_RCC_OscConfig+0xd8>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xc0>
 8001c9a:	4b76      	ldr	r3, [pc, #472]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a75      	ldr	r2, [pc, #468]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b73      	ldr	r3, [pc, #460]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a72      	ldr	r2, [pc, #456]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0xd8>
 8001cb4:	4b6f      	ldr	r3, [pc, #444]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a6e      	ldr	r2, [pc, #440]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b6c      	ldr	r3, [pc, #432]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6b      	ldr	r2, [pc, #428]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fc86 	bl	80015e4 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fc82 	bl	80015e4 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e21f      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b61      	ldr	r3, [pc, #388]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0xe8>
 8001cfa:	e014      	b.n	8001d26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fc72 	bl	80015e4 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fc6e 	bl	80015e4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e20b      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d16:	4b57      	ldr	r3, [pc, #348]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x110>
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d069      	beq.n	8001e06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d32:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00b      	beq.n	8001d56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3e:	4b4d      	ldr	r3, [pc, #308]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d11c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x190>
 8001d4a:	4b4a      	ldr	r3, [pc, #296]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d116      	bne.n	8001d84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	4b47      	ldr	r3, [pc, #284]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <HAL_RCC_OscConfig+0x17a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e1df      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	493d      	ldr	r1, [pc, #244]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	e040      	b.n	8001e06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d023      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d8c:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a38      	ldr	r2, [pc, #224]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff fc24 	bl	80015e4 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff fc20 	bl	80015e4 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e1bd      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db2:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4929      	ldr	r1, [pc, #164]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
 8001dd2:	e018      	b.n	8001e06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001dda:	f023 0301 	bic.w	r3, r3, #1
 8001dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff fc00 	bl	80015e4 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de8:	f7ff fbfc 	bl	80015e4 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e199      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d038      	beq.n	8001e84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d019      	beq.n	8001e4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1e:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e26:	f7ff fbdd 	bl	80015e4 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fbd9 	bl	80015e4 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e176      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x23a>
 8001e4c:	e01a      	b.n	8001e84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e52:	4a08      	ldr	r2, [pc, #32]	; (8001e74 <HAL_RCC_OscConfig+0x280>)
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5a:	f7ff fbc3 	bl	80015e4 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e62:	f7ff fbbf 	bl	80015e4 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d903      	bls.n	8001e78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e15c      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
 8001e74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e78:	4b91      	ldr	r3, [pc, #580]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1ee      	bne.n	8001e62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80a4 	beq.w	8001fda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e92:	4b8b      	ldr	r3, [pc, #556]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10d      	bne.n	8001eba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b88      	ldr	r3, [pc, #544]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a87      	ldr	r2, [pc, #540]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b85      	ldr	r3, [pc, #532]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eba:	4b82      	ldr	r3, [pc, #520]	; (80020c4 <HAL_RCC_OscConfig+0x4d0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d118      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ec6:	4b7f      	ldr	r3, [pc, #508]	; (80020c4 <HAL_RCC_OscConfig+0x4d0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a7e      	ldr	r2, [pc, #504]	; (80020c4 <HAL_RCC_OscConfig+0x4d0>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff fb87 	bl	80015e4 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eda:	f7ff fb83 	bl	80015e4 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b64      	cmp	r3, #100	; 0x64
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e120      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eec:	4b75      	ldr	r3, [pc, #468]	; (80020c4 <HAL_RCC_OscConfig+0x4d0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x31a>
 8001f00:	4b6f      	ldr	r3, [pc, #444]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f04:	4a6e      	ldr	r2, [pc, #440]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0c:	e02d      	b.n	8001f6a <HAL_RCC_OscConfig+0x376>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x33c>
 8001f16:	4b6a      	ldr	r3, [pc, #424]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1a:	4a69      	ldr	r2, [pc, #420]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6713      	str	r3, [r2, #112]	; 0x70
 8001f22:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	4a66      	ldr	r2, [pc, #408]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2e:	e01c      	b.n	8001f6a <HAL_RCC_OscConfig+0x376>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	d10c      	bne.n	8001f52 <HAL_RCC_OscConfig+0x35e>
 8001f38:	4b61      	ldr	r3, [pc, #388]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	4a60      	ldr	r2, [pc, #384]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f3e:	f043 0304 	orr.w	r3, r3, #4
 8001f42:	6713      	str	r3, [r2, #112]	; 0x70
 8001f44:	4b5e      	ldr	r3, [pc, #376]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f48:	4a5d      	ldr	r2, [pc, #372]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f50:	e00b      	b.n	8001f6a <HAL_RCC_OscConfig+0x376>
 8001f52:	4b5b      	ldr	r3, [pc, #364]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a5a      	ldr	r2, [pc, #360]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a57      	ldr	r2, [pc, #348]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d015      	beq.n	8001f9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f72:	f7ff fb37 	bl	80015e4 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7ff fb33 	bl	80015e4 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e0ce      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	4b4b      	ldr	r3, [pc, #300]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ee      	beq.n	8001f7a <HAL_RCC_OscConfig+0x386>
 8001f9c:	e014      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fb21 	bl	80015e4 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff fb1d 	bl	80015e4 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e0b8      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbc:	4b40      	ldr	r3, [pc, #256]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1ee      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d105      	bne.n	8001fda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fce:	4b3c      	ldr	r3, [pc, #240]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a3b      	ldr	r2, [pc, #236]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80a4 	beq.w	800212c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe4:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d06b      	beq.n	80020c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d149      	bne.n	800208c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff8:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a30      	ldr	r2, [pc, #192]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7ff faee 	bl	80015e4 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7ff faea 	bl	80015e4 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e087      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201e:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69da      	ldr	r2, [r3, #28]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	019b      	lsls	r3, r3, #6
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	085b      	lsrs	r3, r3, #1
 8002042:	3b01      	subs	r3, #1
 8002044:	041b      	lsls	r3, r3, #16
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	061b      	lsls	r3, r3, #24
 800204e:	4313      	orrs	r3, r2
 8002050:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8002052:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002056:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 800205e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff fabe 	bl	80015e4 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206c:	f7ff faba 	bl	80015e4 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e057      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x478>
 800208a:	e04f      	b.n	800212c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8002092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7ff faa4 	bl	80015e4 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff faa0 	bl	80015e4 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e03d      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b2:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4ac>
 80020be:	e035      	b.n	800212c <HAL_RCC_OscConfig+0x538>
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80020c8:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_RCC_OscConfig+0x544>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d028      	beq.n	8002128 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d121      	bne.n	8002128 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d11a      	bne.n	8002128 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020f8:	4013      	ands	r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002100:	4293      	cmp	r3, r2
 8002102:	d111      	bne.n	8002128 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	085b      	lsrs	r3, r3, #1
 8002110:	3b01      	subs	r3, #1
 8002112:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002114:	429a      	cmp	r2, r3
 8002116:	d107      	bne.n	8002128 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800

0800213c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0d0      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d910      	bls.n	8002184 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b67      	ldr	r3, [pc, #412]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 020f 	bic.w	r2, r3, #15
 800216a:	4965      	ldr	r1, [pc, #404]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0b8      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800219c:	4b59      	ldr	r3, [pc, #356]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80021a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80021ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	494d      	ldr	r1, [pc, #308]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d040      	beq.n	8002260 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d115      	bne.n	800221e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e07f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e073      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e06b      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4936      	ldr	r1, [pc, #216]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002230:	f7ff f9d8 	bl	80015e4 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7ff f9d4 	bl	80015e4 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e053      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d210      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 020f 	bic.w	r2, r3, #15
 8002276:	4922      	ldr	r1, [pc, #136]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e032      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4916      	ldr	r1, [pc, #88]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ce:	f000 f821 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	490a      	ldr	r1, [pc, #40]	; (8002308 <HAL_RCC_ClockConfig+0x1cc>)
 80022e0:	5ccb      	ldrb	r3, [r1, r3]
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1d0>)
 80022e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1d4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f934 	bl	800155c <HAL_InitTick>

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023c00 	.word	0x40023c00
 8002304:	40023800 	.word	0x40023800
 8002308:	08006a7c 	.word	0x08006a7c
 800230c:	20000000 	.word	0x20000000
 8002310:	20000004 	.word	0x20000004

08002314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002318:	b090      	sub	sp, #64	; 0x40
 800231a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	637b      	str	r3, [r7, #52]	; 0x34
 8002320:	2300      	movs	r3, #0
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002324:	2300      	movs	r3, #0
 8002326:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800232c:	4b59      	ldr	r3, [pc, #356]	; (8002494 <HAL_RCC_GetSysClockFreq+0x180>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b08      	cmp	r3, #8
 8002336:	d00d      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x40>
 8002338:	2b08      	cmp	r3, #8
 800233a:	f200 80a1 	bhi.w	8002480 <HAL_RCC_GetSysClockFreq+0x16c>
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x34>
 8002342:	2b04      	cmp	r3, #4
 8002344:	d003      	beq.n	800234e <HAL_RCC_GetSysClockFreq+0x3a>
 8002346:	e09b      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002348:	4b53      	ldr	r3, [pc, #332]	; (8002498 <HAL_RCC_GetSysClockFreq+0x184>)
 800234a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800234c:	e09b      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800234e:	4b53      	ldr	r3, [pc, #332]	; (800249c <HAL_RCC_GetSysClockFreq+0x188>)
 8002350:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002352:	e098      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002354:	4b4f      	ldr	r3, [pc, #316]	; (8002494 <HAL_RCC_GetSysClockFreq+0x180>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800235c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800235e:	4b4d      	ldr	r3, [pc, #308]	; (8002494 <HAL_RCC_GetSysClockFreq+0x180>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d028      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236a:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <HAL_RCC_GetSysClockFreq+0x180>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	099b      	lsrs	r3, r3, #6
 8002370:	2200      	movs	r2, #0
 8002372:	623b      	str	r3, [r7, #32]
 8002374:	627a      	str	r2, [r7, #36]	; 0x24
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800237c:	2100      	movs	r1, #0
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_RCC_GetSysClockFreq+0x188>)
 8002380:	fb03 f201 	mul.w	r2, r3, r1
 8002384:	2300      	movs	r3, #0
 8002386:	fb00 f303 	mul.w	r3, r0, r3
 800238a:	4413      	add	r3, r2
 800238c:	4a43      	ldr	r2, [pc, #268]	; (800249c <HAL_RCC_GetSysClockFreq+0x188>)
 800238e:	fba0 1202 	umull	r1, r2, r0, r2
 8002392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002394:	460a      	mov	r2, r1
 8002396:	62ba      	str	r2, [r7, #40]	; 0x28
 8002398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800239a:	4413      	add	r3, r2
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800239e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a0:	2200      	movs	r2, #0
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	61fa      	str	r2, [r7, #28]
 80023a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023ae:	f7fd ff7f 	bl	80002b0 <__aeabi_uldivmod>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4613      	mov	r3, r2
 80023b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ba:	e053      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023bc:	4b35      	ldr	r3, [pc, #212]	; (8002494 <HAL_RCC_GetSysClockFreq+0x180>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	099b      	lsrs	r3, r3, #6
 80023c2:	2200      	movs	r2, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	617a      	str	r2, [r7, #20]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023ce:	f04f 0b00 	mov.w	fp, #0
 80023d2:	4652      	mov	r2, sl
 80023d4:	465b      	mov	r3, fp
 80023d6:	f04f 0000 	mov.w	r0, #0
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	0159      	lsls	r1, r3, #5
 80023e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e4:	0150      	lsls	r0, r2, #5
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	ebb2 080a 	subs.w	r8, r2, sl
 80023ee:	eb63 090b 	sbc.w	r9, r3, fp
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002402:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002406:	ebb2 0408 	subs.w	r4, r2, r8
 800240a:	eb63 0509 	sbc.w	r5, r3, r9
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	00eb      	lsls	r3, r5, #3
 8002418:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800241c:	00e2      	lsls	r2, r4, #3
 800241e:	4614      	mov	r4, r2
 8002420:	461d      	mov	r5, r3
 8002422:	eb14 030a 	adds.w	r3, r4, sl
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	eb45 030b 	adc.w	r3, r5, fp
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	e9d7 4500 	ldrd	r4, r5, [r7]
 800243a:	4629      	mov	r1, r5
 800243c:	028b      	lsls	r3, r1, #10
 800243e:	4621      	mov	r1, r4
 8002440:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002444:	4621      	mov	r1, r4
 8002446:	028a      	lsls	r2, r1, #10
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244e:	2200      	movs	r2, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	60fa      	str	r2, [r7, #12]
 8002454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002458:	f7fd ff2a 	bl	80002b0 <__aeabi_uldivmod>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4613      	mov	r3, r2
 8002462:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_GetSysClockFreq+0x180>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	3301      	adds	r3, #1
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800247e:	e002      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_RCC_GetSysClockFreq+0x184>)
 8002482:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002488:	4618      	mov	r0, r3
 800248a:	3740      	adds	r7, #64	; 0x40
 800248c:	46bd      	mov	sp, r7
 800248e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800
 8002498:	00f42400 	.word	0x00f42400
 800249c:	017d7840 	.word	0x017d7840

080024a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000000 	.word	0x20000000

080024b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024bc:	f7ff fff0 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	0a9b      	lsrs	r3, r3, #10
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4903      	ldr	r1, [pc, #12]	; (80024dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40023800 	.word	0x40023800
 80024dc:	08006a8c 	.word	0x08006a8c

080024e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024e4:	f7ff ffdc 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	0b5b      	lsrs	r3, r3, #13
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4903      	ldr	r1, [pc, #12]	; (8002504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40023800 	.word	0x40023800
 8002504:	08006a8c 	.word	0x08006a8c

08002508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d012      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002530:	4b69      	ldr	r3, [pc, #420]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a68      	ldr	r2, [pc, #416]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002536:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800253a:	6093      	str	r3, [r2, #8]
 800253c:	4b66      	ldr	r3, [pc, #408]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002544:	4964      	ldr	r1, [pc, #400]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002552:	2301      	movs	r3, #1
 8002554:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d017      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002562:	4b5d      	ldr	r3, [pc, #372]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002568:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	4959      	ldr	r1, [pc, #356]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002580:	d101      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002582:	2301      	movs	r3, #1
 8002584:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800258e:	2301      	movs	r3, #1
 8002590:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d017      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800259e:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	494a      	ldr	r1, [pc, #296]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025bc:	d101      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80025be:	2301      	movs	r3, #1
 80025c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80025ca:	2301      	movs	r3, #1
 80025cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80025da:	2301      	movs	r3, #1
 80025dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 808b 	beq.w	8002702 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025ec:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	4a39      	ldr	r2, [pc, #228]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f6:	6413      	str	r3, [r2, #64]	; 0x40
 80025f8:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002604:	4b35      	ldr	r3, [pc, #212]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a34      	ldr	r2, [pc, #208]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800260a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002610:	f7fe ffe8 	bl	80015e4 <HAL_GetTick>
 8002614:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002618:	f7fe ffe4 	bl	80015e4 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e357      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800262a:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002636:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d035      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	429a      	cmp	r2, r3
 8002652:	d02e      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002654:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800265e:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002668:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800266a:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	4a1a      	ldr	r2, [pc, #104]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002674:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002676:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800267c:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d114      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe ffac 	bl	80015e4 <HAL_GetTick>
 800268c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268e:	e00a      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f7fe ffa8 	bl	80015e4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e319      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0ee      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026be:	d111      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026ce:	400b      	ands	r3, r1
 80026d0:	4901      	ldr	r1, [pc, #4]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
 80026d6:	e00b      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40007000 	.word	0x40007000
 80026e0:	0ffffcff 	.word	0x0ffffcff
 80026e4:	4baa      	ldr	r3, [pc, #680]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4aa9      	ldr	r2, [pc, #676]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026ee:	6093      	str	r3, [r2, #8]
 80026f0:	4ba7      	ldr	r3, [pc, #668]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fc:	49a4      	ldr	r1, [pc, #656]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	2b00      	cmp	r3, #0
 800270c:	d010      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800270e:	4ba0      	ldr	r3, [pc, #640]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002714:	4a9e      	ldr	r2, [pc, #632]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800271a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800271e:	4b9c      	ldr	r3, [pc, #624]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002720:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002728:	4999      	ldr	r1, [pc, #612]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800273c:	4b94      	ldr	r3, [pc, #592]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002742:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800274a:	4991      	ldr	r1, [pc, #580]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800275e:	4b8c      	ldr	r3, [pc, #560]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002764:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800276c:	4988      	ldr	r1, [pc, #544]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002780:	4b83      	ldr	r3, [pc, #524]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800278e:	4980      	ldr	r1, [pc, #512]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027a2:	4b7b      	ldr	r3, [pc, #492]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4977      	ldr	r1, [pc, #476]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027c4:	4b72      	ldr	r3, [pc, #456]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ca:	f023 0203 	bic.w	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	496f      	ldr	r1, [pc, #444]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027e6:	4b6a      	ldr	r3, [pc, #424]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ec:	f023 020c 	bic.w	r2, r3, #12
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	4966      	ldr	r1, [pc, #408]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002808:	4b61      	ldr	r3, [pc, #388]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002816:	495e      	ldr	r1, [pc, #376]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800282a:	4b59      	ldr	r3, [pc, #356]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002830:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002838:	4955      	ldr	r1, [pc, #340]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800284c:	4b50      	ldr	r3, [pc, #320]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285a:	494d      	ldr	r1, [pc, #308]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800286e:	4b48      	ldr	r3, [pc, #288]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287c:	4944      	ldr	r1, [pc, #272]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002890:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	493c      	ldr	r1, [pc, #240]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c0:	4933      	ldr	r1, [pc, #204]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028d4:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e2:	492b      	ldr	r1, [pc, #172]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d011      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028f6:	4b26      	ldr	r3, [pc, #152]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002904:	4922      	ldr	r1, [pc, #136]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002914:	d101      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002916:	2301      	movs	r3, #1
 8002918:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002926:	2301      	movs	r3, #1
 8002928:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002944:	4912      	ldr	r1, [pc, #72]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002958:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002968:	4909      	ldr	r1, [pc, #36]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d006      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80d9 	beq.w	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002984:	4b02      	ldr	r3, [pc, #8]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a01      	ldr	r2, [pc, #4]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800298a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800298e:	e001      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002990:	40023800 	.word	0x40023800
 8002994:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002996:	f7fe fe25 	bl	80015e4 <HAL_GetTick>
 800299a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800299e:	f7fe fe21 	bl	80015e4 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b64      	cmp	r3, #100	; 0x64
 80029aa:	d901      	bls.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e194      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029b0:	4b6c      	ldr	r3, [pc, #432]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d021      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d11d      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029d0:	4b64      	ldr	r3, [pc, #400]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d6:	0c1b      	lsrs	r3, r3, #16
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029de:	4b61      	ldr	r3, [pc, #388]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e4:	0e1b      	lsrs	r3, r3, #24
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	019a      	lsls	r2, r3, #6
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	431a      	orrs	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	061b      	lsls	r3, r3, #24
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	071b      	lsls	r3, r3, #28
 8002a04:	4957      	ldr	r1, [pc, #348]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d004      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d02e      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a36:	d129      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a38:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3e:	0c1b      	lsrs	r3, r3, #16
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a46:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4c:	0f1b      	lsrs	r3, r3, #28
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	019a      	lsls	r2, r3, #6
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	041b      	lsls	r3, r3, #16
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	061b      	lsls	r3, r3, #24
 8002a66:	431a      	orrs	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	071b      	lsls	r3, r3, #28
 8002a6c:	493d      	ldr	r1, [pc, #244]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a74:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a7a:	f023 021f 	bic.w	r2, r3, #31
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	3b01      	subs	r3, #1
 8002a84:	4937      	ldr	r1, [pc, #220]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01d      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a98:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a9e:	0e1b      	lsrs	r3, r3, #24
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aac:	0f1b      	lsrs	r3, r3, #28
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	019a      	lsls	r2, r3, #6
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	041b      	lsls	r3, r3, #16
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	071b      	lsls	r3, r3, #28
 8002acc:	4925      	ldr	r1, [pc, #148]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d011      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	019a      	lsls	r2, r3, #6
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	061b      	lsls	r3, r3, #24
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	071b      	lsls	r3, r3, #28
 8002afc:	4919      	ldr	r1, [pc, #100]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a16      	ldr	r2, [pc, #88]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b10:	f7fe fd68 	bl	80015e4 <HAL_GetTick>
 8002b14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b18:	f7fe fd64 	bl	80015e4 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e0d7      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80cd 	bne.w	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b4a:	f7fe fd4b 	bl	80015e4 <HAL_GetTick>
 8002b4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b52:	f7fe fd47 	bl	80015e4 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b64      	cmp	r3, #100	; 0x64
 8002b5e:	d903      	bls.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e0ba      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002b64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b68:	4b5e      	ldr	r3, [pc, #376]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b74:	d0ed      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d02e      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d12a      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b9e:	4b51      	ldr	r3, [pc, #324]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bac:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	0f1b      	lsrs	r3, r3, #28
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	019a      	lsls	r2, r3, #6
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	061b      	lsls	r3, r3, #24
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	071b      	lsls	r3, r3, #28
 8002bd2:	4944      	ldr	r1, [pc, #272]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bda:	4b42      	ldr	r3, [pc, #264]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	3b01      	subs	r3, #1
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	493d      	ldr	r1, [pc, #244]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d022      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c08:	d11d      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c0a:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	0e1b      	lsrs	r3, r3, #24
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c18:	4b32      	ldr	r3, [pc, #200]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	0f1b      	lsrs	r3, r3, #28
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	019a      	lsls	r2, r3, #6
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	041b      	lsls	r3, r3, #16
 8002c32:	431a      	orrs	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	061b      	lsls	r3, r3, #24
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	071b      	lsls	r3, r3, #28
 8002c3e:	4929      	ldr	r1, [pc, #164]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d028      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c58:	0e1b      	lsrs	r3, r3, #24
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c60:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	0c1b      	lsrs	r3, r3, #16
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	019a      	lsls	r2, r3, #6
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	041b      	lsls	r3, r3, #16
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	071b      	lsls	r3, r3, #28
 8002c86:	4917      	ldr	r1, [pc, #92]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	4911      	ldr	r1, [pc, #68]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a0e      	ldr	r2, [pc, #56]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb0:	f7fe fc98 	bl	80015e4 <HAL_GetTick>
 8002cb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cb8:	f7fe fc94 	bl	80015e4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e007      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd6:	d1ef      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3720      	adds	r7, #32
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800

08002ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e040      	b.n	8002d7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fe fb6e 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2224      	movs	r2, #36	; 0x24
 8002d14:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0201 	bic.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f8b0 	bl	8002e8c <UART_SetConfig>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e022      	b.n	8002d7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fb08 	bl	8003354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fb8f 	bl	8003498 <UART_CheckIdleState>
 8002d7a:	4603      	mov	r3, r0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	; 0x28
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d171      	bne.n	8002e80 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_UART_Transmit+0x24>
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e06a      	b.n	8002e82 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2221      	movs	r2, #33	; 0x21
 8002db8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dba:	f7fe fc13 	bl	80015e4 <HAL_GetTick>
 8002dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	88fa      	ldrh	r2, [r7, #6]
 8002dcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd8:	d108      	bne.n	8002dec <HAL_UART_Transmit+0x68>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d104      	bne.n	8002dec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	e003      	b.n	8002df4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002df4:	e02c      	b.n	8002e50 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fb80 	bl	8003506 <UART_WaitOnFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e038      	b.n	8002e82 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10b      	bne.n	8002e2e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	3302      	adds	r3, #2
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	e007      	b.n	8002e3e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1cc      	bne.n	8002df6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2200      	movs	r2, #0
 8002e64:	2140      	movs	r1, #64	; 0x40
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fb4d 	bl	8003506 <UART_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e005      	b.n	8002e82 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e000      	b.n	8002e82 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
  }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4ba6      	ldr	r3, [pc, #664]	; (8003150 <UART_SetConfig+0x2c4>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	6979      	ldr	r1, [r7, #20]
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a94      	ldr	r2, [pc, #592]	; (8003154 <UART_SetConfig+0x2c8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d120      	bne.n	8002f4a <UART_SetConfig+0xbe>
 8002f08:	4b93      	ldr	r3, [pc, #588]	; (8003158 <UART_SetConfig+0x2cc>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d816      	bhi.n	8002f44 <UART_SetConfig+0xb8>
 8002f16:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <UART_SetConfig+0x90>)
 8002f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1c:	08002f2d 	.word	0x08002f2d
 8002f20:	08002f39 	.word	0x08002f39
 8002f24:	08002f33 	.word	0x08002f33
 8002f28:	08002f3f 	.word	0x08002f3f
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	77fb      	strb	r3, [r7, #31]
 8002f30:	e150      	b.n	80031d4 <UART_SetConfig+0x348>
 8002f32:	2302      	movs	r3, #2
 8002f34:	77fb      	strb	r3, [r7, #31]
 8002f36:	e14d      	b.n	80031d4 <UART_SetConfig+0x348>
 8002f38:	2304      	movs	r3, #4
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	e14a      	b.n	80031d4 <UART_SetConfig+0x348>
 8002f3e:	2308      	movs	r3, #8
 8002f40:	77fb      	strb	r3, [r7, #31]
 8002f42:	e147      	b.n	80031d4 <UART_SetConfig+0x348>
 8002f44:	2310      	movs	r3, #16
 8002f46:	77fb      	strb	r3, [r7, #31]
 8002f48:	e144      	b.n	80031d4 <UART_SetConfig+0x348>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a83      	ldr	r2, [pc, #524]	; (800315c <UART_SetConfig+0x2d0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d132      	bne.n	8002fba <UART_SetConfig+0x12e>
 8002f54:	4b80      	ldr	r3, [pc, #512]	; (8003158 <UART_SetConfig+0x2cc>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d828      	bhi.n	8002fb4 <UART_SetConfig+0x128>
 8002f62:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <UART_SetConfig+0xdc>)
 8002f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f68:	08002f9d 	.word	0x08002f9d
 8002f6c:	08002fb5 	.word	0x08002fb5
 8002f70:	08002fb5 	.word	0x08002fb5
 8002f74:	08002fb5 	.word	0x08002fb5
 8002f78:	08002fa9 	.word	0x08002fa9
 8002f7c:	08002fb5 	.word	0x08002fb5
 8002f80:	08002fb5 	.word	0x08002fb5
 8002f84:	08002fb5 	.word	0x08002fb5
 8002f88:	08002fa3 	.word	0x08002fa3
 8002f8c:	08002fb5 	.word	0x08002fb5
 8002f90:	08002fb5 	.word	0x08002fb5
 8002f94:	08002fb5 	.word	0x08002fb5
 8002f98:	08002faf 	.word	0x08002faf
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	e118      	b.n	80031d4 <UART_SetConfig+0x348>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	77fb      	strb	r3, [r7, #31]
 8002fa6:	e115      	b.n	80031d4 <UART_SetConfig+0x348>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	e112      	b.n	80031d4 <UART_SetConfig+0x348>
 8002fae:	2308      	movs	r3, #8
 8002fb0:	77fb      	strb	r3, [r7, #31]
 8002fb2:	e10f      	b.n	80031d4 <UART_SetConfig+0x348>
 8002fb4:	2310      	movs	r3, #16
 8002fb6:	77fb      	strb	r3, [r7, #31]
 8002fb8:	e10c      	b.n	80031d4 <UART_SetConfig+0x348>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a68      	ldr	r2, [pc, #416]	; (8003160 <UART_SetConfig+0x2d4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d120      	bne.n	8003006 <UART_SetConfig+0x17a>
 8002fc4:	4b64      	ldr	r3, [pc, #400]	; (8003158 <UART_SetConfig+0x2cc>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fce:	2b30      	cmp	r3, #48	; 0x30
 8002fd0:	d013      	beq.n	8002ffa <UART_SetConfig+0x16e>
 8002fd2:	2b30      	cmp	r3, #48	; 0x30
 8002fd4:	d814      	bhi.n	8003000 <UART_SetConfig+0x174>
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d009      	beq.n	8002fee <UART_SetConfig+0x162>
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d810      	bhi.n	8003000 <UART_SetConfig+0x174>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <UART_SetConfig+0x15c>
 8002fe2:	2b10      	cmp	r3, #16
 8002fe4:	d006      	beq.n	8002ff4 <UART_SetConfig+0x168>
 8002fe6:	e00b      	b.n	8003000 <UART_SetConfig+0x174>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	77fb      	strb	r3, [r7, #31]
 8002fec:	e0f2      	b.n	80031d4 <UART_SetConfig+0x348>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	77fb      	strb	r3, [r7, #31]
 8002ff2:	e0ef      	b.n	80031d4 <UART_SetConfig+0x348>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e0ec      	b.n	80031d4 <UART_SetConfig+0x348>
 8002ffa:	2308      	movs	r3, #8
 8002ffc:	77fb      	strb	r3, [r7, #31]
 8002ffe:	e0e9      	b.n	80031d4 <UART_SetConfig+0x348>
 8003000:	2310      	movs	r3, #16
 8003002:	77fb      	strb	r3, [r7, #31]
 8003004:	e0e6      	b.n	80031d4 <UART_SetConfig+0x348>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a56      	ldr	r2, [pc, #344]	; (8003164 <UART_SetConfig+0x2d8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d120      	bne.n	8003052 <UART_SetConfig+0x1c6>
 8003010:	4b51      	ldr	r3, [pc, #324]	; (8003158 <UART_SetConfig+0x2cc>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003016:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800301a:	2bc0      	cmp	r3, #192	; 0xc0
 800301c:	d013      	beq.n	8003046 <UART_SetConfig+0x1ba>
 800301e:	2bc0      	cmp	r3, #192	; 0xc0
 8003020:	d814      	bhi.n	800304c <UART_SetConfig+0x1c0>
 8003022:	2b80      	cmp	r3, #128	; 0x80
 8003024:	d009      	beq.n	800303a <UART_SetConfig+0x1ae>
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d810      	bhi.n	800304c <UART_SetConfig+0x1c0>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <UART_SetConfig+0x1a8>
 800302e:	2b40      	cmp	r3, #64	; 0x40
 8003030:	d006      	beq.n	8003040 <UART_SetConfig+0x1b4>
 8003032:	e00b      	b.n	800304c <UART_SetConfig+0x1c0>
 8003034:	2300      	movs	r3, #0
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	e0cc      	b.n	80031d4 <UART_SetConfig+0x348>
 800303a:	2302      	movs	r3, #2
 800303c:	77fb      	strb	r3, [r7, #31]
 800303e:	e0c9      	b.n	80031d4 <UART_SetConfig+0x348>
 8003040:	2304      	movs	r3, #4
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e0c6      	b.n	80031d4 <UART_SetConfig+0x348>
 8003046:	2308      	movs	r3, #8
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e0c3      	b.n	80031d4 <UART_SetConfig+0x348>
 800304c:	2310      	movs	r3, #16
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e0c0      	b.n	80031d4 <UART_SetConfig+0x348>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a44      	ldr	r2, [pc, #272]	; (8003168 <UART_SetConfig+0x2dc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d125      	bne.n	80030a8 <UART_SetConfig+0x21c>
 800305c:	4b3e      	ldr	r3, [pc, #248]	; (8003158 <UART_SetConfig+0x2cc>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800306a:	d017      	beq.n	800309c <UART_SetConfig+0x210>
 800306c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003070:	d817      	bhi.n	80030a2 <UART_SetConfig+0x216>
 8003072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003076:	d00b      	beq.n	8003090 <UART_SetConfig+0x204>
 8003078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800307c:	d811      	bhi.n	80030a2 <UART_SetConfig+0x216>
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <UART_SetConfig+0x1fe>
 8003082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003086:	d006      	beq.n	8003096 <UART_SetConfig+0x20a>
 8003088:	e00b      	b.n	80030a2 <UART_SetConfig+0x216>
 800308a:	2300      	movs	r3, #0
 800308c:	77fb      	strb	r3, [r7, #31]
 800308e:	e0a1      	b.n	80031d4 <UART_SetConfig+0x348>
 8003090:	2302      	movs	r3, #2
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e09e      	b.n	80031d4 <UART_SetConfig+0x348>
 8003096:	2304      	movs	r3, #4
 8003098:	77fb      	strb	r3, [r7, #31]
 800309a:	e09b      	b.n	80031d4 <UART_SetConfig+0x348>
 800309c:	2308      	movs	r3, #8
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e098      	b.n	80031d4 <UART_SetConfig+0x348>
 80030a2:	2310      	movs	r3, #16
 80030a4:	77fb      	strb	r3, [r7, #31]
 80030a6:	e095      	b.n	80031d4 <UART_SetConfig+0x348>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a2f      	ldr	r2, [pc, #188]	; (800316c <UART_SetConfig+0x2e0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d125      	bne.n	80030fe <UART_SetConfig+0x272>
 80030b2:	4b29      	ldr	r3, [pc, #164]	; (8003158 <UART_SetConfig+0x2cc>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030c0:	d017      	beq.n	80030f2 <UART_SetConfig+0x266>
 80030c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030c6:	d817      	bhi.n	80030f8 <UART_SetConfig+0x26c>
 80030c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030cc:	d00b      	beq.n	80030e6 <UART_SetConfig+0x25a>
 80030ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d2:	d811      	bhi.n	80030f8 <UART_SetConfig+0x26c>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <UART_SetConfig+0x254>
 80030d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030dc:	d006      	beq.n	80030ec <UART_SetConfig+0x260>
 80030de:	e00b      	b.n	80030f8 <UART_SetConfig+0x26c>
 80030e0:	2301      	movs	r3, #1
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e076      	b.n	80031d4 <UART_SetConfig+0x348>
 80030e6:	2302      	movs	r3, #2
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	e073      	b.n	80031d4 <UART_SetConfig+0x348>
 80030ec:	2304      	movs	r3, #4
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e070      	b.n	80031d4 <UART_SetConfig+0x348>
 80030f2:	2308      	movs	r3, #8
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e06d      	b.n	80031d4 <UART_SetConfig+0x348>
 80030f8:	2310      	movs	r3, #16
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e06a      	b.n	80031d4 <UART_SetConfig+0x348>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <UART_SetConfig+0x2e4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d138      	bne.n	800317a <UART_SetConfig+0x2ee>
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <UART_SetConfig+0x2cc>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003112:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003116:	d017      	beq.n	8003148 <UART_SetConfig+0x2bc>
 8003118:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800311c:	d82a      	bhi.n	8003174 <UART_SetConfig+0x2e8>
 800311e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003122:	d00b      	beq.n	800313c <UART_SetConfig+0x2b0>
 8003124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003128:	d824      	bhi.n	8003174 <UART_SetConfig+0x2e8>
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <UART_SetConfig+0x2aa>
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003132:	d006      	beq.n	8003142 <UART_SetConfig+0x2b6>
 8003134:	e01e      	b.n	8003174 <UART_SetConfig+0x2e8>
 8003136:	2300      	movs	r3, #0
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e04b      	b.n	80031d4 <UART_SetConfig+0x348>
 800313c:	2302      	movs	r3, #2
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e048      	b.n	80031d4 <UART_SetConfig+0x348>
 8003142:	2304      	movs	r3, #4
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e045      	b.n	80031d4 <UART_SetConfig+0x348>
 8003148:	2308      	movs	r3, #8
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e042      	b.n	80031d4 <UART_SetConfig+0x348>
 800314e:	bf00      	nop
 8003150:	efff69f3 	.word	0xefff69f3
 8003154:	40011000 	.word	0x40011000
 8003158:	40023800 	.word	0x40023800
 800315c:	40004400 	.word	0x40004400
 8003160:	40004800 	.word	0x40004800
 8003164:	40004c00 	.word	0x40004c00
 8003168:	40005000 	.word	0x40005000
 800316c:	40011400 	.word	0x40011400
 8003170:	40007800 	.word	0x40007800
 8003174:	2310      	movs	r3, #16
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e02c      	b.n	80031d4 <UART_SetConfig+0x348>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a72      	ldr	r2, [pc, #456]	; (8003348 <UART_SetConfig+0x4bc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d125      	bne.n	80031d0 <UART_SetConfig+0x344>
 8003184:	4b71      	ldr	r3, [pc, #452]	; (800334c <UART_SetConfig+0x4c0>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800318e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003192:	d017      	beq.n	80031c4 <UART_SetConfig+0x338>
 8003194:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003198:	d817      	bhi.n	80031ca <UART_SetConfig+0x33e>
 800319a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319e:	d00b      	beq.n	80031b8 <UART_SetConfig+0x32c>
 80031a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a4:	d811      	bhi.n	80031ca <UART_SetConfig+0x33e>
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <UART_SetConfig+0x326>
 80031aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ae:	d006      	beq.n	80031be <UART_SetConfig+0x332>
 80031b0:	e00b      	b.n	80031ca <UART_SetConfig+0x33e>
 80031b2:	2300      	movs	r3, #0
 80031b4:	77fb      	strb	r3, [r7, #31]
 80031b6:	e00d      	b.n	80031d4 <UART_SetConfig+0x348>
 80031b8:	2302      	movs	r3, #2
 80031ba:	77fb      	strb	r3, [r7, #31]
 80031bc:	e00a      	b.n	80031d4 <UART_SetConfig+0x348>
 80031be:	2304      	movs	r3, #4
 80031c0:	77fb      	strb	r3, [r7, #31]
 80031c2:	e007      	b.n	80031d4 <UART_SetConfig+0x348>
 80031c4:	2308      	movs	r3, #8
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e004      	b.n	80031d4 <UART_SetConfig+0x348>
 80031ca:	2310      	movs	r3, #16
 80031cc:	77fb      	strb	r3, [r7, #31]
 80031ce:	e001      	b.n	80031d4 <UART_SetConfig+0x348>
 80031d0:	2310      	movs	r3, #16
 80031d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031dc:	d15b      	bne.n	8003296 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80031de:	7ffb      	ldrb	r3, [r7, #31]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d828      	bhi.n	8003236 <UART_SetConfig+0x3aa>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <UART_SetConfig+0x360>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	08003211 	.word	0x08003211
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003221 	.word	0x08003221
 80031f8:	08003237 	.word	0x08003237
 80031fc:	08003227 	.word	0x08003227
 8003200:	08003237 	.word	0x08003237
 8003204:	08003237 	.word	0x08003237
 8003208:	08003237 	.word	0x08003237
 800320c:	0800322f 	.word	0x0800322f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003210:	f7ff f952 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 8003214:	61b8      	str	r0, [r7, #24]
        break;
 8003216:	e013      	b.n	8003240 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003218:	f7ff f962 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 800321c:	61b8      	str	r0, [r7, #24]
        break;
 800321e:	e00f      	b.n	8003240 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003220:	4b4b      	ldr	r3, [pc, #300]	; (8003350 <UART_SetConfig+0x4c4>)
 8003222:	61bb      	str	r3, [r7, #24]
        break;
 8003224:	e00c      	b.n	8003240 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7ff f875 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 800322a:	61b8      	str	r0, [r7, #24]
        break;
 800322c:	e008      	b.n	8003240 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003232:	61bb      	str	r3, [r7, #24]
        break;
 8003234:	e004      	b.n	8003240 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	77bb      	strb	r3, [r7, #30]
        break;
 800323e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d074      	beq.n	8003330 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	005a      	lsls	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	441a      	add	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	d916      	bls.n	8003290 <UART_SetConfig+0x404>
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d212      	bcs.n	8003290 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f023 030f 	bic.w	r3, r3, #15
 8003272:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	b29b      	uxth	r3, r3
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	b29a      	uxth	r2, r3
 8003280:	89fb      	ldrh	r3, [r7, #14]
 8003282:	4313      	orrs	r3, r2
 8003284:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	89fa      	ldrh	r2, [r7, #14]
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	e04f      	b.n	8003330 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	77bb      	strb	r3, [r7, #30]
 8003294:	e04c      	b.n	8003330 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003296:	7ffb      	ldrb	r3, [r7, #31]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d828      	bhi.n	80032ee <UART_SetConfig+0x462>
 800329c:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <UART_SetConfig+0x418>)
 800329e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a2:	bf00      	nop
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	080032d1 	.word	0x080032d1
 80032ac:	080032d9 	.word	0x080032d9
 80032b0:	080032ef 	.word	0x080032ef
 80032b4:	080032df 	.word	0x080032df
 80032b8:	080032ef 	.word	0x080032ef
 80032bc:	080032ef 	.word	0x080032ef
 80032c0:	080032ef 	.word	0x080032ef
 80032c4:	080032e7 	.word	0x080032e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7ff f8f6 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 80032cc:	61b8      	str	r0, [r7, #24]
        break;
 80032ce:	e013      	b.n	80032f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d0:	f7ff f906 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 80032d4:	61b8      	str	r0, [r7, #24]
        break;
 80032d6:	e00f      	b.n	80032f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d8:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <UART_SetConfig+0x4c4>)
 80032da:	61bb      	str	r3, [r7, #24]
        break;
 80032dc:	e00c      	b.n	80032f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032de:	f7ff f819 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80032e2:	61b8      	str	r0, [r7, #24]
        break;
 80032e4:	e008      	b.n	80032f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ea:	61bb      	str	r3, [r7, #24]
        break;
 80032ec:	e004      	b.n	80032f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	77bb      	strb	r3, [r7, #30]
        break;
 80032f6:	bf00      	nop
    }

    if (pclk != 0U)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d018      	beq.n	8003330 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	085a      	lsrs	r2, r3, #1
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	441a      	add	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b0f      	cmp	r3, #15
 8003316:	d909      	bls.n	800332c <UART_SetConfig+0x4a0>
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331e:	d205      	bcs.n	800332c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e001      	b.n	8003330 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800333c:	7fbb      	ldrb	r3, [r7, #30]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40007c00 	.word	0x40007c00
 800334c:	40023800 	.word	0x40023800
 8003350:	00f42400 	.word	0x00f42400

08003354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01a      	beq.n	800346a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003452:	d10a      	bne.n	800346a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
  }
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034a8:	f7fe f89c 	bl	80015e4 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f81b 	bl	8003506 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e011      	b.n	80034fe <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b09c      	sub	sp, #112	; 0x70
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	4613      	mov	r3, r2
 8003514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003516:	e0a7      	b.n	8003668 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	f000 80a3 	beq.w	8003668 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003522:	f7fe f85f 	bl	80015e4 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800352e:	429a      	cmp	r2, r3
 8003530:	d302      	bcc.n	8003538 <UART_WaitOnFlagUntilTimeout+0x32>
 8003532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003534:	2b00      	cmp	r3, #0
 8003536:	d13f      	bne.n	80035b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003548:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800354c:	667b      	str	r3, [r7, #100]	; 0x64
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003556:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003558:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800355c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e6      	bne.n	8003538 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3308      	adds	r3, #8
 8003570:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	663b      	str	r3, [r7, #96]	; 0x60
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3308      	adds	r3, #8
 8003588:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800358a:	64ba      	str	r2, [r7, #72]	; 0x48
 800358c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e5      	bne.n	800356a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e068      	b.n	800368a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d050      	beq.n	8003668 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d4:	d148      	bne.n	8003668 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003600:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e6      	bne.n	80035e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3308      	adds	r3, #8
 8003618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	613b      	str	r3, [r7, #16]
   return(result);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	66bb      	str	r3, [r7, #104]	; 0x68
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3308      	adds	r3, #8
 8003630:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003632:	623a      	str	r2, [r7, #32]
 8003634:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	69f9      	ldr	r1, [r7, #28]
 8003638:	6a3a      	ldr	r2, [r7, #32]
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e5      	bne.n	8003612 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e010      	b.n	800368a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	4013      	ands	r3, r2
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	429a      	cmp	r2, r3
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	429a      	cmp	r2, r3
 8003684:	f43f af48 	beq.w	8003518 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3770      	adds	r7, #112	; 0x70
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80036a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036a4:	2b84      	cmp	r3, #132	; 0x84
 80036a6:	d005      	beq.n	80036b4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80036a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	3303      	adds	r3, #3
 80036b2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80036b4:	68fb      	ldr	r3, [r7, #12]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80036c6:	f000 ff03 	bl	80044d0 <vTaskStartScheduler>
  
  return osOK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80036d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036d2:	b089      	sub	sp, #36	; 0x24
 80036d4:	af04      	add	r7, sp, #16
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d020      	beq.n	8003724 <osThreadCreate+0x54>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d01c      	beq.n	8003724 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685c      	ldr	r4, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681d      	ldr	r5, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691e      	ldr	r6, [r3, #16]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ffc8 	bl	8003692 <makeFreeRtosPriority>
 8003702:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800370c:	9202      	str	r2, [sp, #8]
 800370e:	9301      	str	r3, [sp, #4]
 8003710:	9100      	str	r1, [sp, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	4632      	mov	r2, r6
 8003716:	4629      	mov	r1, r5
 8003718:	4620      	mov	r0, r4
 800371a:	f000 fd07 	bl	800412c <xTaskCreateStatic>
 800371e:	4603      	mov	r3, r0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	e01c      	b.n	800375e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685c      	ldr	r4, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003730:	b29e      	uxth	r6, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ffaa 	bl	8003692 <makeFreeRtosPriority>
 800373e:	4602      	mov	r2, r0
 8003740:	f107 030c 	add.w	r3, r7, #12
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	9200      	str	r2, [sp, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4632      	mov	r2, r6
 800374c:	4629      	mov	r1, r5
 800374e:	4620      	mov	r0, r4
 8003750:	f000 fd4f 	bl	80041f2 <xTaskCreate>
 8003754:	4603      	mov	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d001      	beq.n	800375e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800375e:	68fb      	ldr	r3, [r7, #12]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003768 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <osDelay+0x16>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	e000      	b.n	8003780 <osDelay+0x18>
 800377e:	2301      	movs	r3, #1
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fe6f 	bl	8004464 <vTaskDelay>
  
  return osOK;
 8003786:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f103 0208 	add.w	r2, r3, #8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f04f 32ff 	mov.w	r2, #4294967295
 80037a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f103 0208 	add.w	r2, r3, #8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f103 0208 	add.w	r2, r3, #8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	601a      	str	r2, [r3, #0]
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003832:	b480      	push	{r7}
 8003834:	b085      	sub	sp, #20
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d103      	bne.n	8003852 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	e00c      	b.n	800386c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3308      	adds	r3, #8
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e002      	b.n	8003860 <vListInsert+0x2e>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	429a      	cmp	r2, r3
 800386a:	d2f6      	bcs.n	800385a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	601a      	str	r2, [r3, #0]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6892      	ldr	r2, [r2, #8]
 80038ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6852      	ldr	r2, [r2, #4]
 80038c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d103      	bne.n	80038d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	1e5a      	subs	r2, r3, #1
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10c      	bne.n	8003926 <xQueueGenericReset+0x2e>
	__asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	b672      	cpsid	i
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	b662      	cpsie	i
 8003920:	60bb      	str	r3, [r7, #8]
}
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003926:	f001 fd31 	bl	800538c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	441a      	add	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	3b01      	subs	r3, #1
 8003958:	68f9      	ldr	r1, [r7, #12]
 800395a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	441a      	add	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	22ff      	movs	r2, #255	; 0xff
 800396a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	22ff      	movs	r2, #255	; 0xff
 8003972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d114      	bne.n	80039a6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01a      	beq.n	80039ba <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3310      	adds	r3, #16
 8003988:	4618      	mov	r0, r3
 800398a:	f000 ffef 	bl	800496c <xTaskRemoveFromEventList>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d012      	beq.n	80039ba <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <xQueueGenericReset+0xd0>)
 8003996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	e009      	b.n	80039ba <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3310      	adds	r3, #16
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fef0 	bl	8003790 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3324      	adds	r3, #36	; 0x24
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff feeb 	bl	8003790 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039ba:	f001 fd1b 	bl	80053f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039be:	2301      	movs	r3, #1
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	e000ed04 	.word	0xe000ed04

080039cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	; 0x28
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10c      	bne.n	80039fa <xQueueGenericCreate+0x2e>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	b672      	cpsid	i
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	b662      	cpsie	i
 80039f4:	613b      	str	r3, [r7, #16]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	e004      	b.n	8003a10 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	fb02 f303 	mul.w	r3, r2, r3
 8003a0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	3348      	adds	r3, #72	; 0x48
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 fda1 	bl	800555c <pvPortMalloc>
 8003a1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d011      	beq.n	8003a46 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	3348      	adds	r3, #72	; 0x48
 8003a2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a34:	79fa      	ldrb	r2, [r7, #7]
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 f805 	bl	8003a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a46:	69bb      	ldr	r3, [r7, #24]
	}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d103      	bne.n	8003a6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	e002      	b.n	8003a72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a7e:	2101      	movs	r1, #1
 8003a80:	69b8      	ldr	r0, [r7, #24]
 8003a82:	f7ff ff39 	bl	80038f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00e      	beq.n	8003aba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f81d 	bl	8003af4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b086      	sub	sp, #24
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	4603      	mov	r3, r0
 8003aca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	6939      	ldr	r1, [r7, #16]
 8003ada:	6978      	ldr	r0, [r7, #20]
 8003adc:	f7ff ff76 	bl	80039cc <xQueueGenericCreate>
 8003ae0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7ff ffd3 	bl	8003a8e <prvInitialiseMutex>

		return xNewQueue;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
	}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08e      	sub	sp, #56	; 0x38
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b02:	2300      	movs	r3, #0
 8003b04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10c      	bne.n	8003b2a <xQueueGenericSend+0x36>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	b672      	cpsid	i
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	b662      	cpsie	i
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d103      	bne.n	8003b38 <xQueueGenericSend+0x44>
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <xQueueGenericSend+0x48>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <xQueueGenericSend+0x4a>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10c      	bne.n	8003b5c <xQueueGenericSend+0x68>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	b672      	cpsid	i
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	b662      	cpsie	i
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b58:	bf00      	nop
 8003b5a:	e7fe      	b.n	8003b5a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d103      	bne.n	8003b6a <xQueueGenericSend+0x76>
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <xQueueGenericSend+0x7a>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <xQueueGenericSend+0x7c>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10c      	bne.n	8003b8e <xQueueGenericSend+0x9a>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	b672      	cpsid	i
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	b662      	cpsie	i
 8003b88:	623b      	str	r3, [r7, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	e7fe      	b.n	8003b8c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b8e:	f001 f8b1 	bl	8004cf4 <xTaskGetSchedulerState>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d102      	bne.n	8003b9e <xQueueGenericSend+0xaa>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <xQueueGenericSend+0xae>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <xQueueGenericSend+0xb0>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10c      	bne.n	8003bc2 <xQueueGenericSend+0xce>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bac:	b672      	cpsid	i
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	b662      	cpsie	i
 8003bbc:	61fb      	str	r3, [r7, #28]
}
 8003bbe:	bf00      	nop
 8003bc0:	e7fe      	b.n	8003bc0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bc2:	f001 fbe3 	bl	800538c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <xQueueGenericSend+0xe4>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d129      	bne.n	8003c2c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bde:	f000 f9bb 	bl	8003f58 <prvCopyDataToQueue>
 8003be2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	3324      	adds	r3, #36	; 0x24
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 febb 	bl	800496c <xTaskRemoveFromEventList>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	; (8003cfc <xQueueGenericSend+0x208>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	e00a      	b.n	8003c24 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c14:	4b39      	ldr	r3, [pc, #228]	; (8003cfc <xQueueGenericSend+0x208>)
 8003c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c24:	f001 fbe6 	bl	80053f4 <vPortExitCritical>
				return pdPASS;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e063      	b.n	8003cf4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c32:	f001 fbdf 	bl	80053f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e05c      	b.n	8003cf4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c40:	f107 0314 	add.w	r3, r7, #20
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fef5 	bl	8004a34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c4e:	f001 fbd1 	bl	80053f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c52:	f000 fca1 	bl	8004598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c56:	f001 fb99 	bl	800538c <vPortEnterCritical>
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c60:	b25b      	sxtb	r3, r3
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d103      	bne.n	8003c70 <xQueueGenericSend+0x17c>
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c76:	b25b      	sxtb	r3, r3
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d103      	bne.n	8003c86 <xQueueGenericSend+0x192>
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c86:	f001 fbb5 	bl	80053f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c8a:	1d3a      	adds	r2, r7, #4
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fee4 	bl	8004a60 <xTaskCheckForTimeOut>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d124      	bne.n	8003ce8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ca0:	f000 fa2c 	bl	80040fc <prvIsQueueFull>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d018      	beq.n	8003cdc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	3310      	adds	r3, #16
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fe34 	bl	8004920 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cba:	f000 f9b7 	bl	800402c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cbe:	f000 fc79 	bl	80045b4 <xTaskResumeAll>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f47f af7c 	bne.w	8003bc2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8003cca:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <xQueueGenericSend+0x208>)
 8003ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	e772      	b.n	8003bc2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cde:	f000 f9a5 	bl	800402c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ce2:	f000 fc67 	bl	80045b4 <xTaskResumeAll>
 8003ce6:	e76c      	b.n	8003bc2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cea:	f000 f99f 	bl	800402c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cee:	f000 fc61 	bl	80045b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3738      	adds	r7, #56	; 0x38
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08e      	sub	sp, #56	; 0x38
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10c      	bne.n	8003d36 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	b672      	cpsid	i
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	b662      	cpsie	i
 8003d30:	623b      	str	r3, [r7, #32]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00c      	beq.n	8003d58 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	b672      	cpsid	i
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	b662      	cpsie	i
 8003d52:	61fb      	str	r3, [r7, #28]
}
 8003d54:	bf00      	nop
 8003d56:	e7fe      	b.n	8003d56 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d58:	f000 ffcc 	bl	8004cf4 <xTaskGetSchedulerState>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d102      	bne.n	8003d68 <xQueueSemaphoreTake+0x68>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <xQueueSemaphoreTake+0x6c>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <xQueueSemaphoreTake+0x6e>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10c      	bne.n	8003d8c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	b672      	cpsid	i
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	b662      	cpsie	i
 8003d86:	61bb      	str	r3, [r7, #24]
}
 8003d88:	bf00      	nop
 8003d8a:	e7fe      	b.n	8003d8a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d8c:	f001 fafe 	bl	800538c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d024      	beq.n	8003de6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	1e5a      	subs	r2, r3, #1
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d104      	bne.n	8003db6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003dac:	f001 f968 	bl	8005080 <pvTaskIncrementMutexHeldCount>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00f      	beq.n	8003dde <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	3310      	adds	r3, #16
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fdd2 	bl	800496c <xTaskRemoveFromEventList>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dce:	4b55      	ldr	r3, [pc, #340]	; (8003f24 <xQueueSemaphoreTake+0x224>)
 8003dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dde:	f001 fb09 	bl	80053f4 <vPortExitCritical>
				return pdPASS;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e099      	b.n	8003f1a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d113      	bne.n	8003e14 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00c      	beq.n	8003e0c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	b672      	cpsid	i
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	b662      	cpsie	i
 8003e06:	617b      	str	r3, [r7, #20]
}
 8003e08:	bf00      	nop
 8003e0a:	e7fe      	b.n	8003e0a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e0c:	f001 faf2 	bl	80053f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e10:	2300      	movs	r3, #0
 8003e12:	e082      	b.n	8003f1a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e1a:	f107 030c 	add.w	r3, r7, #12
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fe08 	bl	8004a34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e24:	2301      	movs	r3, #1
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e28:	f001 fae4 	bl	80053f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e2c:	f000 fbb4 	bl	8004598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e30:	f001 faac 	bl	800538c <vPortEnterCritical>
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e3a:	b25b      	sxtb	r3, r3
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d103      	bne.n	8003e4a <xQueueSemaphoreTake+0x14a>
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e50:	b25b      	sxtb	r3, r3
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e56:	d103      	bne.n	8003e60 <xQueueSemaphoreTake+0x160>
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e60:	f001 fac8 	bl	80053f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e64:	463a      	mov	r2, r7
 8003e66:	f107 030c 	add.w	r3, r7, #12
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fdf7 	bl	8004a60 <xTaskCheckForTimeOut>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d132      	bne.n	8003ede <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e7a:	f000 f929 	bl	80040d0 <prvIsQueueEmpty>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d026      	beq.n	8003ed2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d109      	bne.n	8003ea0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8003e8c:	f001 fa7e 	bl	800538c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 ff4b 	bl	8004d30 <xTaskPriorityInherit>
 8003e9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003e9c:	f001 faaa 	bl	80053f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	3324      	adds	r3, #36	; 0x24
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fd39 	bl	8004920 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003eae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eb0:	f000 f8bc 	bl	800402c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003eb4:	f000 fb7e 	bl	80045b4 <xTaskResumeAll>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f47f af66 	bne.w	8003d8c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8003ec0:	4b18      	ldr	r3, [pc, #96]	; (8003f24 <xQueueSemaphoreTake+0x224>)
 8003ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	e75c      	b.n	8003d8c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003ed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ed4:	f000 f8aa 	bl	800402c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ed8:	f000 fb6c 	bl	80045b4 <xTaskResumeAll>
 8003edc:	e756      	b.n	8003d8c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003ede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ee0:	f000 f8a4 	bl	800402c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ee4:	f000 fb66 	bl	80045b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eea:	f000 f8f1 	bl	80040d0 <prvIsQueueEmpty>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f43f af4b 	beq.w	8003d8c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00d      	beq.n	8003f18 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8003efc:	f001 fa46 	bl	800538c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f02:	f000 f811 	bl	8003f28 <prvGetDisinheritPriorityAfterTimeout>
 8003f06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 f818 	bl	8004f44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f14:	f001 fa6e 	bl	80053f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3738      	adds	r7, #56	; 0x38
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	e000ed04 	.word	0xe000ed04

08003f28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d006      	beq.n	8003f46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f1c3 0307 	rsb	r3, r3, #7
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	e001      	b.n	8003f4a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
	}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10d      	bne.n	8003f92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d14d      	bne.n	800401a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 ff54 	bl	8004e30 <xTaskPriorityDisinherit>
 8003f88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	e043      	b.n	800401a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d119      	bne.n	8003fcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6858      	ldr	r0, [r3, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	f001 fce8 	bl	8005978 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	441a      	add	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d32b      	bcc.n	800401a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	e026      	b.n	800401a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	68d8      	ldr	r0, [r3, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	f001 fcce 	bl	8005978 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	425b      	negs	r3, r3
 8003fe6:	441a      	add	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d207      	bcs.n	8004008 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	425b      	negs	r3, r3
 8004002:	441a      	add	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d105      	bne.n	800401a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	3b01      	subs	r3, #1
 8004018:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004022:	697b      	ldr	r3, [r7, #20]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004034:	f001 f9aa 	bl	800538c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800403e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004040:	e011      	b.n	8004066 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	2b00      	cmp	r3, #0
 8004048:	d012      	beq.n	8004070 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3324      	adds	r3, #36	; 0x24
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fc8c 	bl	800496c <xTaskRemoveFromEventList>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800405a:	f000 fd67 	bl	8004b2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	3b01      	subs	r3, #1
 8004062:	b2db      	uxtb	r3, r3
 8004064:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406a:	2b00      	cmp	r3, #0
 800406c:	dce9      	bgt.n	8004042 <prvUnlockQueue+0x16>
 800406e:	e000      	b.n	8004072 <prvUnlockQueue+0x46>
					break;
 8004070:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	22ff      	movs	r2, #255	; 0xff
 8004076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800407a:	f001 f9bb 	bl	80053f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800407e:	f001 f985 	bl	800538c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004088:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800408a:	e011      	b.n	80040b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d012      	beq.n	80040ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3310      	adds	r3, #16
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fc67 	bl	800496c <xTaskRemoveFromEventList>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040a4:	f000 fd42 	bl	8004b2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040a8:	7bbb      	ldrb	r3, [r7, #14]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	dce9      	bgt.n	800408c <prvUnlockQueue+0x60>
 80040b8:	e000      	b.n	80040bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	22ff      	movs	r2, #255	; 0xff
 80040c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040c4:	f001 f996 	bl	80053f4 <vPortExitCritical>
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040d8:	f001 f958 	bl	800538c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040e4:	2301      	movs	r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	e001      	b.n	80040ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040ee:	f001 f981 	bl	80053f4 <vPortExitCritical>

	return xReturn;
 80040f2:	68fb      	ldr	r3, [r7, #12]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004104:	f001 f942 	bl	800538c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004110:	429a      	cmp	r2, r3
 8004112:	d102      	bne.n	800411a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004114:	2301      	movs	r3, #1
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	e001      	b.n	800411e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800411e:	f001 f969 	bl	80053f4 <vPortExitCritical>

	return xReturn;
 8004122:	68fb      	ldr	r3, [r7, #12]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08e      	sub	sp, #56	; 0x38
 8004130:	af04      	add	r7, sp, #16
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800413a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10c      	bne.n	800415a <xTaskCreateStatic+0x2e>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	b672      	cpsid	i
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	b662      	cpsie	i
 8004154:	623b      	str	r3, [r7, #32]
}
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10c      	bne.n	800417a <xTaskCreateStatic+0x4e>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	b672      	cpsid	i
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	b662      	cpsie	i
 8004174:	61fb      	str	r3, [r7, #28]
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800417a:	2354      	movs	r3, #84	; 0x54
 800417c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b54      	cmp	r3, #84	; 0x54
 8004182:	d00c      	beq.n	800419e <xTaskCreateStatic+0x72>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	b672      	cpsid	i
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	b662      	cpsie	i
 8004198:	61bb      	str	r3, [r7, #24]
}
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800419e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01e      	beq.n	80041e4 <xTaskCreateStatic+0xb8>
 80041a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01b      	beq.n	80041e4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041be:	2300      	movs	r3, #0
 80041c0:	9303      	str	r3, [sp, #12]
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	9302      	str	r3, [sp, #8]
 80041c6:	f107 0314 	add.w	r3, r7, #20
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f850 	bl	800427c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041de:	f000 f8d7 	bl	8004390 <prvAddNewTaskToReadyList>
 80041e2:	e001      	b.n	80041e8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041e8:	697b      	ldr	r3, [r7, #20]
	}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3728      	adds	r7, #40	; 0x28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b08c      	sub	sp, #48	; 0x30
 80041f6:	af04      	add	r7, sp, #16
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4618      	mov	r0, r3
 8004208:	f001 f9a8 	bl	800555c <pvPortMalloc>
 800420c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00e      	beq.n	8004232 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004214:	2054      	movs	r0, #84	; 0x54
 8004216:	f001 f9a1 	bl	800555c <pvPortMalloc>
 800421a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
 8004228:	e005      	b.n	8004236 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800422a:	6978      	ldr	r0, [r7, #20]
 800422c:	f001 fa60 	bl	80056f0 <vPortFree>
 8004230:	e001      	b.n	8004236 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d017      	beq.n	800426c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004244:	88fa      	ldrh	r2, [r7, #6]
 8004246:	2300      	movs	r3, #0
 8004248:	9303      	str	r3, [sp, #12]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	9302      	str	r3, [sp, #8]
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f80e 	bl	800427c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004260:	69f8      	ldr	r0, [r7, #28]
 8004262:	f000 f895 	bl	8004390 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004266:	2301      	movs	r3, #1
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	e002      	b.n	8004272 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800426c:	f04f 33ff 	mov.w	r3, #4294967295
 8004270:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004272:	69bb      	ldr	r3, [r7, #24]
	}
 8004274:	4618      	mov	r0, r3
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004294:	440b      	add	r3, r1
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	f023 0307 	bic.w	r3, r3, #7
 80042a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00c      	beq.n	80042c8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	b672      	cpsid	i
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	b662      	cpsie	i
 80042c2:	617b      	str	r3, [r7, #20]
}
 80042c4:	bf00      	nop
 80042c6:	e7fe      	b.n	80042c6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01f      	beq.n	800430e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	e012      	b.n	80042fa <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	4413      	add	r3, r2
 80042da:	7819      	ldrb	r1, [r3, #0]
 80042dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	3334      	adds	r3, #52	; 0x34
 80042e4:	460a      	mov	r2, r1
 80042e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d006      	beq.n	8004302 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	3301      	adds	r3, #1
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	2b0f      	cmp	r3, #15
 80042fe:	d9e9      	bls.n	80042d4 <prvInitialiseNewTask+0x58>
 8004300:	e000      	b.n	8004304 <prvInitialiseNewTask+0x88>
			{
				break;
 8004302:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800430c:	e003      	b.n	8004316 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	2b06      	cmp	r3, #6
 800431a:	d901      	bls.n	8004320 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800431c:	2306      	movs	r3, #6
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004324:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800432a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	2200      	movs	r2, #0
 8004330:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	3304      	adds	r3, #4
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fa4a 	bl	80037d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	3318      	adds	r3, #24
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fa45 	bl	80037d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	f1c3 0207 	rsb	r2, r3, #7
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	2200      	movs	r2, #0
 8004360:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	68f9      	ldr	r1, [r7, #12]
 800436e:	69b8      	ldr	r0, [r7, #24]
 8004370:	f000 ff00 	bl	8005174 <pxPortInitialiseStack>
 8004374:	4602      	mov	r2, r0
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004386:	bf00      	nop
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004398:	f000 fff8 	bl	800538c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800439c:	4b2a      	ldr	r3, [pc, #168]	; (8004448 <prvAddNewTaskToReadyList+0xb8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3301      	adds	r3, #1
 80043a2:	4a29      	ldr	r2, [pc, #164]	; (8004448 <prvAddNewTaskToReadyList+0xb8>)
 80043a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043a6:	4b29      	ldr	r3, [pc, #164]	; (800444c <prvAddNewTaskToReadyList+0xbc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043ae:	4a27      	ldr	r2, [pc, #156]	; (800444c <prvAddNewTaskToReadyList+0xbc>)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043b4:	4b24      	ldr	r3, [pc, #144]	; (8004448 <prvAddNewTaskToReadyList+0xb8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d110      	bne.n	80043de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043bc:	f000 fbda 	bl	8004b74 <prvInitialiseTaskLists>
 80043c0:	e00d      	b.n	80043de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043c2:	4b23      	ldr	r3, [pc, #140]	; (8004450 <prvAddNewTaskToReadyList+0xc0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043ca:	4b20      	ldr	r3, [pc, #128]	; (800444c <prvAddNewTaskToReadyList+0xbc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d802      	bhi.n	80043de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043d8:	4a1c      	ldr	r2, [pc, #112]	; (800444c <prvAddNewTaskToReadyList+0xbc>)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <prvAddNewTaskToReadyList+0xc4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3301      	adds	r3, #1
 80043e4:	4a1b      	ldr	r2, [pc, #108]	; (8004454 <prvAddNewTaskToReadyList+0xc4>)
 80043e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	2201      	movs	r2, #1
 80043ee:	409a      	lsls	r2, r3
 80043f0:	4b19      	ldr	r3, [pc, #100]	; (8004458 <prvAddNewTaskToReadyList+0xc8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	4a18      	ldr	r2, [pc, #96]	; (8004458 <prvAddNewTaskToReadyList+0xc8>)
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4a15      	ldr	r2, [pc, #84]	; (800445c <prvAddNewTaskToReadyList+0xcc>)
 8004408:	441a      	add	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3304      	adds	r3, #4
 800440e:	4619      	mov	r1, r3
 8004410:	4610      	mov	r0, r2
 8004412:	f7ff f9ea 	bl	80037ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004416:	f000 ffed 	bl	80053f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800441a:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <prvAddNewTaskToReadyList+0xc0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00e      	beq.n	8004440 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <prvAddNewTaskToReadyList+0xbc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	429a      	cmp	r2, r3
 800442e:	d207      	bcs.n	8004440 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <prvAddNewTaskToReadyList+0xd0>)
 8004432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	2000047c 	.word	0x2000047c
 800444c:	2000037c 	.word	0x2000037c
 8004450:	20000488 	.word	0x20000488
 8004454:	20000498 	.word	0x20000498
 8004458:	20000484 	.word	0x20000484
 800445c:	20000380 	.word	0x20000380
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d019      	beq.n	80044aa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004476:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <vTaskDelay+0x64>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00c      	beq.n	8004498 <vTaskDelay+0x34>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	b672      	cpsid	i
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	b662      	cpsie	i
 8004492:	60bb      	str	r3, [r7, #8]
}
 8004494:	bf00      	nop
 8004496:	e7fe      	b.n	8004496 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004498:	f000 f87e 	bl	8004598 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800449c:	2100      	movs	r1, #0
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fe02 	bl	80050a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044a4:	f000 f886 	bl	80045b4 <xTaskResumeAll>
 80044a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d107      	bne.n	80044c0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <vTaskDelay+0x68>)
 80044b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	200004a4 	.word	0x200004a4
 80044cc:	e000ed04 	.word	0xe000ed04

080044d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	; 0x28
 80044d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044de:	463a      	mov	r2, r7
 80044e0:	1d39      	adds	r1, r7, #4
 80044e2:	f107 0308 	add.w	r3, r7, #8
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fc f864 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044ec:	6839      	ldr	r1, [r7, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	9202      	str	r2, [sp, #8]
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	2300      	movs	r3, #0
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	2300      	movs	r3, #0
 80044fc:	460a      	mov	r2, r1
 80044fe:	4920      	ldr	r1, [pc, #128]	; (8004580 <vTaskStartScheduler+0xb0>)
 8004500:	4820      	ldr	r0, [pc, #128]	; (8004584 <vTaskStartScheduler+0xb4>)
 8004502:	f7ff fe13 	bl	800412c <xTaskCreateStatic>
 8004506:	4603      	mov	r3, r0
 8004508:	4a1f      	ldr	r2, [pc, #124]	; (8004588 <vTaskStartScheduler+0xb8>)
 800450a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800450c:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <vTaskStartScheduler+0xb8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004514:	2301      	movs	r3, #1
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	e001      	b.n	800451e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d118      	bne.n	8004556 <vTaskStartScheduler+0x86>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	b672      	cpsid	i
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	b662      	cpsie	i
 8004538:	613b      	str	r3, [r7, #16]
}
 800453a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800453c:	4b13      	ldr	r3, [pc, #76]	; (800458c <vTaskStartScheduler+0xbc>)
 800453e:	f04f 32ff 	mov.w	r2, #4294967295
 8004542:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004544:	4b12      	ldr	r3, [pc, #72]	; (8004590 <vTaskStartScheduler+0xc0>)
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <vTaskStartScheduler+0xc4>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004550:	f000 fe9e 	bl	8005290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004554:	e010      	b.n	8004578 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d10c      	bne.n	8004578 <vTaskStartScheduler+0xa8>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	b672      	cpsid	i
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	b662      	cpsie	i
 8004572:	60fb      	str	r3, [r7, #12]
}
 8004574:	bf00      	nop
 8004576:	e7fe      	b.n	8004576 <vTaskStartScheduler+0xa6>
}
 8004578:	bf00      	nop
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	08006a74 	.word	0x08006a74
 8004584:	08004b45 	.word	0x08004b45
 8004588:	200004a0 	.word	0x200004a0
 800458c:	2000049c 	.word	0x2000049c
 8004590:	20000488 	.word	0x20000488
 8004594:	20000480 	.word	0x20000480

08004598 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <vTaskSuspendAll+0x18>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	4a03      	ldr	r2, [pc, #12]	; (80045b0 <vTaskSuspendAll+0x18>)
 80045a4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80045a6:	bf00      	nop
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	200004a4 	.word	0x200004a4

080045b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045be:	2300      	movs	r3, #0
 80045c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045c2:	4b42      	ldr	r3, [pc, #264]	; (80046cc <xTaskResumeAll+0x118>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10c      	bne.n	80045e4 <xTaskResumeAll+0x30>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	b672      	cpsid	i
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	b662      	cpsie	i
 80045de:	603b      	str	r3, [r7, #0]
}
 80045e0:	bf00      	nop
 80045e2:	e7fe      	b.n	80045e2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045e4:	f000 fed2 	bl	800538c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045e8:	4b38      	ldr	r3, [pc, #224]	; (80046cc <xTaskResumeAll+0x118>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	4a37      	ldr	r2, [pc, #220]	; (80046cc <xTaskResumeAll+0x118>)
 80045f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045f2:	4b36      	ldr	r3, [pc, #216]	; (80046cc <xTaskResumeAll+0x118>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d161      	bne.n	80046be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045fa:	4b35      	ldr	r3, [pc, #212]	; (80046d0 <xTaskResumeAll+0x11c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d05d      	beq.n	80046be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004602:	e02e      	b.n	8004662 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004604:	4b33      	ldr	r3, [pc, #204]	; (80046d4 <xTaskResumeAll+0x120>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3318      	adds	r3, #24
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff f947 	bl	80038a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3304      	adds	r3, #4
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff f942 	bl	80038a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	2201      	movs	r2, #1
 8004626:	409a      	lsls	r2, r3
 8004628:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <xTaskResumeAll+0x124>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4313      	orrs	r3, r2
 800462e:	4a2a      	ldr	r2, [pc, #168]	; (80046d8 <xTaskResumeAll+0x124>)
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4a27      	ldr	r2, [pc, #156]	; (80046dc <xTaskResumeAll+0x128>)
 8004640:	441a      	add	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3304      	adds	r3, #4
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f7ff f8ce 	bl	80037ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004652:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <xTaskResumeAll+0x12c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	429a      	cmp	r2, r3
 800465a:	d302      	bcc.n	8004662 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800465c:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <xTaskResumeAll+0x130>)
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004662:	4b1c      	ldr	r3, [pc, #112]	; (80046d4 <xTaskResumeAll+0x120>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1cc      	bne.n	8004604 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004670:	f000 fb20 	bl	8004cb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004674:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <xTaskResumeAll+0x134>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d010      	beq.n	80046a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004680:	f000 f836 	bl	80046f0 <xTaskIncrementTick>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800468a:	4b16      	ldr	r3, [pc, #88]	; (80046e4 <xTaskResumeAll+0x130>)
 800468c:	2201      	movs	r2, #1
 800468e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3b01      	subs	r3, #1
 8004694:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f1      	bne.n	8004680 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800469c:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <xTaskResumeAll+0x134>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046a2:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <xTaskResumeAll+0x130>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046aa:	2301      	movs	r3, #1
 80046ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046ae:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <xTaskResumeAll+0x138>)
 80046b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046be:	f000 fe99 	bl	80053f4 <vPortExitCritical>

	return xAlreadyYielded;
 80046c2:	68bb      	ldr	r3, [r7, #8]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	200004a4 	.word	0x200004a4
 80046d0:	2000047c 	.word	0x2000047c
 80046d4:	2000043c 	.word	0x2000043c
 80046d8:	20000484 	.word	0x20000484
 80046dc:	20000380 	.word	0x20000380
 80046e0:	2000037c 	.word	0x2000037c
 80046e4:	20000490 	.word	0x20000490
 80046e8:	2000048c 	.word	0x2000048c
 80046ec:	e000ed04 	.word	0xe000ed04

080046f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046fa:	4b4f      	ldr	r3, [pc, #316]	; (8004838 <xTaskIncrementTick+0x148>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 808a 	bne.w	8004818 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004704:	4b4d      	ldr	r3, [pc, #308]	; (800483c <xTaskIncrementTick+0x14c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800470c:	4a4b      	ldr	r2, [pc, #300]	; (800483c <xTaskIncrementTick+0x14c>)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d122      	bne.n	800475e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004718:	4b49      	ldr	r3, [pc, #292]	; (8004840 <xTaskIncrementTick+0x150>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <xTaskIncrementTick+0x4c>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	b672      	cpsid	i
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	b662      	cpsie	i
 8004736:	603b      	str	r3, [r7, #0]
}
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <xTaskIncrementTick+0x4a>
 800473c:	4b40      	ldr	r3, [pc, #256]	; (8004840 <xTaskIncrementTick+0x150>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	4b40      	ldr	r3, [pc, #256]	; (8004844 <xTaskIncrementTick+0x154>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a3e      	ldr	r2, [pc, #248]	; (8004840 <xTaskIncrementTick+0x150>)
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	4a3e      	ldr	r2, [pc, #248]	; (8004844 <xTaskIncrementTick+0x154>)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	4b3d      	ldr	r3, [pc, #244]	; (8004848 <xTaskIncrementTick+0x158>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3301      	adds	r3, #1
 8004756:	4a3c      	ldr	r2, [pc, #240]	; (8004848 <xTaskIncrementTick+0x158>)
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	f000 faab 	bl	8004cb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800475e:	4b3b      	ldr	r3, [pc, #236]	; (800484c <xTaskIncrementTick+0x15c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	429a      	cmp	r2, r3
 8004766:	d348      	bcc.n	80047fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004768:	4b35      	ldr	r3, [pc, #212]	; (8004840 <xTaskIncrementTick+0x150>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d104      	bne.n	800477c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004772:	4b36      	ldr	r3, [pc, #216]	; (800484c <xTaskIncrementTick+0x15c>)
 8004774:	f04f 32ff 	mov.w	r2, #4294967295
 8004778:	601a      	str	r2, [r3, #0]
					break;
 800477a:	e03e      	b.n	80047fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800477c:	4b30      	ldr	r3, [pc, #192]	; (8004840 <xTaskIncrementTick+0x150>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	429a      	cmp	r2, r3
 8004792:	d203      	bcs.n	800479c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004794:	4a2d      	ldr	r2, [pc, #180]	; (800484c <xTaskIncrementTick+0x15c>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800479a:	e02e      	b.n	80047fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	3304      	adds	r3, #4
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff f87f 	bl	80038a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	3318      	adds	r3, #24
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff f876 	bl	80038a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	2201      	movs	r2, #1
 80047be:	409a      	lsls	r2, r3
 80047c0:	4b23      	ldr	r3, [pc, #140]	; (8004850 <xTaskIncrementTick+0x160>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	4a22      	ldr	r2, [pc, #136]	; (8004850 <xTaskIncrementTick+0x160>)
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <xTaskIncrementTick+0x164>)
 80047d8:	441a      	add	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	3304      	adds	r3, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f7ff f802 	bl	80037ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ea:	4b1b      	ldr	r3, [pc, #108]	; (8004858 <xTaskIncrementTick+0x168>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d3b9      	bcc.n	8004768 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047f8:	e7b6      	b.n	8004768 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047fa:	4b17      	ldr	r3, [pc, #92]	; (8004858 <xTaskIncrementTick+0x168>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004800:	4914      	ldr	r1, [pc, #80]	; (8004854 <xTaskIncrementTick+0x164>)
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d907      	bls.n	8004822 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8004812:	2301      	movs	r3, #1
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e004      	b.n	8004822 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004818:	4b10      	ldr	r3, [pc, #64]	; (800485c <xTaskIncrementTick+0x16c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	4a0f      	ldr	r2, [pc, #60]	; (800485c <xTaskIncrementTick+0x16c>)
 8004820:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004822:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <xTaskIncrementTick+0x170>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800482a:	2301      	movs	r3, #1
 800482c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800482e:	697b      	ldr	r3, [r7, #20]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	200004a4 	.word	0x200004a4
 800483c:	20000480 	.word	0x20000480
 8004840:	20000434 	.word	0x20000434
 8004844:	20000438 	.word	0x20000438
 8004848:	20000494 	.word	0x20000494
 800484c:	2000049c 	.word	0x2000049c
 8004850:	20000484 	.word	0x20000484
 8004854:	20000380 	.word	0x20000380
 8004858:	2000037c 	.word	0x2000037c
 800485c:	2000048c 	.word	0x2000048c
 8004860:	20000490 	.word	0x20000490

08004864 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800486a:	4b28      	ldr	r3, [pc, #160]	; (800490c <vTaskSwitchContext+0xa8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004872:	4b27      	ldr	r3, [pc, #156]	; (8004910 <vTaskSwitchContext+0xac>)
 8004874:	2201      	movs	r2, #1
 8004876:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004878:	e041      	b.n	80048fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800487a:	4b25      	ldr	r3, [pc, #148]	; (8004910 <vTaskSwitchContext+0xac>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004880:	4b24      	ldr	r3, [pc, #144]	; (8004914 <vTaskSwitchContext+0xb0>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	fab3 f383 	clz	r3, r3
 800488c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800488e:	7afb      	ldrb	r3, [r7, #11]
 8004890:	f1c3 031f 	rsb	r3, r3, #31
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	4920      	ldr	r1, [pc, #128]	; (8004918 <vTaskSwitchContext+0xb4>)
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	4613      	mov	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	440b      	add	r3, r1
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10c      	bne.n	80048c4 <vTaskSwitchContext+0x60>
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	b672      	cpsid	i
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	b662      	cpsie	i
 80048be:	607b      	str	r3, [r7, #4]
}
 80048c0:	bf00      	nop
 80048c2:	e7fe      	b.n	80048c2 <vTaskSwitchContext+0x5e>
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4a12      	ldr	r2, [pc, #72]	; (8004918 <vTaskSwitchContext+0xb4>)
 80048d0:	4413      	add	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	3308      	adds	r3, #8
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d104      	bne.n	80048f4 <vTaskSwitchContext+0x90>
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	605a      	str	r2, [r3, #4]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	4a08      	ldr	r2, [pc, #32]	; (800491c <vTaskSwitchContext+0xb8>)
 80048fc:	6013      	str	r3, [r2, #0]
}
 80048fe:	bf00      	nop
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	200004a4 	.word	0x200004a4
 8004910:	20000490 	.word	0x20000490
 8004914:	20000484 	.word	0x20000484
 8004918:	20000380 	.word	0x20000380
 800491c:	2000037c 	.word	0x2000037c

08004920 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10c      	bne.n	800494a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	b672      	cpsid	i
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	b662      	cpsie	i
 8004944:	60fb      	str	r3, [r7, #12]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <vTaskPlaceOnEventList+0x48>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3318      	adds	r3, #24
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fe ff6d 	bl	8003832 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004958:	2101      	movs	r1, #1
 800495a:	6838      	ldr	r0, [r7, #0]
 800495c:	f000 fba4 	bl	80050a8 <prvAddCurrentTaskToDelayedList>
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	2000037c 	.word	0x2000037c

0800496c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10c      	bne.n	800499c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	b672      	cpsid	i
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	b662      	cpsie	i
 8004996:	60fb      	str	r3, [r7, #12]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	3318      	adds	r3, #24
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe ff7f 	bl	80038a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049a6:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <xTaskRemoveFromEventList+0xb0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d11c      	bne.n	80049e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	3304      	adds	r3, #4
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe ff76 	bl	80038a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	2201      	movs	r2, #1
 80049be:	409a      	lsls	r2, r3
 80049c0:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <xTaskRemoveFromEventList+0xb4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <xTaskRemoveFromEventList+0xb4>)
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4a13      	ldr	r2, [pc, #76]	; (8004a24 <xTaskRemoveFromEventList+0xb8>)
 80049d8:	441a      	add	r2, r3
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	3304      	adds	r3, #4
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f7fe ff02 	bl	80037ea <vListInsertEnd>
 80049e6:	e005      	b.n	80049f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	3318      	adds	r3, #24
 80049ec:	4619      	mov	r1, r3
 80049ee:	480e      	ldr	r0, [pc, #56]	; (8004a28 <xTaskRemoveFromEventList+0xbc>)
 80049f0:	f7fe fefb 	bl	80037ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <xTaskRemoveFromEventList+0xc0>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d905      	bls.n	8004a0e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a02:	2301      	movs	r3, #1
 8004a04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a06:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <xTaskRemoveFromEventList+0xc4>)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	e001      	b.n	8004a12 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a12:	697b      	ldr	r3, [r7, #20]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	200004a4 	.word	0x200004a4
 8004a20:	20000484 	.word	0x20000484
 8004a24:	20000380 	.word	0x20000380
 8004a28:	2000043c 	.word	0x2000043c
 8004a2c:	2000037c 	.word	0x2000037c
 8004a30:	20000490 	.word	0x20000490

08004a34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <vTaskInternalSetTimeOutState+0x24>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <vTaskInternalSetTimeOutState+0x28>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	605a      	str	r2, [r3, #4]
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	20000494 	.word	0x20000494
 8004a5c:	20000480 	.word	0x20000480

08004a60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10c      	bne.n	8004a8a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	b672      	cpsid	i
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	b662      	cpsie	i
 8004a84:	613b      	str	r3, [r7, #16]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10c      	bne.n	8004aaa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	b672      	cpsid	i
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	b662      	cpsie	i
 8004aa4:	60fb      	str	r3, [r7, #12]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8004aaa:	f000 fc6f 	bl	800538c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004aae:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <xTaskCheckForTimeOut+0xc4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d102      	bne.n	8004ace <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	e023      	b.n	8004b16 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <xTaskCheckForTimeOut+0xc8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d007      	beq.n	8004aea <xTaskCheckForTimeOut+0x8a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d302      	bcc.n	8004aea <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	61fb      	str	r3, [r7, #28]
 8004ae8:	e015      	b.n	8004b16 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d20b      	bcs.n	8004b0c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	1ad2      	subs	r2, r2, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff ff97 	bl	8004a34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	e004      	b.n	8004b16 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b12:	2301      	movs	r3, #1
 8004b14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b16:	f000 fc6d 	bl	80053f4 <vPortExitCritical>

	return xReturn;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3720      	adds	r7, #32
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000480 	.word	0x20000480
 8004b28:	20000494 	.word	0x20000494

08004b2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <vTaskMissedYield+0x14>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
}
 8004b36:	bf00      	nop
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	20000490 	.word	0x20000490

08004b44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b4c:	f000 f852 	bl	8004bf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b50:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <prvIdleTask+0x28>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d9f9      	bls.n	8004b4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <prvIdleTask+0x2c>)
 8004b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b68:	e7f0      	b.n	8004b4c <prvIdleTask+0x8>
 8004b6a:	bf00      	nop
 8004b6c:	20000380 	.word	0x20000380
 8004b70:	e000ed04 	.word	0xe000ed04

08004b74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	e00c      	b.n	8004b9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4a12      	ldr	r2, [pc, #72]	; (8004bd4 <prvInitialiseTaskLists+0x60>)
 8004b8c:	4413      	add	r3, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe fdfe 	bl	8003790 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3301      	adds	r3, #1
 8004b98:	607b      	str	r3, [r7, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b06      	cmp	r3, #6
 8004b9e:	d9ef      	bls.n	8004b80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ba0:	480d      	ldr	r0, [pc, #52]	; (8004bd8 <prvInitialiseTaskLists+0x64>)
 8004ba2:	f7fe fdf5 	bl	8003790 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ba6:	480d      	ldr	r0, [pc, #52]	; (8004bdc <prvInitialiseTaskLists+0x68>)
 8004ba8:	f7fe fdf2 	bl	8003790 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bac:	480c      	ldr	r0, [pc, #48]	; (8004be0 <prvInitialiseTaskLists+0x6c>)
 8004bae:	f7fe fdef 	bl	8003790 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bb2:	480c      	ldr	r0, [pc, #48]	; (8004be4 <prvInitialiseTaskLists+0x70>)
 8004bb4:	f7fe fdec 	bl	8003790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bb8:	480b      	ldr	r0, [pc, #44]	; (8004be8 <prvInitialiseTaskLists+0x74>)
 8004bba:	f7fe fde9 	bl	8003790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <prvInitialiseTaskLists+0x78>)
 8004bc0:	4a05      	ldr	r2, [pc, #20]	; (8004bd8 <prvInitialiseTaskLists+0x64>)
 8004bc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <prvInitialiseTaskLists+0x7c>)
 8004bc6:	4a05      	ldr	r2, [pc, #20]	; (8004bdc <prvInitialiseTaskLists+0x68>)
 8004bc8:	601a      	str	r2, [r3, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000380 	.word	0x20000380
 8004bd8:	2000040c 	.word	0x2000040c
 8004bdc:	20000420 	.word	0x20000420
 8004be0:	2000043c 	.word	0x2000043c
 8004be4:	20000450 	.word	0x20000450
 8004be8:	20000468 	.word	0x20000468
 8004bec:	20000434 	.word	0x20000434
 8004bf0:	20000438 	.word	0x20000438

08004bf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bfa:	e019      	b.n	8004c30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bfc:	f000 fbc6 	bl	800538c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c00:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <prvCheckTasksWaitingTermination+0x50>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fe fe49 	bl	80038a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c12:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <prvCheckTasksWaitingTermination+0x54>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	4a0b      	ldr	r2, [pc, #44]	; (8004c48 <prvCheckTasksWaitingTermination+0x54>)
 8004c1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <prvCheckTasksWaitingTermination+0x58>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	4a0a      	ldr	r2, [pc, #40]	; (8004c4c <prvCheckTasksWaitingTermination+0x58>)
 8004c24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c26:	f000 fbe5 	bl	80053f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f810 	bl	8004c50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c30:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <prvCheckTasksWaitingTermination+0x58>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e1      	bne.n	8004bfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000450 	.word	0x20000450
 8004c48:	2000047c 	.word	0x2000047c
 8004c4c:	20000464 	.word	0x20000464

08004c50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fd42 	bl	80056f0 <vPortFree>
				vPortFree( pxTCB );
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fd3f 	bl	80056f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c72:	e01a      	b.n	8004caa <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d103      	bne.n	8004c86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fd36 	bl	80056f0 <vPortFree>
	}
 8004c84:	e011      	b.n	8004caa <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d00c      	beq.n	8004caa <prvDeleteTCB+0x5a>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	b672      	cpsid	i
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	b662      	cpsie	i
 8004ca4:	60fb      	str	r3, [r7, #12]
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <prvDeleteTCB+0x58>
	}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cba:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <prvResetNextTaskUnblockTime+0x38>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8004cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ccc:	e008      	b.n	8004ce0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <prvResetNextTaskUnblockTime+0x38>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4a04      	ldr	r2, [pc, #16]	; (8004cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8004cde:	6013      	str	r3, [r2, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	20000434 	.word	0x20000434
 8004cf0:	2000049c 	.word	0x2000049c

08004cf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <xTaskGetSchedulerState+0x34>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d102      	bne.n	8004d08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d02:	2301      	movs	r3, #1
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	e008      	b.n	8004d1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d08:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <xTaskGetSchedulerState+0x38>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d102      	bne.n	8004d16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d10:	2302      	movs	r3, #2
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	e001      	b.n	8004d1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d16:	2300      	movs	r3, #0
 8004d18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d1a:	687b      	ldr	r3, [r7, #4]
	}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	20000488 	.word	0x20000488
 8004d2c:	200004a4 	.word	0x200004a4

08004d30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d069      	beq.n	8004e1a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4a:	4b36      	ldr	r3, [pc, #216]	; (8004e24 <xTaskPriorityInherit+0xf4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d259      	bcs.n	8004e08 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	db06      	blt.n	8004d6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d5c:	4b31      	ldr	r3, [pc, #196]	; (8004e24 <xTaskPriorityInherit+0xf4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	f1c3 0207 	rsb	r2, r3, #7
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	6959      	ldr	r1, [r3, #20]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4a2b      	ldr	r2, [pc, #172]	; (8004e28 <xTaskPriorityInherit+0xf8>)
 8004d7c:	4413      	add	r3, r2
 8004d7e:	4299      	cmp	r1, r3
 8004d80:	d13a      	bne.n	8004df8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	3304      	adds	r3, #4
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fe fd8c 	bl	80038a4 <uxListRemove>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d115      	bne.n	8004dbe <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d96:	4924      	ldr	r1, [pc, #144]	; (8004e28 <xTaskPriorityInherit+0xf8>)
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <xTaskPriorityInherit+0x8e>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	2201      	movs	r2, #1
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43da      	mvns	r2, r3
 8004db4:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <xTaskPriorityInherit+0xfc>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4013      	ands	r3, r2
 8004dba:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <xTaskPriorityInherit+0xfc>)
 8004dbc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004dbe:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <xTaskPriorityInherit+0xf4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	2201      	movs	r2, #1
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	4b16      	ldr	r3, [pc, #88]	; (8004e2c <xTaskPriorityInherit+0xfc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	4a15      	ldr	r2, [pc, #84]	; (8004e2c <xTaskPriorityInherit+0xfc>)
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4a10      	ldr	r2, [pc, #64]	; (8004e28 <xTaskPriorityInherit+0xf8>)
 8004de8:	441a      	add	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	3304      	adds	r3, #4
 8004dee:	4619      	mov	r1, r3
 8004df0:	4610      	mov	r0, r2
 8004df2:	f7fe fcfa 	bl	80037ea <vListInsertEnd>
 8004df6:	e004      	b.n	8004e02 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004df8:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <xTaskPriorityInherit+0xf4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e02:	2301      	movs	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	e008      	b.n	8004e1a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <xTaskPriorityInherit+0xf4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d201      	bcs.n	8004e1a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e16:	2301      	movs	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
	}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	2000037c 	.word	0x2000037c
 8004e28:	20000380 	.word	0x20000380
 8004e2c:	20000484 	.word	0x20000484

08004e30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d072      	beq.n	8004f2c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e46:	4b3c      	ldr	r3, [pc, #240]	; (8004f38 <xTaskPriorityDisinherit+0x108>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d00c      	beq.n	8004e6a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	b672      	cpsid	i
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	b662      	cpsie	i
 8004e64:	60fb      	str	r3, [r7, #12]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10c      	bne.n	8004e8c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	b672      	cpsid	i
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	b662      	cpsie	i
 8004e86:	60bb      	str	r3, [r7, #8]
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e90:	1e5a      	subs	r2, r3, #1
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d044      	beq.n	8004f2c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d140      	bne.n	8004f2c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	3304      	adds	r3, #4
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe fcf8 	bl	80038a4 <uxListRemove>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d115      	bne.n	8004ee6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebe:	491f      	ldr	r1, [pc, #124]	; (8004f3c <xTaskPriorityDisinherit+0x10c>)
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <xTaskPriorityDisinherit+0xb6>
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43da      	mvns	r2, r3
 8004edc:	4b18      	ldr	r3, [pc, #96]	; (8004f40 <xTaskPriorityDisinherit+0x110>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	4a17      	ldr	r2, [pc, #92]	; (8004f40 <xTaskPriorityDisinherit+0x110>)
 8004ee4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	f1c3 0207 	rsb	r2, r3, #7
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	2201      	movs	r2, #1
 8004f00:	409a      	lsls	r2, r3
 8004f02:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <xTaskPriorityDisinherit+0x110>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	4a0d      	ldr	r2, [pc, #52]	; (8004f40 <xTaskPriorityDisinherit+0x110>)
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4a08      	ldr	r2, [pc, #32]	; (8004f3c <xTaskPriorityDisinherit+0x10c>)
 8004f1a:	441a      	add	r2, r3
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	f7fe fc61 	bl	80037ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f2c:	697b      	ldr	r3, [r7, #20]
	}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	2000037c 	.word	0x2000037c
 8004f3c:	20000380 	.word	0x20000380
 8004f40:	20000484 	.word	0x20000484

08004f44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f52:	2301      	movs	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8087 	beq.w	800506c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10c      	bne.n	8004f80 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	b672      	cpsid	i
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	b662      	cpsie	i
 8004f7a:	60fb      	str	r3, [r7, #12]
}
 8004f7c:	bf00      	nop
 8004f7e:	e7fe      	b.n	8004f7e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d902      	bls.n	8004f90 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	61fb      	str	r3, [r7, #28]
 8004f8e:	e002      	b.n	8004f96 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f94:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d065      	beq.n	800506c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d160      	bne.n	800506c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004faa:	4b32      	ldr	r3, [pc, #200]	; (8005074 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d10c      	bne.n	8004fce <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	b672      	cpsid	i
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	b662      	cpsie	i
 8004fc8:	60bb      	str	r3, [r7, #8]
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	db04      	blt.n	8004fec <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	f1c3 0207 	rsb	r2, r3, #7
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	6959      	ldr	r1, [r3, #20]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4a1f      	ldr	r2, [pc, #124]	; (8005078 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004ffc:	4413      	add	r3, r2
 8004ffe:	4299      	cmp	r1, r3
 8005000:	d134      	bne.n	800506c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	3304      	adds	r3, #4
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe fc4c 	bl	80038a4 <uxListRemove>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d115      	bne.n	800503e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005016:	4918      	ldr	r1, [pc, #96]	; (8005078 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	2201      	movs	r2, #1
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	43da      	mvns	r2, r3
 8005034:	4b11      	ldr	r3, [pc, #68]	; (800507c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4013      	ands	r3, r2
 800503a:	4a10      	ldr	r2, [pc, #64]	; (800507c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800503c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	2201      	movs	r2, #1
 8005044:	409a      	lsls	r2, r3
 8005046:	4b0d      	ldr	r3, [pc, #52]	; (800507c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4313      	orrs	r3, r2
 800504c:	4a0b      	ldr	r2, [pc, #44]	; (800507c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4a06      	ldr	r2, [pc, #24]	; (8005078 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800505e:	441a      	add	r2, r3
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	3304      	adds	r3, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f7fe fbbf 	bl	80037ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800506c:	bf00      	nop
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	2000037c 	.word	0x2000037c
 8005078:	20000380 	.word	0x20000380
 800507c:	20000484 	.word	0x20000484

08005080 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005084:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d004      	beq.n	8005096 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005092:	3201      	adds	r2, #1
 8005094:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005096:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005098:	681b      	ldr	r3, [r3, #0]
	}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	2000037c 	.word	0x2000037c

080050a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050b2:	4b29      	ldr	r3, [pc, #164]	; (8005158 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050b8:	4b28      	ldr	r3, [pc, #160]	; (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3304      	adds	r3, #4
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe fbf0 	bl	80038a4 <uxListRemove>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10b      	bne.n	80050e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050ca:	4b24      	ldr	r3, [pc, #144]	; (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	2201      	movs	r2, #1
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43da      	mvns	r2, r3
 80050d8:	4b21      	ldr	r3, [pc, #132]	; (8005160 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4013      	ands	r3, r2
 80050de:	4a20      	ldr	r2, [pc, #128]	; (8005160 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d10a      	bne.n	8005100 <prvAddCurrentTaskToDelayedList+0x58>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050f0:	4b1a      	ldr	r3, [pc, #104]	; (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3304      	adds	r3, #4
 80050f6:	4619      	mov	r1, r3
 80050f8:	481a      	ldr	r0, [pc, #104]	; (8005164 <prvAddCurrentTaskToDelayedList+0xbc>)
 80050fa:	f7fe fb76 	bl	80037ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050fe:	e026      	b.n	800514e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005108:	4b14      	ldr	r3, [pc, #80]	; (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	429a      	cmp	r2, r3
 8005116:	d209      	bcs.n	800512c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005118:	4b13      	ldr	r3, [pc, #76]	; (8005168 <prvAddCurrentTaskToDelayedList+0xc0>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4b0f      	ldr	r3, [pc, #60]	; (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3304      	adds	r3, #4
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f7fe fb84 	bl	8003832 <vListInsert>
}
 800512a:	e010      	b.n	800514e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <prvAddCurrentTaskToDelayedList+0xc4>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3304      	adds	r3, #4
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f7fe fb7a 	bl	8003832 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	429a      	cmp	r2, r3
 8005146:	d202      	bcs.n	800514e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005148:	4a09      	ldr	r2, [pc, #36]	; (8005170 <prvAddCurrentTaskToDelayedList+0xc8>)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6013      	str	r3, [r2, #0]
}
 800514e:	bf00      	nop
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000480 	.word	0x20000480
 800515c:	2000037c 	.word	0x2000037c
 8005160:	20000484 	.word	0x20000484
 8005164:	20000468 	.word	0x20000468
 8005168:	20000438 	.word	0x20000438
 800516c:	20000434 	.word	0x20000434
 8005170:	2000049c 	.word	0x2000049c

08005174 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3b04      	subs	r3, #4
 8005184:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800518c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3b04      	subs	r3, #4
 8005192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f023 0201 	bic.w	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3b04      	subs	r3, #4
 80051a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051a4:	4a0c      	ldr	r2, [pc, #48]	; (80051d8 <pxPortInitialiseStack+0x64>)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3b14      	subs	r3, #20
 80051ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3b04      	subs	r3, #4
 80051ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f06f 0202 	mvn.w	r2, #2
 80051c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3b20      	subs	r3, #32
 80051c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051ca:	68fb      	ldr	r3, [r7, #12]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	080051dd 	.word	0x080051dd

080051dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051e6:	4b14      	ldr	r3, [pc, #80]	; (8005238 <prvTaskExitError+0x5c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d00c      	beq.n	800520a <prvTaskExitError+0x2e>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	b672      	cpsid	i
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	b662      	cpsie	i
 8005204:	60fb      	str	r3, [r7, #12]
}
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <prvTaskExitError+0x2c>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	b672      	cpsid	i
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	b662      	cpsie	i
 800521e:	60bb      	str	r3, [r7, #8]
}
 8005220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005222:	bf00      	nop
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0fc      	beq.n	8005224 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800522a:	bf00      	nop
 800522c:	bf00      	nop
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	2000000c 	.word	0x2000000c
 800523c:	00000000 	.word	0x00000000

08005240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005240:	4b07      	ldr	r3, [pc, #28]	; (8005260 <pxCurrentTCBConst2>)
 8005242:	6819      	ldr	r1, [r3, #0]
 8005244:	6808      	ldr	r0, [r1, #0]
 8005246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524a:	f380 8809 	msr	PSP, r0
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f380 8811 	msr	BASEPRI, r0
 800525a:	4770      	bx	lr
 800525c:	f3af 8000 	nop.w

08005260 <pxCurrentTCBConst2>:
 8005260:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop

08005268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005268:	4808      	ldr	r0, [pc, #32]	; (800528c <prvPortStartFirstTask+0x24>)
 800526a:	6800      	ldr	r0, [r0, #0]
 800526c:	6800      	ldr	r0, [r0, #0]
 800526e:	f380 8808 	msr	MSP, r0
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f380 8814 	msr	CONTROL, r0
 800527a:	b662      	cpsie	i
 800527c:	b661      	cpsie	f
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	df00      	svc	0
 8005288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800528a:	bf00      	nop
 800528c:	e000ed08 	.word	0xe000ed08

08005290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005296:	4b37      	ldr	r3, [pc, #220]	; (8005374 <xPortStartScheduler+0xe4>)
 8005298:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	22ff      	movs	r2, #255	; 0xff
 80052a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	4b2f      	ldr	r3, [pc, #188]	; (8005378 <xPortStartScheduler+0xe8>)
 80052bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052be:	4b2f      	ldr	r3, [pc, #188]	; (800537c <xPortStartScheduler+0xec>)
 80052c0:	2207      	movs	r2, #7
 80052c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052c4:	e009      	b.n	80052da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80052c6:	4b2d      	ldr	r3, [pc, #180]	; (800537c <xPortStartScheduler+0xec>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	4a2b      	ldr	r2, [pc, #172]	; (800537c <xPortStartScheduler+0xec>)
 80052ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052da:	78fb      	ldrb	r3, [r7, #3]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e2:	2b80      	cmp	r3, #128	; 0x80
 80052e4:	d0ef      	beq.n	80052c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052e6:	4b25      	ldr	r3, [pc, #148]	; (800537c <xPortStartScheduler+0xec>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f1c3 0307 	rsb	r3, r3, #7
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d00c      	beq.n	800530c <xPortStartScheduler+0x7c>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	b672      	cpsid	i
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	b662      	cpsie	i
 8005306:	60bb      	str	r3, [r7, #8]
}
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800530c:	4b1b      	ldr	r3, [pc, #108]	; (800537c <xPortStartScheduler+0xec>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	4a1a      	ldr	r2, [pc, #104]	; (800537c <xPortStartScheduler+0xec>)
 8005314:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005316:	4b19      	ldr	r3, [pc, #100]	; (800537c <xPortStartScheduler+0xec>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800531e:	4a17      	ldr	r2, [pc, #92]	; (800537c <xPortStartScheduler+0xec>)
 8005320:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800532a:	4b15      	ldr	r3, [pc, #84]	; (8005380 <xPortStartScheduler+0xf0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a14      	ldr	r2, [pc, #80]	; (8005380 <xPortStartScheduler+0xf0>)
 8005330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005334:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005336:	4b12      	ldr	r3, [pc, #72]	; (8005380 <xPortStartScheduler+0xf0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a11      	ldr	r2, [pc, #68]	; (8005380 <xPortStartScheduler+0xf0>)
 800533c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005340:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005342:	f000 f8dd 	bl	8005500 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005346:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <xPortStartScheduler+0xf4>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800534c:	f000 f8fc 	bl	8005548 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005350:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <xPortStartScheduler+0xf8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a0c      	ldr	r2, [pc, #48]	; (8005388 <xPortStartScheduler+0xf8>)
 8005356:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800535a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800535c:	f7ff ff84 	bl	8005268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005360:	f7ff fa80 	bl	8004864 <vTaskSwitchContext>
	prvTaskExitError();
 8005364:	f7ff ff3a 	bl	80051dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	e000e400 	.word	0xe000e400
 8005378:	200004a8 	.word	0x200004a8
 800537c:	200004ac 	.word	0x200004ac
 8005380:	e000ed20 	.word	0xe000ed20
 8005384:	2000000c 	.word	0x2000000c
 8005388:	e000ef34 	.word	0xe000ef34

0800538c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005396:	b672      	cpsid	i
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	b662      	cpsie	i
 80053a6:	607b      	str	r3, [r7, #4]
}
 80053a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053aa:	4b10      	ldr	r3, [pc, #64]	; (80053ec <vPortEnterCritical+0x60>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3301      	adds	r3, #1
 80053b0:	4a0e      	ldr	r2, [pc, #56]	; (80053ec <vPortEnterCritical+0x60>)
 80053b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053b4:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <vPortEnterCritical+0x60>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d111      	bne.n	80053e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <vPortEnterCritical+0x64>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00c      	beq.n	80053e0 <vPortEnterCritical+0x54>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	b672      	cpsid	i
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	b662      	cpsie	i
 80053da:	603b      	str	r3, [r7, #0]
}
 80053dc:	bf00      	nop
 80053de:	e7fe      	b.n	80053de <vPortEnterCritical+0x52>
	}
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	2000000c 	.word	0x2000000c
 80053f0:	e000ed04 	.word	0xe000ed04

080053f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053fa:	4b13      	ldr	r3, [pc, #76]	; (8005448 <vPortExitCritical+0x54>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10c      	bne.n	800541c <vPortExitCritical+0x28>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	b672      	cpsid	i
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	b662      	cpsie	i
 8005416:	607b      	str	r3, [r7, #4]
}
 8005418:	bf00      	nop
 800541a:	e7fe      	b.n	800541a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <vPortExitCritical+0x54>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3b01      	subs	r3, #1
 8005422:	4a09      	ldr	r2, [pc, #36]	; (8005448 <vPortExitCritical+0x54>)
 8005424:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005426:	4b08      	ldr	r3, [pc, #32]	; (8005448 <vPortExitCritical+0x54>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d105      	bne.n	800543a <vPortExitCritical+0x46>
 800542e:	2300      	movs	r3, #0
 8005430:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005438:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	2000000c 	.word	0x2000000c
 800544c:	00000000 	.word	0x00000000

08005450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005450:	f3ef 8009 	mrs	r0, PSP
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <pxCurrentTCBConst>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	f01e 0f10 	tst.w	lr, #16
 8005460:	bf08      	it	eq
 8005462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546a:	6010      	str	r0, [r2, #0]
 800546c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005474:	b672      	cpsid	i
 8005476:	f380 8811 	msr	BASEPRI, r0
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	b662      	cpsie	i
 8005484:	f7ff f9ee 	bl	8004864 <vTaskSwitchContext>
 8005488:	f04f 0000 	mov.w	r0, #0
 800548c:	f380 8811 	msr	BASEPRI, r0
 8005490:	bc09      	pop	{r0, r3}
 8005492:	6819      	ldr	r1, [r3, #0]
 8005494:	6808      	ldr	r0, [r1, #0]
 8005496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549a:	f01e 0f10 	tst.w	lr, #16
 800549e:	bf08      	it	eq
 80054a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054a4:	f380 8809 	msr	PSP, r0
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop

080054b0 <pxCurrentTCBConst>:
 80054b0:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop

080054b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	b672      	cpsid	i
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	b662      	cpsie	i
 80054d2:	607b      	str	r3, [r7, #4]
}
 80054d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054d6:	f7ff f90b 	bl	80046f0 <xTaskIncrementTick>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <xPortSysTickHandler+0x44>)
 80054e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	2300      	movs	r3, #0
 80054ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	f383 8811 	msr	BASEPRI, r3
}
 80054f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	e000ed04 	.word	0xe000ed04

08005500 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005504:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <vPortSetupTimerInterrupt+0x34>)
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800550a:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <vPortSetupTimerInterrupt+0x38>)
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005510:	4b0a      	ldr	r3, [pc, #40]	; (800553c <vPortSetupTimerInterrupt+0x3c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a0a      	ldr	r2, [pc, #40]	; (8005540 <vPortSetupTimerInterrupt+0x40>)
 8005516:	fba2 2303 	umull	r2, r3, r2, r3
 800551a:	099b      	lsrs	r3, r3, #6
 800551c:	4a09      	ldr	r2, [pc, #36]	; (8005544 <vPortSetupTimerInterrupt+0x44>)
 800551e:	3b01      	subs	r3, #1
 8005520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005522:	4b04      	ldr	r3, [pc, #16]	; (8005534 <vPortSetupTimerInterrupt+0x34>)
 8005524:	2207      	movs	r2, #7
 8005526:	601a      	str	r2, [r3, #0]
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	e000e010 	.word	0xe000e010
 8005538:	e000e018 	.word	0xe000e018
 800553c:	20000000 	.word	0x20000000
 8005540:	10624dd3 	.word	0x10624dd3
 8005544:	e000e014 	.word	0xe000e014

08005548 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005548:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005558 <vPortEnableVFP+0x10>
 800554c:	6801      	ldr	r1, [r0, #0]
 800554e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005552:	6001      	str	r1, [r0, #0]
 8005554:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005556:	bf00      	nop
 8005558:	e000ed88 	.word	0xe000ed88

0800555c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	; 0x28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005564:	2300      	movs	r3, #0
 8005566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005568:	f7ff f816 	bl	8004598 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800556c:	4b5b      	ldr	r3, [pc, #364]	; (80056dc <pvPortMalloc+0x180>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005574:	f000 f91a 	bl	80057ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005578:	4b59      	ldr	r3, [pc, #356]	; (80056e0 <pvPortMalloc+0x184>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4013      	ands	r3, r2
 8005580:	2b00      	cmp	r3, #0
 8005582:	f040 8092 	bne.w	80056aa <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01f      	beq.n	80055cc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800558c:	2208      	movs	r2, #8
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	2b00      	cmp	r3, #0
 800559c:	d016      	beq.n	80055cc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f023 0307 	bic.w	r3, r3, #7
 80055a4:	3308      	adds	r3, #8
 80055a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00c      	beq.n	80055cc <pvPortMalloc+0x70>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	b672      	cpsid	i
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	b662      	cpsie	i
 80055c6:	617b      	str	r3, [r7, #20]
}
 80055c8:	bf00      	nop
 80055ca:	e7fe      	b.n	80055ca <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d06b      	beq.n	80056aa <pvPortMalloc+0x14e>
 80055d2:	4b44      	ldr	r3, [pc, #272]	; (80056e4 <pvPortMalloc+0x188>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d866      	bhi.n	80056aa <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055dc:	4b42      	ldr	r3, [pc, #264]	; (80056e8 <pvPortMalloc+0x18c>)
 80055de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055e0:	4b41      	ldr	r3, [pc, #260]	; (80056e8 <pvPortMalloc+0x18c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055e6:	e004      	b.n	80055f2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d903      	bls.n	8005604 <pvPortMalloc+0xa8>
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1f1      	bne.n	80055e8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005604:	4b35      	ldr	r3, [pc, #212]	; (80056dc <pvPortMalloc+0x180>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560a:	429a      	cmp	r2, r3
 800560c:	d04d      	beq.n	80056aa <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2208      	movs	r2, #8
 8005614:	4413      	add	r3, r2
 8005616:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	1ad2      	subs	r2, r2, r3
 8005628:	2308      	movs	r3, #8
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	429a      	cmp	r2, r3
 800562e:	d921      	bls.n	8005674 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4413      	add	r3, r2
 8005636:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00c      	beq.n	800565c <pvPortMalloc+0x100>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	b672      	cpsid	i
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	b662      	cpsie	i
 8005656:	613b      	str	r3, [r7, #16]
}
 8005658:	bf00      	nop
 800565a:	e7fe      	b.n	800565a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	1ad2      	subs	r2, r2, r3
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800566e:	69b8      	ldr	r0, [r7, #24]
 8005670:	f000 f8fe 	bl	8005870 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005674:	4b1b      	ldr	r3, [pc, #108]	; (80056e4 <pvPortMalloc+0x188>)
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	4a19      	ldr	r2, [pc, #100]	; (80056e4 <pvPortMalloc+0x188>)
 8005680:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005682:	4b18      	ldr	r3, [pc, #96]	; (80056e4 <pvPortMalloc+0x188>)
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4b19      	ldr	r3, [pc, #100]	; (80056ec <pvPortMalloc+0x190>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d203      	bcs.n	8005696 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800568e:	4b15      	ldr	r3, [pc, #84]	; (80056e4 <pvPortMalloc+0x188>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a16      	ldr	r2, [pc, #88]	; (80056ec <pvPortMalloc+0x190>)
 8005694:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	4b11      	ldr	r3, [pc, #68]	; (80056e0 <pvPortMalloc+0x184>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	431a      	orrs	r2, r3
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056aa:	f7fe ff83 	bl	80045b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00c      	beq.n	80056d2 <pvPortMalloc+0x176>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	b672      	cpsid	i
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	b662      	cpsie	i
 80056cc:	60fb      	str	r3, [r7, #12]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <pvPortMalloc+0x174>
	return pvReturn;
 80056d2:	69fb      	ldr	r3, [r7, #28]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3728      	adds	r7, #40	; 0x28
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	2000407c 	.word	0x2000407c
 80056e0:	20004088 	.word	0x20004088
 80056e4:	20004080 	.word	0x20004080
 80056e8:	20004074 	.word	0x20004074
 80056ec:	20004084 	.word	0x20004084

080056f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d04c      	beq.n	800579c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005702:	2308      	movs	r3, #8
 8005704:	425b      	negs	r3, r3
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4413      	add	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	4b23      	ldr	r3, [pc, #140]	; (80057a4 <vPortFree+0xb4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4013      	ands	r3, r2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10c      	bne.n	8005738 <vPortFree+0x48>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	b672      	cpsid	i
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	b662      	cpsie	i
 8005732:	60fb      	str	r3, [r7, #12]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00c      	beq.n	800575a <vPortFree+0x6a>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	b672      	cpsid	i
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	b662      	cpsie	i
 8005754:	60bb      	str	r3, [r7, #8]
}
 8005756:	bf00      	nop
 8005758:	e7fe      	b.n	8005758 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <vPortFree+0xb4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4013      	ands	r3, r2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d019      	beq.n	800579c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d115      	bne.n	800579c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <vPortFree+0xb4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	43db      	mvns	r3, r3
 800577a:	401a      	ands	r2, r3
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005780:	f7fe ff0a 	bl	8004598 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <vPortFree+0xb8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4413      	add	r3, r2
 800578e:	4a06      	ldr	r2, [pc, #24]	; (80057a8 <vPortFree+0xb8>)
 8005790:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005792:	6938      	ldr	r0, [r7, #16]
 8005794:	f000 f86c 	bl	8005870 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005798:	f7fe ff0c 	bl	80045b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800579c:	bf00      	nop
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20004088 	.word	0x20004088
 80057a8:	20004080 	.word	0x20004080

080057ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057b2:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 80057b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057b8:	4b27      	ldr	r3, [pc, #156]	; (8005858 <prvHeapInit+0xac>)
 80057ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00c      	beq.n	80057e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3307      	adds	r3, #7
 80057ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0307 	bic.w	r3, r3, #7
 80057d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	4a1f      	ldr	r2, [pc, #124]	; (8005858 <prvHeapInit+0xac>)
 80057dc:	4413      	add	r3, r2
 80057de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057e4:	4a1d      	ldr	r2, [pc, #116]	; (800585c <prvHeapInit+0xb0>)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057ea:	4b1c      	ldr	r3, [pc, #112]	; (800585c <prvHeapInit+0xb0>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	4413      	add	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057f8:	2208      	movs	r2, #8
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	1a9b      	subs	r3, r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0307 	bic.w	r3, r3, #7
 8005806:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a15      	ldr	r2, [pc, #84]	; (8005860 <prvHeapInit+0xb4>)
 800580c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800580e:	4b14      	ldr	r3, [pc, #80]	; (8005860 <prvHeapInit+0xb4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005816:	4b12      	ldr	r3, [pc, #72]	; (8005860 <prvHeapInit+0xb4>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	1ad2      	subs	r2, r2, r3
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800582c:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <prvHeapInit+0xb4>)
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	4a0a      	ldr	r2, [pc, #40]	; (8005864 <prvHeapInit+0xb8>)
 800583a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	4a09      	ldr	r2, [pc, #36]	; (8005868 <prvHeapInit+0xbc>)
 8005842:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <prvHeapInit+0xc0>)
 8005846:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800584a:	601a      	str	r2, [r3, #0]
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	200004b0 	.word	0x200004b0
 800585c:	20004074 	.word	0x20004074
 8005860:	2000407c 	.word	0x2000407c
 8005864:	20004084 	.word	0x20004084
 8005868:	20004080 	.word	0x20004080
 800586c:	20004088 	.word	0x20004088

08005870 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005878:	4b28      	ldr	r3, [pc, #160]	; (800591c <prvInsertBlockIntoFreeList+0xac>)
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	e002      	b.n	8005884 <prvInsertBlockIntoFreeList+0x14>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	429a      	cmp	r2, r3
 800588c:	d8f7      	bhi.n	800587e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	4413      	add	r3, r2
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	429a      	cmp	r2, r3
 800589e:	d108      	bne.n	80058b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	441a      	add	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	441a      	add	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d118      	bne.n	80058f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b15      	ldr	r3, [pc, #84]	; (8005920 <prvInsertBlockIntoFreeList+0xb0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d00d      	beq.n	80058ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	441a      	add	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	e008      	b.n	8005900 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058ee:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <prvInsertBlockIntoFreeList+0xb0>)
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	e003      	b.n	8005900 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	429a      	cmp	r2, r3
 8005906:	d002      	beq.n	800590e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20004074 	.word	0x20004074
 8005920:	2000407c 	.word	0x2000407c

08005924 <__errno>:
 8005924:	4b01      	ldr	r3, [pc, #4]	; (800592c <__errno+0x8>)
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000010 	.word	0x20000010

08005930 <__libc_init_array>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	4d0d      	ldr	r5, [pc, #52]	; (8005968 <__libc_init_array+0x38>)
 8005934:	4c0d      	ldr	r4, [pc, #52]	; (800596c <__libc_init_array+0x3c>)
 8005936:	1b64      	subs	r4, r4, r5
 8005938:	10a4      	asrs	r4, r4, #2
 800593a:	2600      	movs	r6, #0
 800593c:	42a6      	cmp	r6, r4
 800593e:	d109      	bne.n	8005954 <__libc_init_array+0x24>
 8005940:	4d0b      	ldr	r5, [pc, #44]	; (8005970 <__libc_init_array+0x40>)
 8005942:	4c0c      	ldr	r4, [pc, #48]	; (8005974 <__libc_init_array+0x44>)
 8005944:	f001 f832 	bl	80069ac <_init>
 8005948:	1b64      	subs	r4, r4, r5
 800594a:	10a4      	asrs	r4, r4, #2
 800594c:	2600      	movs	r6, #0
 800594e:	42a6      	cmp	r6, r4
 8005950:	d105      	bne.n	800595e <__libc_init_array+0x2e>
 8005952:	bd70      	pop	{r4, r5, r6, pc}
 8005954:	f855 3b04 	ldr.w	r3, [r5], #4
 8005958:	4798      	blx	r3
 800595a:	3601      	adds	r6, #1
 800595c:	e7ee      	b.n	800593c <__libc_init_array+0xc>
 800595e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005962:	4798      	blx	r3
 8005964:	3601      	adds	r6, #1
 8005966:	e7f2      	b.n	800594e <__libc_init_array+0x1e>
 8005968:	08006b34 	.word	0x08006b34
 800596c:	08006b34 	.word	0x08006b34
 8005970:	08006b34 	.word	0x08006b34
 8005974:	08006b38 	.word	0x08006b38

08005978 <memcpy>:
 8005978:	440a      	add	r2, r1
 800597a:	4291      	cmp	r1, r2
 800597c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005980:	d100      	bne.n	8005984 <memcpy+0xc>
 8005982:	4770      	bx	lr
 8005984:	b510      	push	{r4, lr}
 8005986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800598a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800598e:	4291      	cmp	r1, r2
 8005990:	d1f9      	bne.n	8005986 <memcpy+0xe>
 8005992:	bd10      	pop	{r4, pc}

08005994 <memset>:
 8005994:	4402      	add	r2, r0
 8005996:	4603      	mov	r3, r0
 8005998:	4293      	cmp	r3, r2
 800599a:	d100      	bne.n	800599e <memset+0xa>
 800599c:	4770      	bx	lr
 800599e:	f803 1b01 	strb.w	r1, [r3], #1
 80059a2:	e7f9      	b.n	8005998 <memset+0x4>

080059a4 <iprintf>:
 80059a4:	b40f      	push	{r0, r1, r2, r3}
 80059a6:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <iprintf+0x2c>)
 80059a8:	b513      	push	{r0, r1, r4, lr}
 80059aa:	681c      	ldr	r4, [r3, #0]
 80059ac:	b124      	cbz	r4, 80059b8 <iprintf+0x14>
 80059ae:	69a3      	ldr	r3, [r4, #24]
 80059b0:	b913      	cbnz	r3, 80059b8 <iprintf+0x14>
 80059b2:	4620      	mov	r0, r4
 80059b4:	f000 fa5e 	bl	8005e74 <__sinit>
 80059b8:	ab05      	add	r3, sp, #20
 80059ba:	9a04      	ldr	r2, [sp, #16]
 80059bc:	68a1      	ldr	r1, [r4, #8]
 80059be:	9301      	str	r3, [sp, #4]
 80059c0:	4620      	mov	r0, r4
 80059c2:	f000 fc67 	bl	8006294 <_vfiprintf_r>
 80059c6:	b002      	add	sp, #8
 80059c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059cc:	b004      	add	sp, #16
 80059ce:	4770      	bx	lr
 80059d0:	20000010 	.word	0x20000010

080059d4 <_puts_r>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	460e      	mov	r6, r1
 80059d8:	4605      	mov	r5, r0
 80059da:	b118      	cbz	r0, 80059e4 <_puts_r+0x10>
 80059dc:	6983      	ldr	r3, [r0, #24]
 80059de:	b90b      	cbnz	r3, 80059e4 <_puts_r+0x10>
 80059e0:	f000 fa48 	bl	8005e74 <__sinit>
 80059e4:	69ab      	ldr	r3, [r5, #24]
 80059e6:	68ac      	ldr	r4, [r5, #8]
 80059e8:	b913      	cbnz	r3, 80059f0 <_puts_r+0x1c>
 80059ea:	4628      	mov	r0, r5
 80059ec:	f000 fa42 	bl	8005e74 <__sinit>
 80059f0:	4b2c      	ldr	r3, [pc, #176]	; (8005aa4 <_puts_r+0xd0>)
 80059f2:	429c      	cmp	r4, r3
 80059f4:	d120      	bne.n	8005a38 <_puts_r+0x64>
 80059f6:	686c      	ldr	r4, [r5, #4]
 80059f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059fa:	07db      	lsls	r3, r3, #31
 80059fc:	d405      	bmi.n	8005a0a <_puts_r+0x36>
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	0598      	lsls	r0, r3, #22
 8005a02:	d402      	bmi.n	8005a0a <_puts_r+0x36>
 8005a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a06:	f000 fad3 	bl	8005fb0 <__retarget_lock_acquire_recursive>
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	0719      	lsls	r1, r3, #28
 8005a0e:	d51d      	bpl.n	8005a4c <_puts_r+0x78>
 8005a10:	6923      	ldr	r3, [r4, #16]
 8005a12:	b1db      	cbz	r3, 8005a4c <_puts_r+0x78>
 8005a14:	3e01      	subs	r6, #1
 8005a16:	68a3      	ldr	r3, [r4, #8]
 8005a18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	60a3      	str	r3, [r4, #8]
 8005a20:	bb39      	cbnz	r1, 8005a72 <_puts_r+0x9e>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	da38      	bge.n	8005a98 <_puts_r+0xc4>
 8005a26:	4622      	mov	r2, r4
 8005a28:	210a      	movs	r1, #10
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 f848 	bl	8005ac0 <__swbuf_r>
 8005a30:	3001      	adds	r0, #1
 8005a32:	d011      	beq.n	8005a58 <_puts_r+0x84>
 8005a34:	250a      	movs	r5, #10
 8005a36:	e011      	b.n	8005a5c <_puts_r+0x88>
 8005a38:	4b1b      	ldr	r3, [pc, #108]	; (8005aa8 <_puts_r+0xd4>)
 8005a3a:	429c      	cmp	r4, r3
 8005a3c:	d101      	bne.n	8005a42 <_puts_r+0x6e>
 8005a3e:	68ac      	ldr	r4, [r5, #8]
 8005a40:	e7da      	b.n	80059f8 <_puts_r+0x24>
 8005a42:	4b1a      	ldr	r3, [pc, #104]	; (8005aac <_puts_r+0xd8>)
 8005a44:	429c      	cmp	r4, r3
 8005a46:	bf08      	it	eq
 8005a48:	68ec      	ldreq	r4, [r5, #12]
 8005a4a:	e7d5      	b.n	80059f8 <_puts_r+0x24>
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 f888 	bl	8005b64 <__swsetup_r>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d0dd      	beq.n	8005a14 <_puts_r+0x40>
 8005a58:	f04f 35ff 	mov.w	r5, #4294967295
 8005a5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a5e:	07da      	lsls	r2, r3, #31
 8005a60:	d405      	bmi.n	8005a6e <_puts_r+0x9a>
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	059b      	lsls	r3, r3, #22
 8005a66:	d402      	bmi.n	8005a6e <_puts_r+0x9a>
 8005a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a6a:	f000 faa2 	bl	8005fb2 <__retarget_lock_release_recursive>
 8005a6e:	4628      	mov	r0, r5
 8005a70:	bd70      	pop	{r4, r5, r6, pc}
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	da04      	bge.n	8005a80 <_puts_r+0xac>
 8005a76:	69a2      	ldr	r2, [r4, #24]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	dc06      	bgt.n	8005a8a <_puts_r+0xb6>
 8005a7c:	290a      	cmp	r1, #10
 8005a7e:	d004      	beq.n	8005a8a <_puts_r+0xb6>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	6022      	str	r2, [r4, #0]
 8005a86:	7019      	strb	r1, [r3, #0]
 8005a88:	e7c5      	b.n	8005a16 <_puts_r+0x42>
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f000 f817 	bl	8005ac0 <__swbuf_r>
 8005a92:	3001      	adds	r0, #1
 8005a94:	d1bf      	bne.n	8005a16 <_puts_r+0x42>
 8005a96:	e7df      	b.n	8005a58 <_puts_r+0x84>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	250a      	movs	r5, #10
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	6022      	str	r2, [r4, #0]
 8005aa0:	701d      	strb	r5, [r3, #0]
 8005aa2:	e7db      	b.n	8005a5c <_puts_r+0x88>
 8005aa4:	08006ab8 	.word	0x08006ab8
 8005aa8:	08006ad8 	.word	0x08006ad8
 8005aac:	08006a98 	.word	0x08006a98

08005ab0 <puts>:
 8005ab0:	4b02      	ldr	r3, [pc, #8]	; (8005abc <puts+0xc>)
 8005ab2:	4601      	mov	r1, r0
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	f7ff bf8d 	b.w	80059d4 <_puts_r>
 8005aba:	bf00      	nop
 8005abc:	20000010 	.word	0x20000010

08005ac0 <__swbuf_r>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	460e      	mov	r6, r1
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	b118      	cbz	r0, 8005ad2 <__swbuf_r+0x12>
 8005aca:	6983      	ldr	r3, [r0, #24]
 8005acc:	b90b      	cbnz	r3, 8005ad2 <__swbuf_r+0x12>
 8005ace:	f000 f9d1 	bl	8005e74 <__sinit>
 8005ad2:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <__swbuf_r+0x98>)
 8005ad4:	429c      	cmp	r4, r3
 8005ad6:	d12b      	bne.n	8005b30 <__swbuf_r+0x70>
 8005ad8:	686c      	ldr	r4, [r5, #4]
 8005ada:	69a3      	ldr	r3, [r4, #24]
 8005adc:	60a3      	str	r3, [r4, #8]
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	071a      	lsls	r2, r3, #28
 8005ae2:	d52f      	bpl.n	8005b44 <__swbuf_r+0x84>
 8005ae4:	6923      	ldr	r3, [r4, #16]
 8005ae6:	b36b      	cbz	r3, 8005b44 <__swbuf_r+0x84>
 8005ae8:	6923      	ldr	r3, [r4, #16]
 8005aea:	6820      	ldr	r0, [r4, #0]
 8005aec:	1ac0      	subs	r0, r0, r3
 8005aee:	6963      	ldr	r3, [r4, #20]
 8005af0:	b2f6      	uxtb	r6, r6
 8005af2:	4283      	cmp	r3, r0
 8005af4:	4637      	mov	r7, r6
 8005af6:	dc04      	bgt.n	8005b02 <__swbuf_r+0x42>
 8005af8:	4621      	mov	r1, r4
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 f926 	bl	8005d4c <_fflush_r>
 8005b00:	bb30      	cbnz	r0, 8005b50 <__swbuf_r+0x90>
 8005b02:	68a3      	ldr	r3, [r4, #8]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	60a3      	str	r3, [r4, #8]
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	6022      	str	r2, [r4, #0]
 8005b0e:	701e      	strb	r6, [r3, #0]
 8005b10:	6963      	ldr	r3, [r4, #20]
 8005b12:	3001      	adds	r0, #1
 8005b14:	4283      	cmp	r3, r0
 8005b16:	d004      	beq.n	8005b22 <__swbuf_r+0x62>
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	07db      	lsls	r3, r3, #31
 8005b1c:	d506      	bpl.n	8005b2c <__swbuf_r+0x6c>
 8005b1e:	2e0a      	cmp	r6, #10
 8005b20:	d104      	bne.n	8005b2c <__swbuf_r+0x6c>
 8005b22:	4621      	mov	r1, r4
 8005b24:	4628      	mov	r0, r5
 8005b26:	f000 f911 	bl	8005d4c <_fflush_r>
 8005b2a:	b988      	cbnz	r0, 8005b50 <__swbuf_r+0x90>
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b30:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <__swbuf_r+0x9c>)
 8005b32:	429c      	cmp	r4, r3
 8005b34:	d101      	bne.n	8005b3a <__swbuf_r+0x7a>
 8005b36:	68ac      	ldr	r4, [r5, #8]
 8005b38:	e7cf      	b.n	8005ada <__swbuf_r+0x1a>
 8005b3a:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <__swbuf_r+0xa0>)
 8005b3c:	429c      	cmp	r4, r3
 8005b3e:	bf08      	it	eq
 8005b40:	68ec      	ldreq	r4, [r5, #12]
 8005b42:	e7ca      	b.n	8005ada <__swbuf_r+0x1a>
 8005b44:	4621      	mov	r1, r4
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 f80c 	bl	8005b64 <__swsetup_r>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d0cb      	beq.n	8005ae8 <__swbuf_r+0x28>
 8005b50:	f04f 37ff 	mov.w	r7, #4294967295
 8005b54:	e7ea      	b.n	8005b2c <__swbuf_r+0x6c>
 8005b56:	bf00      	nop
 8005b58:	08006ab8 	.word	0x08006ab8
 8005b5c:	08006ad8 	.word	0x08006ad8
 8005b60:	08006a98 	.word	0x08006a98

08005b64 <__swsetup_r>:
 8005b64:	4b32      	ldr	r3, [pc, #200]	; (8005c30 <__swsetup_r+0xcc>)
 8005b66:	b570      	push	{r4, r5, r6, lr}
 8005b68:	681d      	ldr	r5, [r3, #0]
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	b125      	cbz	r5, 8005b7a <__swsetup_r+0x16>
 8005b70:	69ab      	ldr	r3, [r5, #24]
 8005b72:	b913      	cbnz	r3, 8005b7a <__swsetup_r+0x16>
 8005b74:	4628      	mov	r0, r5
 8005b76:	f000 f97d 	bl	8005e74 <__sinit>
 8005b7a:	4b2e      	ldr	r3, [pc, #184]	; (8005c34 <__swsetup_r+0xd0>)
 8005b7c:	429c      	cmp	r4, r3
 8005b7e:	d10f      	bne.n	8005ba0 <__swsetup_r+0x3c>
 8005b80:	686c      	ldr	r4, [r5, #4]
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b88:	0719      	lsls	r1, r3, #28
 8005b8a:	d42c      	bmi.n	8005be6 <__swsetup_r+0x82>
 8005b8c:	06dd      	lsls	r5, r3, #27
 8005b8e:	d411      	bmi.n	8005bb4 <__swsetup_r+0x50>
 8005b90:	2309      	movs	r3, #9
 8005b92:	6033      	str	r3, [r6, #0]
 8005b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b98:	81a3      	strh	r3, [r4, #12]
 8005b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9e:	e03e      	b.n	8005c1e <__swsetup_r+0xba>
 8005ba0:	4b25      	ldr	r3, [pc, #148]	; (8005c38 <__swsetup_r+0xd4>)
 8005ba2:	429c      	cmp	r4, r3
 8005ba4:	d101      	bne.n	8005baa <__swsetup_r+0x46>
 8005ba6:	68ac      	ldr	r4, [r5, #8]
 8005ba8:	e7eb      	b.n	8005b82 <__swsetup_r+0x1e>
 8005baa:	4b24      	ldr	r3, [pc, #144]	; (8005c3c <__swsetup_r+0xd8>)
 8005bac:	429c      	cmp	r4, r3
 8005bae:	bf08      	it	eq
 8005bb0:	68ec      	ldreq	r4, [r5, #12]
 8005bb2:	e7e6      	b.n	8005b82 <__swsetup_r+0x1e>
 8005bb4:	0758      	lsls	r0, r3, #29
 8005bb6:	d512      	bpl.n	8005bde <__swsetup_r+0x7a>
 8005bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bba:	b141      	cbz	r1, 8005bce <__swsetup_r+0x6a>
 8005bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bc0:	4299      	cmp	r1, r3
 8005bc2:	d002      	beq.n	8005bca <__swsetup_r+0x66>
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f000 fa5b 	bl	8006080 <_free_r>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bd4:	81a3      	strh	r3, [r4, #12]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	6063      	str	r3, [r4, #4]
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	f043 0308 	orr.w	r3, r3, #8
 8005be4:	81a3      	strh	r3, [r4, #12]
 8005be6:	6923      	ldr	r3, [r4, #16]
 8005be8:	b94b      	cbnz	r3, 8005bfe <__swsetup_r+0x9a>
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf4:	d003      	beq.n	8005bfe <__swsetup_r+0x9a>
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f000 fa01 	bl	8006000 <__smakebuf_r>
 8005bfe:	89a0      	ldrh	r0, [r4, #12]
 8005c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c04:	f010 0301 	ands.w	r3, r0, #1
 8005c08:	d00a      	beq.n	8005c20 <__swsetup_r+0xbc>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60a3      	str	r3, [r4, #8]
 8005c0e:	6963      	ldr	r3, [r4, #20]
 8005c10:	425b      	negs	r3, r3
 8005c12:	61a3      	str	r3, [r4, #24]
 8005c14:	6923      	ldr	r3, [r4, #16]
 8005c16:	b943      	cbnz	r3, 8005c2a <__swsetup_r+0xc6>
 8005c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c1c:	d1ba      	bne.n	8005b94 <__swsetup_r+0x30>
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	0781      	lsls	r1, r0, #30
 8005c22:	bf58      	it	pl
 8005c24:	6963      	ldrpl	r3, [r4, #20]
 8005c26:	60a3      	str	r3, [r4, #8]
 8005c28:	e7f4      	b.n	8005c14 <__swsetup_r+0xb0>
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	e7f7      	b.n	8005c1e <__swsetup_r+0xba>
 8005c2e:	bf00      	nop
 8005c30:	20000010 	.word	0x20000010
 8005c34:	08006ab8 	.word	0x08006ab8
 8005c38:	08006ad8 	.word	0x08006ad8
 8005c3c:	08006a98 	.word	0x08006a98

08005c40 <__sflush_r>:
 8005c40:	898a      	ldrh	r2, [r1, #12]
 8005c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c46:	4605      	mov	r5, r0
 8005c48:	0710      	lsls	r0, r2, #28
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	d458      	bmi.n	8005d00 <__sflush_r+0xc0>
 8005c4e:	684b      	ldr	r3, [r1, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	dc05      	bgt.n	8005c60 <__sflush_r+0x20>
 8005c54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	dc02      	bgt.n	8005c60 <__sflush_r+0x20>
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c62:	2e00      	cmp	r6, #0
 8005c64:	d0f9      	beq.n	8005c5a <__sflush_r+0x1a>
 8005c66:	2300      	movs	r3, #0
 8005c68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c6c:	682f      	ldr	r7, [r5, #0]
 8005c6e:	602b      	str	r3, [r5, #0]
 8005c70:	d032      	beq.n	8005cd8 <__sflush_r+0x98>
 8005c72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	075a      	lsls	r2, r3, #29
 8005c78:	d505      	bpl.n	8005c86 <__sflush_r+0x46>
 8005c7a:	6863      	ldr	r3, [r4, #4]
 8005c7c:	1ac0      	subs	r0, r0, r3
 8005c7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c80:	b10b      	cbz	r3, 8005c86 <__sflush_r+0x46>
 8005c82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c84:	1ac0      	subs	r0, r0, r3
 8005c86:	2300      	movs	r3, #0
 8005c88:	4602      	mov	r2, r0
 8005c8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c8c:	6a21      	ldr	r1, [r4, #32]
 8005c8e:	4628      	mov	r0, r5
 8005c90:	47b0      	blx	r6
 8005c92:	1c43      	adds	r3, r0, #1
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	d106      	bne.n	8005ca6 <__sflush_r+0x66>
 8005c98:	6829      	ldr	r1, [r5, #0]
 8005c9a:	291d      	cmp	r1, #29
 8005c9c:	d82c      	bhi.n	8005cf8 <__sflush_r+0xb8>
 8005c9e:	4a2a      	ldr	r2, [pc, #168]	; (8005d48 <__sflush_r+0x108>)
 8005ca0:	40ca      	lsrs	r2, r1
 8005ca2:	07d6      	lsls	r6, r2, #31
 8005ca4:	d528      	bpl.n	8005cf8 <__sflush_r+0xb8>
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	6062      	str	r2, [r4, #4]
 8005caa:	04d9      	lsls	r1, r3, #19
 8005cac:	6922      	ldr	r2, [r4, #16]
 8005cae:	6022      	str	r2, [r4, #0]
 8005cb0:	d504      	bpl.n	8005cbc <__sflush_r+0x7c>
 8005cb2:	1c42      	adds	r2, r0, #1
 8005cb4:	d101      	bne.n	8005cba <__sflush_r+0x7a>
 8005cb6:	682b      	ldr	r3, [r5, #0]
 8005cb8:	b903      	cbnz	r3, 8005cbc <__sflush_r+0x7c>
 8005cba:	6560      	str	r0, [r4, #84]	; 0x54
 8005cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cbe:	602f      	str	r7, [r5, #0]
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	d0ca      	beq.n	8005c5a <__sflush_r+0x1a>
 8005cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cc8:	4299      	cmp	r1, r3
 8005cca:	d002      	beq.n	8005cd2 <__sflush_r+0x92>
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f000 f9d7 	bl	8006080 <_free_r>
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	6360      	str	r0, [r4, #52]	; 0x34
 8005cd6:	e7c1      	b.n	8005c5c <__sflush_r+0x1c>
 8005cd8:	6a21      	ldr	r1, [r4, #32]
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b0      	blx	r6
 8005ce0:	1c41      	adds	r1, r0, #1
 8005ce2:	d1c7      	bne.n	8005c74 <__sflush_r+0x34>
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0c4      	beq.n	8005c74 <__sflush_r+0x34>
 8005cea:	2b1d      	cmp	r3, #29
 8005cec:	d001      	beq.n	8005cf2 <__sflush_r+0xb2>
 8005cee:	2b16      	cmp	r3, #22
 8005cf0:	d101      	bne.n	8005cf6 <__sflush_r+0xb6>
 8005cf2:	602f      	str	r7, [r5, #0]
 8005cf4:	e7b1      	b.n	8005c5a <__sflush_r+0x1a>
 8005cf6:	89a3      	ldrh	r3, [r4, #12]
 8005cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	e7ad      	b.n	8005c5c <__sflush_r+0x1c>
 8005d00:	690f      	ldr	r7, [r1, #16]
 8005d02:	2f00      	cmp	r7, #0
 8005d04:	d0a9      	beq.n	8005c5a <__sflush_r+0x1a>
 8005d06:	0793      	lsls	r3, r2, #30
 8005d08:	680e      	ldr	r6, [r1, #0]
 8005d0a:	bf08      	it	eq
 8005d0c:	694b      	ldreq	r3, [r1, #20]
 8005d0e:	600f      	str	r7, [r1, #0]
 8005d10:	bf18      	it	ne
 8005d12:	2300      	movne	r3, #0
 8005d14:	eba6 0807 	sub.w	r8, r6, r7
 8005d18:	608b      	str	r3, [r1, #8]
 8005d1a:	f1b8 0f00 	cmp.w	r8, #0
 8005d1e:	dd9c      	ble.n	8005c5a <__sflush_r+0x1a>
 8005d20:	6a21      	ldr	r1, [r4, #32]
 8005d22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d24:	4643      	mov	r3, r8
 8005d26:	463a      	mov	r2, r7
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b0      	blx	r6
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	dc06      	bgt.n	8005d3e <__sflush_r+0xfe>
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d36:	81a3      	strh	r3, [r4, #12]
 8005d38:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3c:	e78e      	b.n	8005c5c <__sflush_r+0x1c>
 8005d3e:	4407      	add	r7, r0
 8005d40:	eba8 0800 	sub.w	r8, r8, r0
 8005d44:	e7e9      	b.n	8005d1a <__sflush_r+0xda>
 8005d46:	bf00      	nop
 8005d48:	20400001 	.word	0x20400001

08005d4c <_fflush_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	690b      	ldr	r3, [r1, #16]
 8005d50:	4605      	mov	r5, r0
 8005d52:	460c      	mov	r4, r1
 8005d54:	b913      	cbnz	r3, 8005d5c <_fflush_r+0x10>
 8005d56:	2500      	movs	r5, #0
 8005d58:	4628      	mov	r0, r5
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	b118      	cbz	r0, 8005d66 <_fflush_r+0x1a>
 8005d5e:	6983      	ldr	r3, [r0, #24]
 8005d60:	b90b      	cbnz	r3, 8005d66 <_fflush_r+0x1a>
 8005d62:	f000 f887 	bl	8005e74 <__sinit>
 8005d66:	4b14      	ldr	r3, [pc, #80]	; (8005db8 <_fflush_r+0x6c>)
 8005d68:	429c      	cmp	r4, r3
 8005d6a:	d11b      	bne.n	8005da4 <_fflush_r+0x58>
 8005d6c:	686c      	ldr	r4, [r5, #4]
 8005d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0ef      	beq.n	8005d56 <_fflush_r+0xa>
 8005d76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d78:	07d0      	lsls	r0, r2, #31
 8005d7a:	d404      	bmi.n	8005d86 <_fflush_r+0x3a>
 8005d7c:	0599      	lsls	r1, r3, #22
 8005d7e:	d402      	bmi.n	8005d86 <_fflush_r+0x3a>
 8005d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d82:	f000 f915 	bl	8005fb0 <__retarget_lock_acquire_recursive>
 8005d86:	4628      	mov	r0, r5
 8005d88:	4621      	mov	r1, r4
 8005d8a:	f7ff ff59 	bl	8005c40 <__sflush_r>
 8005d8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d90:	07da      	lsls	r2, r3, #31
 8005d92:	4605      	mov	r5, r0
 8005d94:	d4e0      	bmi.n	8005d58 <_fflush_r+0xc>
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	059b      	lsls	r3, r3, #22
 8005d9a:	d4dd      	bmi.n	8005d58 <_fflush_r+0xc>
 8005d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d9e:	f000 f908 	bl	8005fb2 <__retarget_lock_release_recursive>
 8005da2:	e7d9      	b.n	8005d58 <_fflush_r+0xc>
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <_fflush_r+0x70>)
 8005da6:	429c      	cmp	r4, r3
 8005da8:	d101      	bne.n	8005dae <_fflush_r+0x62>
 8005daa:	68ac      	ldr	r4, [r5, #8]
 8005dac:	e7df      	b.n	8005d6e <_fflush_r+0x22>
 8005dae:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <_fflush_r+0x74>)
 8005db0:	429c      	cmp	r4, r3
 8005db2:	bf08      	it	eq
 8005db4:	68ec      	ldreq	r4, [r5, #12]
 8005db6:	e7da      	b.n	8005d6e <_fflush_r+0x22>
 8005db8:	08006ab8 	.word	0x08006ab8
 8005dbc:	08006ad8 	.word	0x08006ad8
 8005dc0:	08006a98 	.word	0x08006a98

08005dc4 <std>:
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	b510      	push	{r4, lr}
 8005dc8:	4604      	mov	r4, r0
 8005dca:	e9c0 3300 	strd	r3, r3, [r0]
 8005dce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dd2:	6083      	str	r3, [r0, #8]
 8005dd4:	8181      	strh	r1, [r0, #12]
 8005dd6:	6643      	str	r3, [r0, #100]	; 0x64
 8005dd8:	81c2      	strh	r2, [r0, #14]
 8005dda:	6183      	str	r3, [r0, #24]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	2208      	movs	r2, #8
 8005de0:	305c      	adds	r0, #92	; 0x5c
 8005de2:	f7ff fdd7 	bl	8005994 <memset>
 8005de6:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <std+0x38>)
 8005de8:	6263      	str	r3, [r4, #36]	; 0x24
 8005dea:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <std+0x3c>)
 8005dec:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dee:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <std+0x40>)
 8005df0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005df2:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <std+0x44>)
 8005df4:	6224      	str	r4, [r4, #32]
 8005df6:	6323      	str	r3, [r4, #48]	; 0x30
 8005df8:	bd10      	pop	{r4, pc}
 8005dfa:	bf00      	nop
 8005dfc:	0800683d 	.word	0x0800683d
 8005e00:	0800685f 	.word	0x0800685f
 8005e04:	08006897 	.word	0x08006897
 8005e08:	080068bb 	.word	0x080068bb

08005e0c <_cleanup_r>:
 8005e0c:	4901      	ldr	r1, [pc, #4]	; (8005e14 <_cleanup_r+0x8>)
 8005e0e:	f000 b8af 	b.w	8005f70 <_fwalk_reent>
 8005e12:	bf00      	nop
 8005e14:	08005d4d 	.word	0x08005d4d

08005e18 <__sfmoreglue>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	2268      	movs	r2, #104	; 0x68
 8005e1c:	1e4d      	subs	r5, r1, #1
 8005e1e:	4355      	muls	r5, r2
 8005e20:	460e      	mov	r6, r1
 8005e22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e26:	f000 f997 	bl	8006158 <_malloc_r>
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	b140      	cbz	r0, 8005e40 <__sfmoreglue+0x28>
 8005e2e:	2100      	movs	r1, #0
 8005e30:	e9c0 1600 	strd	r1, r6, [r0]
 8005e34:	300c      	adds	r0, #12
 8005e36:	60a0      	str	r0, [r4, #8]
 8005e38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e3c:	f7ff fdaa 	bl	8005994 <memset>
 8005e40:	4620      	mov	r0, r4
 8005e42:	bd70      	pop	{r4, r5, r6, pc}

08005e44 <__sfp_lock_acquire>:
 8005e44:	4801      	ldr	r0, [pc, #4]	; (8005e4c <__sfp_lock_acquire+0x8>)
 8005e46:	f000 b8b3 	b.w	8005fb0 <__retarget_lock_acquire_recursive>
 8005e4a:	bf00      	nop
 8005e4c:	2000408d 	.word	0x2000408d

08005e50 <__sfp_lock_release>:
 8005e50:	4801      	ldr	r0, [pc, #4]	; (8005e58 <__sfp_lock_release+0x8>)
 8005e52:	f000 b8ae 	b.w	8005fb2 <__retarget_lock_release_recursive>
 8005e56:	bf00      	nop
 8005e58:	2000408d 	.word	0x2000408d

08005e5c <__sinit_lock_acquire>:
 8005e5c:	4801      	ldr	r0, [pc, #4]	; (8005e64 <__sinit_lock_acquire+0x8>)
 8005e5e:	f000 b8a7 	b.w	8005fb0 <__retarget_lock_acquire_recursive>
 8005e62:	bf00      	nop
 8005e64:	2000408e 	.word	0x2000408e

08005e68 <__sinit_lock_release>:
 8005e68:	4801      	ldr	r0, [pc, #4]	; (8005e70 <__sinit_lock_release+0x8>)
 8005e6a:	f000 b8a2 	b.w	8005fb2 <__retarget_lock_release_recursive>
 8005e6e:	bf00      	nop
 8005e70:	2000408e 	.word	0x2000408e

08005e74 <__sinit>:
 8005e74:	b510      	push	{r4, lr}
 8005e76:	4604      	mov	r4, r0
 8005e78:	f7ff fff0 	bl	8005e5c <__sinit_lock_acquire>
 8005e7c:	69a3      	ldr	r3, [r4, #24]
 8005e7e:	b11b      	cbz	r3, 8005e88 <__sinit+0x14>
 8005e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e84:	f7ff bff0 	b.w	8005e68 <__sinit_lock_release>
 8005e88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e8c:	6523      	str	r3, [r4, #80]	; 0x50
 8005e8e:	4b13      	ldr	r3, [pc, #76]	; (8005edc <__sinit+0x68>)
 8005e90:	4a13      	ldr	r2, [pc, #76]	; (8005ee0 <__sinit+0x6c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e96:	42a3      	cmp	r3, r4
 8005e98:	bf04      	itt	eq
 8005e9a:	2301      	moveq	r3, #1
 8005e9c:	61a3      	streq	r3, [r4, #24]
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 f820 	bl	8005ee4 <__sfp>
 8005ea4:	6060      	str	r0, [r4, #4]
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f000 f81c 	bl	8005ee4 <__sfp>
 8005eac:	60a0      	str	r0, [r4, #8]
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f000 f818 	bl	8005ee4 <__sfp>
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	60e0      	str	r0, [r4, #12]
 8005eb8:	2104      	movs	r1, #4
 8005eba:	6860      	ldr	r0, [r4, #4]
 8005ebc:	f7ff ff82 	bl	8005dc4 <std>
 8005ec0:	68a0      	ldr	r0, [r4, #8]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	2109      	movs	r1, #9
 8005ec6:	f7ff ff7d 	bl	8005dc4 <std>
 8005eca:	68e0      	ldr	r0, [r4, #12]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	2112      	movs	r1, #18
 8005ed0:	f7ff ff78 	bl	8005dc4 <std>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	61a3      	str	r3, [r4, #24]
 8005ed8:	e7d2      	b.n	8005e80 <__sinit+0xc>
 8005eda:	bf00      	nop
 8005edc:	08006a94 	.word	0x08006a94
 8005ee0:	08005e0d 	.word	0x08005e0d

08005ee4 <__sfp>:
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee6:	4607      	mov	r7, r0
 8005ee8:	f7ff ffac 	bl	8005e44 <__sfp_lock_acquire>
 8005eec:	4b1e      	ldr	r3, [pc, #120]	; (8005f68 <__sfp+0x84>)
 8005eee:	681e      	ldr	r6, [r3, #0]
 8005ef0:	69b3      	ldr	r3, [r6, #24]
 8005ef2:	b913      	cbnz	r3, 8005efa <__sfp+0x16>
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	f7ff ffbd 	bl	8005e74 <__sinit>
 8005efa:	3648      	adds	r6, #72	; 0x48
 8005efc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	d503      	bpl.n	8005f0c <__sfp+0x28>
 8005f04:	6833      	ldr	r3, [r6, #0]
 8005f06:	b30b      	cbz	r3, 8005f4c <__sfp+0x68>
 8005f08:	6836      	ldr	r6, [r6, #0]
 8005f0a:	e7f7      	b.n	8005efc <__sfp+0x18>
 8005f0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f10:	b9d5      	cbnz	r5, 8005f48 <__sfp+0x64>
 8005f12:	4b16      	ldr	r3, [pc, #88]	; (8005f6c <__sfp+0x88>)
 8005f14:	60e3      	str	r3, [r4, #12]
 8005f16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f1a:	6665      	str	r5, [r4, #100]	; 0x64
 8005f1c:	f000 f847 	bl	8005fae <__retarget_lock_init_recursive>
 8005f20:	f7ff ff96 	bl	8005e50 <__sfp_lock_release>
 8005f24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f2c:	6025      	str	r5, [r4, #0]
 8005f2e:	61a5      	str	r5, [r4, #24]
 8005f30:	2208      	movs	r2, #8
 8005f32:	4629      	mov	r1, r5
 8005f34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f38:	f7ff fd2c 	bl	8005994 <memset>
 8005f3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f44:	4620      	mov	r0, r4
 8005f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f48:	3468      	adds	r4, #104	; 0x68
 8005f4a:	e7d9      	b.n	8005f00 <__sfp+0x1c>
 8005f4c:	2104      	movs	r1, #4
 8005f4e:	4638      	mov	r0, r7
 8005f50:	f7ff ff62 	bl	8005e18 <__sfmoreglue>
 8005f54:	4604      	mov	r4, r0
 8005f56:	6030      	str	r0, [r6, #0]
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d1d5      	bne.n	8005f08 <__sfp+0x24>
 8005f5c:	f7ff ff78 	bl	8005e50 <__sfp_lock_release>
 8005f60:	230c      	movs	r3, #12
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	e7ee      	b.n	8005f44 <__sfp+0x60>
 8005f66:	bf00      	nop
 8005f68:	08006a94 	.word	0x08006a94
 8005f6c:	ffff0001 	.word	0xffff0001

08005f70 <_fwalk_reent>:
 8005f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f74:	4606      	mov	r6, r0
 8005f76:	4688      	mov	r8, r1
 8005f78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f7c:	2700      	movs	r7, #0
 8005f7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f82:	f1b9 0901 	subs.w	r9, r9, #1
 8005f86:	d505      	bpl.n	8005f94 <_fwalk_reent+0x24>
 8005f88:	6824      	ldr	r4, [r4, #0]
 8005f8a:	2c00      	cmp	r4, #0
 8005f8c:	d1f7      	bne.n	8005f7e <_fwalk_reent+0xe>
 8005f8e:	4638      	mov	r0, r7
 8005f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f94:	89ab      	ldrh	r3, [r5, #12]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d907      	bls.n	8005faa <_fwalk_reent+0x3a>
 8005f9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	d003      	beq.n	8005faa <_fwalk_reent+0x3a>
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	47c0      	blx	r8
 8005fa8:	4307      	orrs	r7, r0
 8005faa:	3568      	adds	r5, #104	; 0x68
 8005fac:	e7e9      	b.n	8005f82 <_fwalk_reent+0x12>

08005fae <__retarget_lock_init_recursive>:
 8005fae:	4770      	bx	lr

08005fb0 <__retarget_lock_acquire_recursive>:
 8005fb0:	4770      	bx	lr

08005fb2 <__retarget_lock_release_recursive>:
 8005fb2:	4770      	bx	lr

08005fb4 <__swhatbuf_r>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	460e      	mov	r6, r1
 8005fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	b096      	sub	sp, #88	; 0x58
 8005fc0:	4614      	mov	r4, r2
 8005fc2:	461d      	mov	r5, r3
 8005fc4:	da08      	bge.n	8005fd8 <__swhatbuf_r+0x24>
 8005fc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	602a      	str	r2, [r5, #0]
 8005fce:	061a      	lsls	r2, r3, #24
 8005fd0:	d410      	bmi.n	8005ff4 <__swhatbuf_r+0x40>
 8005fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fd6:	e00e      	b.n	8005ff6 <__swhatbuf_r+0x42>
 8005fd8:	466a      	mov	r2, sp
 8005fda:	f000 fc95 	bl	8006908 <_fstat_r>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	dbf1      	blt.n	8005fc6 <__swhatbuf_r+0x12>
 8005fe2:	9a01      	ldr	r2, [sp, #4]
 8005fe4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005fe8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005fec:	425a      	negs	r2, r3
 8005fee:	415a      	adcs	r2, r3
 8005ff0:	602a      	str	r2, [r5, #0]
 8005ff2:	e7ee      	b.n	8005fd2 <__swhatbuf_r+0x1e>
 8005ff4:	2340      	movs	r3, #64	; 0x40
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	b016      	add	sp, #88	; 0x58
 8005ffc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006000 <__smakebuf_r>:
 8006000:	898b      	ldrh	r3, [r1, #12]
 8006002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006004:	079d      	lsls	r5, r3, #30
 8006006:	4606      	mov	r6, r0
 8006008:	460c      	mov	r4, r1
 800600a:	d507      	bpl.n	800601c <__smakebuf_r+0x1c>
 800600c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	2301      	movs	r3, #1
 8006016:	6163      	str	r3, [r4, #20]
 8006018:	b002      	add	sp, #8
 800601a:	bd70      	pop	{r4, r5, r6, pc}
 800601c:	ab01      	add	r3, sp, #4
 800601e:	466a      	mov	r2, sp
 8006020:	f7ff ffc8 	bl	8005fb4 <__swhatbuf_r>
 8006024:	9900      	ldr	r1, [sp, #0]
 8006026:	4605      	mov	r5, r0
 8006028:	4630      	mov	r0, r6
 800602a:	f000 f895 	bl	8006158 <_malloc_r>
 800602e:	b948      	cbnz	r0, 8006044 <__smakebuf_r+0x44>
 8006030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006034:	059a      	lsls	r2, r3, #22
 8006036:	d4ef      	bmi.n	8006018 <__smakebuf_r+0x18>
 8006038:	f023 0303 	bic.w	r3, r3, #3
 800603c:	f043 0302 	orr.w	r3, r3, #2
 8006040:	81a3      	strh	r3, [r4, #12]
 8006042:	e7e3      	b.n	800600c <__smakebuf_r+0xc>
 8006044:	4b0d      	ldr	r3, [pc, #52]	; (800607c <__smakebuf_r+0x7c>)
 8006046:	62b3      	str	r3, [r6, #40]	; 0x28
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	6020      	str	r0, [r4, #0]
 800604c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006050:	81a3      	strh	r3, [r4, #12]
 8006052:	9b00      	ldr	r3, [sp, #0]
 8006054:	6163      	str	r3, [r4, #20]
 8006056:	9b01      	ldr	r3, [sp, #4]
 8006058:	6120      	str	r0, [r4, #16]
 800605a:	b15b      	cbz	r3, 8006074 <__smakebuf_r+0x74>
 800605c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006060:	4630      	mov	r0, r6
 8006062:	f000 fc63 	bl	800692c <_isatty_r>
 8006066:	b128      	cbz	r0, 8006074 <__smakebuf_r+0x74>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f023 0303 	bic.w	r3, r3, #3
 800606e:	f043 0301 	orr.w	r3, r3, #1
 8006072:	81a3      	strh	r3, [r4, #12]
 8006074:	89a0      	ldrh	r0, [r4, #12]
 8006076:	4305      	orrs	r5, r0
 8006078:	81a5      	strh	r5, [r4, #12]
 800607a:	e7cd      	b.n	8006018 <__smakebuf_r+0x18>
 800607c:	08005e0d 	.word	0x08005e0d

08006080 <_free_r>:
 8006080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006082:	2900      	cmp	r1, #0
 8006084:	d044      	beq.n	8006110 <_free_r+0x90>
 8006086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800608a:	9001      	str	r0, [sp, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	f1a1 0404 	sub.w	r4, r1, #4
 8006092:	bfb8      	it	lt
 8006094:	18e4      	addlt	r4, r4, r3
 8006096:	f000 fc6b 	bl	8006970 <__malloc_lock>
 800609a:	4a1e      	ldr	r2, [pc, #120]	; (8006114 <_free_r+0x94>)
 800609c:	9801      	ldr	r0, [sp, #4]
 800609e:	6813      	ldr	r3, [r2, #0]
 80060a0:	b933      	cbnz	r3, 80060b0 <_free_r+0x30>
 80060a2:	6063      	str	r3, [r4, #4]
 80060a4:	6014      	str	r4, [r2, #0]
 80060a6:	b003      	add	sp, #12
 80060a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060ac:	f000 bc66 	b.w	800697c <__malloc_unlock>
 80060b0:	42a3      	cmp	r3, r4
 80060b2:	d908      	bls.n	80060c6 <_free_r+0x46>
 80060b4:	6825      	ldr	r5, [r4, #0]
 80060b6:	1961      	adds	r1, r4, r5
 80060b8:	428b      	cmp	r3, r1
 80060ba:	bf01      	itttt	eq
 80060bc:	6819      	ldreq	r1, [r3, #0]
 80060be:	685b      	ldreq	r3, [r3, #4]
 80060c0:	1949      	addeq	r1, r1, r5
 80060c2:	6021      	streq	r1, [r4, #0]
 80060c4:	e7ed      	b.n	80060a2 <_free_r+0x22>
 80060c6:	461a      	mov	r2, r3
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	b10b      	cbz	r3, 80060d0 <_free_r+0x50>
 80060cc:	42a3      	cmp	r3, r4
 80060ce:	d9fa      	bls.n	80060c6 <_free_r+0x46>
 80060d0:	6811      	ldr	r1, [r2, #0]
 80060d2:	1855      	adds	r5, r2, r1
 80060d4:	42a5      	cmp	r5, r4
 80060d6:	d10b      	bne.n	80060f0 <_free_r+0x70>
 80060d8:	6824      	ldr	r4, [r4, #0]
 80060da:	4421      	add	r1, r4
 80060dc:	1854      	adds	r4, r2, r1
 80060de:	42a3      	cmp	r3, r4
 80060e0:	6011      	str	r1, [r2, #0]
 80060e2:	d1e0      	bne.n	80060a6 <_free_r+0x26>
 80060e4:	681c      	ldr	r4, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	6053      	str	r3, [r2, #4]
 80060ea:	4421      	add	r1, r4
 80060ec:	6011      	str	r1, [r2, #0]
 80060ee:	e7da      	b.n	80060a6 <_free_r+0x26>
 80060f0:	d902      	bls.n	80060f8 <_free_r+0x78>
 80060f2:	230c      	movs	r3, #12
 80060f4:	6003      	str	r3, [r0, #0]
 80060f6:	e7d6      	b.n	80060a6 <_free_r+0x26>
 80060f8:	6825      	ldr	r5, [r4, #0]
 80060fa:	1961      	adds	r1, r4, r5
 80060fc:	428b      	cmp	r3, r1
 80060fe:	bf04      	itt	eq
 8006100:	6819      	ldreq	r1, [r3, #0]
 8006102:	685b      	ldreq	r3, [r3, #4]
 8006104:	6063      	str	r3, [r4, #4]
 8006106:	bf04      	itt	eq
 8006108:	1949      	addeq	r1, r1, r5
 800610a:	6021      	streq	r1, [r4, #0]
 800610c:	6054      	str	r4, [r2, #4]
 800610e:	e7ca      	b.n	80060a6 <_free_r+0x26>
 8006110:	b003      	add	sp, #12
 8006112:	bd30      	pop	{r4, r5, pc}
 8006114:	20004090 	.word	0x20004090

08006118 <sbrk_aligned>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	4e0e      	ldr	r6, [pc, #56]	; (8006154 <sbrk_aligned+0x3c>)
 800611c:	460c      	mov	r4, r1
 800611e:	6831      	ldr	r1, [r6, #0]
 8006120:	4605      	mov	r5, r0
 8006122:	b911      	cbnz	r1, 800612a <sbrk_aligned+0x12>
 8006124:	f000 fb7a 	bl	800681c <_sbrk_r>
 8006128:	6030      	str	r0, [r6, #0]
 800612a:	4621      	mov	r1, r4
 800612c:	4628      	mov	r0, r5
 800612e:	f000 fb75 	bl	800681c <_sbrk_r>
 8006132:	1c43      	adds	r3, r0, #1
 8006134:	d00a      	beq.n	800614c <sbrk_aligned+0x34>
 8006136:	1cc4      	adds	r4, r0, #3
 8006138:	f024 0403 	bic.w	r4, r4, #3
 800613c:	42a0      	cmp	r0, r4
 800613e:	d007      	beq.n	8006150 <sbrk_aligned+0x38>
 8006140:	1a21      	subs	r1, r4, r0
 8006142:	4628      	mov	r0, r5
 8006144:	f000 fb6a 	bl	800681c <_sbrk_r>
 8006148:	3001      	adds	r0, #1
 800614a:	d101      	bne.n	8006150 <sbrk_aligned+0x38>
 800614c:	f04f 34ff 	mov.w	r4, #4294967295
 8006150:	4620      	mov	r0, r4
 8006152:	bd70      	pop	{r4, r5, r6, pc}
 8006154:	20004094 	.word	0x20004094

08006158 <_malloc_r>:
 8006158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800615c:	1ccd      	adds	r5, r1, #3
 800615e:	f025 0503 	bic.w	r5, r5, #3
 8006162:	3508      	adds	r5, #8
 8006164:	2d0c      	cmp	r5, #12
 8006166:	bf38      	it	cc
 8006168:	250c      	movcc	r5, #12
 800616a:	2d00      	cmp	r5, #0
 800616c:	4607      	mov	r7, r0
 800616e:	db01      	blt.n	8006174 <_malloc_r+0x1c>
 8006170:	42a9      	cmp	r1, r5
 8006172:	d905      	bls.n	8006180 <_malloc_r+0x28>
 8006174:	230c      	movs	r3, #12
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	2600      	movs	r6, #0
 800617a:	4630      	mov	r0, r6
 800617c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006180:	4e2e      	ldr	r6, [pc, #184]	; (800623c <_malloc_r+0xe4>)
 8006182:	f000 fbf5 	bl	8006970 <__malloc_lock>
 8006186:	6833      	ldr	r3, [r6, #0]
 8006188:	461c      	mov	r4, r3
 800618a:	bb34      	cbnz	r4, 80061da <_malloc_r+0x82>
 800618c:	4629      	mov	r1, r5
 800618e:	4638      	mov	r0, r7
 8006190:	f7ff ffc2 	bl	8006118 <sbrk_aligned>
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	4604      	mov	r4, r0
 8006198:	d14d      	bne.n	8006236 <_malloc_r+0xde>
 800619a:	6834      	ldr	r4, [r6, #0]
 800619c:	4626      	mov	r6, r4
 800619e:	2e00      	cmp	r6, #0
 80061a0:	d140      	bne.n	8006224 <_malloc_r+0xcc>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	4631      	mov	r1, r6
 80061a6:	4638      	mov	r0, r7
 80061a8:	eb04 0803 	add.w	r8, r4, r3
 80061ac:	f000 fb36 	bl	800681c <_sbrk_r>
 80061b0:	4580      	cmp	r8, r0
 80061b2:	d13a      	bne.n	800622a <_malloc_r+0xd2>
 80061b4:	6821      	ldr	r1, [r4, #0]
 80061b6:	3503      	adds	r5, #3
 80061b8:	1a6d      	subs	r5, r5, r1
 80061ba:	f025 0503 	bic.w	r5, r5, #3
 80061be:	3508      	adds	r5, #8
 80061c0:	2d0c      	cmp	r5, #12
 80061c2:	bf38      	it	cc
 80061c4:	250c      	movcc	r5, #12
 80061c6:	4629      	mov	r1, r5
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7ff ffa5 	bl	8006118 <sbrk_aligned>
 80061ce:	3001      	adds	r0, #1
 80061d0:	d02b      	beq.n	800622a <_malloc_r+0xd2>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	442b      	add	r3, r5
 80061d6:	6023      	str	r3, [r4, #0]
 80061d8:	e00e      	b.n	80061f8 <_malloc_r+0xa0>
 80061da:	6822      	ldr	r2, [r4, #0]
 80061dc:	1b52      	subs	r2, r2, r5
 80061de:	d41e      	bmi.n	800621e <_malloc_r+0xc6>
 80061e0:	2a0b      	cmp	r2, #11
 80061e2:	d916      	bls.n	8006212 <_malloc_r+0xba>
 80061e4:	1961      	adds	r1, r4, r5
 80061e6:	42a3      	cmp	r3, r4
 80061e8:	6025      	str	r5, [r4, #0]
 80061ea:	bf18      	it	ne
 80061ec:	6059      	strne	r1, [r3, #4]
 80061ee:	6863      	ldr	r3, [r4, #4]
 80061f0:	bf08      	it	eq
 80061f2:	6031      	streq	r1, [r6, #0]
 80061f4:	5162      	str	r2, [r4, r5]
 80061f6:	604b      	str	r3, [r1, #4]
 80061f8:	4638      	mov	r0, r7
 80061fa:	f104 060b 	add.w	r6, r4, #11
 80061fe:	f000 fbbd 	bl	800697c <__malloc_unlock>
 8006202:	f026 0607 	bic.w	r6, r6, #7
 8006206:	1d23      	adds	r3, r4, #4
 8006208:	1af2      	subs	r2, r6, r3
 800620a:	d0b6      	beq.n	800617a <_malloc_r+0x22>
 800620c:	1b9b      	subs	r3, r3, r6
 800620e:	50a3      	str	r3, [r4, r2]
 8006210:	e7b3      	b.n	800617a <_malloc_r+0x22>
 8006212:	6862      	ldr	r2, [r4, #4]
 8006214:	42a3      	cmp	r3, r4
 8006216:	bf0c      	ite	eq
 8006218:	6032      	streq	r2, [r6, #0]
 800621a:	605a      	strne	r2, [r3, #4]
 800621c:	e7ec      	b.n	80061f8 <_malloc_r+0xa0>
 800621e:	4623      	mov	r3, r4
 8006220:	6864      	ldr	r4, [r4, #4]
 8006222:	e7b2      	b.n	800618a <_malloc_r+0x32>
 8006224:	4634      	mov	r4, r6
 8006226:	6876      	ldr	r6, [r6, #4]
 8006228:	e7b9      	b.n	800619e <_malloc_r+0x46>
 800622a:	230c      	movs	r3, #12
 800622c:	603b      	str	r3, [r7, #0]
 800622e:	4638      	mov	r0, r7
 8006230:	f000 fba4 	bl	800697c <__malloc_unlock>
 8006234:	e7a1      	b.n	800617a <_malloc_r+0x22>
 8006236:	6025      	str	r5, [r4, #0]
 8006238:	e7de      	b.n	80061f8 <_malloc_r+0xa0>
 800623a:	bf00      	nop
 800623c:	20004090 	.word	0x20004090

08006240 <__sfputc_r>:
 8006240:	6893      	ldr	r3, [r2, #8]
 8006242:	3b01      	subs	r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	b410      	push	{r4}
 8006248:	6093      	str	r3, [r2, #8]
 800624a:	da08      	bge.n	800625e <__sfputc_r+0x1e>
 800624c:	6994      	ldr	r4, [r2, #24]
 800624e:	42a3      	cmp	r3, r4
 8006250:	db01      	blt.n	8006256 <__sfputc_r+0x16>
 8006252:	290a      	cmp	r1, #10
 8006254:	d103      	bne.n	800625e <__sfputc_r+0x1e>
 8006256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800625a:	f7ff bc31 	b.w	8005ac0 <__swbuf_r>
 800625e:	6813      	ldr	r3, [r2, #0]
 8006260:	1c58      	adds	r0, r3, #1
 8006262:	6010      	str	r0, [r2, #0]
 8006264:	7019      	strb	r1, [r3, #0]
 8006266:	4608      	mov	r0, r1
 8006268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800626c:	4770      	bx	lr

0800626e <__sfputs_r>:
 800626e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006270:	4606      	mov	r6, r0
 8006272:	460f      	mov	r7, r1
 8006274:	4614      	mov	r4, r2
 8006276:	18d5      	adds	r5, r2, r3
 8006278:	42ac      	cmp	r4, r5
 800627a:	d101      	bne.n	8006280 <__sfputs_r+0x12>
 800627c:	2000      	movs	r0, #0
 800627e:	e007      	b.n	8006290 <__sfputs_r+0x22>
 8006280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006284:	463a      	mov	r2, r7
 8006286:	4630      	mov	r0, r6
 8006288:	f7ff ffda 	bl	8006240 <__sfputc_r>
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	d1f3      	bne.n	8006278 <__sfputs_r+0xa>
 8006290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006294 <_vfiprintf_r>:
 8006294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	460d      	mov	r5, r1
 800629a:	b09d      	sub	sp, #116	; 0x74
 800629c:	4614      	mov	r4, r2
 800629e:	4698      	mov	r8, r3
 80062a0:	4606      	mov	r6, r0
 80062a2:	b118      	cbz	r0, 80062ac <_vfiprintf_r+0x18>
 80062a4:	6983      	ldr	r3, [r0, #24]
 80062a6:	b90b      	cbnz	r3, 80062ac <_vfiprintf_r+0x18>
 80062a8:	f7ff fde4 	bl	8005e74 <__sinit>
 80062ac:	4b89      	ldr	r3, [pc, #548]	; (80064d4 <_vfiprintf_r+0x240>)
 80062ae:	429d      	cmp	r5, r3
 80062b0:	d11b      	bne.n	80062ea <_vfiprintf_r+0x56>
 80062b2:	6875      	ldr	r5, [r6, #4]
 80062b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062b6:	07d9      	lsls	r1, r3, #31
 80062b8:	d405      	bmi.n	80062c6 <_vfiprintf_r+0x32>
 80062ba:	89ab      	ldrh	r3, [r5, #12]
 80062bc:	059a      	lsls	r2, r3, #22
 80062be:	d402      	bmi.n	80062c6 <_vfiprintf_r+0x32>
 80062c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062c2:	f7ff fe75 	bl	8005fb0 <__retarget_lock_acquire_recursive>
 80062c6:	89ab      	ldrh	r3, [r5, #12]
 80062c8:	071b      	lsls	r3, r3, #28
 80062ca:	d501      	bpl.n	80062d0 <_vfiprintf_r+0x3c>
 80062cc:	692b      	ldr	r3, [r5, #16]
 80062ce:	b9eb      	cbnz	r3, 800630c <_vfiprintf_r+0x78>
 80062d0:	4629      	mov	r1, r5
 80062d2:	4630      	mov	r0, r6
 80062d4:	f7ff fc46 	bl	8005b64 <__swsetup_r>
 80062d8:	b1c0      	cbz	r0, 800630c <_vfiprintf_r+0x78>
 80062da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062dc:	07dc      	lsls	r4, r3, #31
 80062de:	d50e      	bpl.n	80062fe <_vfiprintf_r+0x6a>
 80062e0:	f04f 30ff 	mov.w	r0, #4294967295
 80062e4:	b01d      	add	sp, #116	; 0x74
 80062e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ea:	4b7b      	ldr	r3, [pc, #492]	; (80064d8 <_vfiprintf_r+0x244>)
 80062ec:	429d      	cmp	r5, r3
 80062ee:	d101      	bne.n	80062f4 <_vfiprintf_r+0x60>
 80062f0:	68b5      	ldr	r5, [r6, #8]
 80062f2:	e7df      	b.n	80062b4 <_vfiprintf_r+0x20>
 80062f4:	4b79      	ldr	r3, [pc, #484]	; (80064dc <_vfiprintf_r+0x248>)
 80062f6:	429d      	cmp	r5, r3
 80062f8:	bf08      	it	eq
 80062fa:	68f5      	ldreq	r5, [r6, #12]
 80062fc:	e7da      	b.n	80062b4 <_vfiprintf_r+0x20>
 80062fe:	89ab      	ldrh	r3, [r5, #12]
 8006300:	0598      	lsls	r0, r3, #22
 8006302:	d4ed      	bmi.n	80062e0 <_vfiprintf_r+0x4c>
 8006304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006306:	f7ff fe54 	bl	8005fb2 <__retarget_lock_release_recursive>
 800630a:	e7e9      	b.n	80062e0 <_vfiprintf_r+0x4c>
 800630c:	2300      	movs	r3, #0
 800630e:	9309      	str	r3, [sp, #36]	; 0x24
 8006310:	2320      	movs	r3, #32
 8006312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006316:	f8cd 800c 	str.w	r8, [sp, #12]
 800631a:	2330      	movs	r3, #48	; 0x30
 800631c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80064e0 <_vfiprintf_r+0x24c>
 8006320:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006324:	f04f 0901 	mov.w	r9, #1
 8006328:	4623      	mov	r3, r4
 800632a:	469a      	mov	sl, r3
 800632c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006330:	b10a      	cbz	r2, 8006336 <_vfiprintf_r+0xa2>
 8006332:	2a25      	cmp	r2, #37	; 0x25
 8006334:	d1f9      	bne.n	800632a <_vfiprintf_r+0x96>
 8006336:	ebba 0b04 	subs.w	fp, sl, r4
 800633a:	d00b      	beq.n	8006354 <_vfiprintf_r+0xc0>
 800633c:	465b      	mov	r3, fp
 800633e:	4622      	mov	r2, r4
 8006340:	4629      	mov	r1, r5
 8006342:	4630      	mov	r0, r6
 8006344:	f7ff ff93 	bl	800626e <__sfputs_r>
 8006348:	3001      	adds	r0, #1
 800634a:	f000 80aa 	beq.w	80064a2 <_vfiprintf_r+0x20e>
 800634e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006350:	445a      	add	r2, fp
 8006352:	9209      	str	r2, [sp, #36]	; 0x24
 8006354:	f89a 3000 	ldrb.w	r3, [sl]
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 80a2 	beq.w	80064a2 <_vfiprintf_r+0x20e>
 800635e:	2300      	movs	r3, #0
 8006360:	f04f 32ff 	mov.w	r2, #4294967295
 8006364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006368:	f10a 0a01 	add.w	sl, sl, #1
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	9307      	str	r3, [sp, #28]
 8006370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006374:	931a      	str	r3, [sp, #104]	; 0x68
 8006376:	4654      	mov	r4, sl
 8006378:	2205      	movs	r2, #5
 800637a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800637e:	4858      	ldr	r0, [pc, #352]	; (80064e0 <_vfiprintf_r+0x24c>)
 8006380:	f7f9 ff46 	bl	8000210 <memchr>
 8006384:	9a04      	ldr	r2, [sp, #16]
 8006386:	b9d8      	cbnz	r0, 80063c0 <_vfiprintf_r+0x12c>
 8006388:	06d1      	lsls	r1, r2, #27
 800638a:	bf44      	itt	mi
 800638c:	2320      	movmi	r3, #32
 800638e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006392:	0713      	lsls	r3, r2, #28
 8006394:	bf44      	itt	mi
 8006396:	232b      	movmi	r3, #43	; 0x2b
 8006398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800639c:	f89a 3000 	ldrb.w	r3, [sl]
 80063a0:	2b2a      	cmp	r3, #42	; 0x2a
 80063a2:	d015      	beq.n	80063d0 <_vfiprintf_r+0x13c>
 80063a4:	9a07      	ldr	r2, [sp, #28]
 80063a6:	4654      	mov	r4, sl
 80063a8:	2000      	movs	r0, #0
 80063aa:	f04f 0c0a 	mov.w	ip, #10
 80063ae:	4621      	mov	r1, r4
 80063b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063b4:	3b30      	subs	r3, #48	; 0x30
 80063b6:	2b09      	cmp	r3, #9
 80063b8:	d94e      	bls.n	8006458 <_vfiprintf_r+0x1c4>
 80063ba:	b1b0      	cbz	r0, 80063ea <_vfiprintf_r+0x156>
 80063bc:	9207      	str	r2, [sp, #28]
 80063be:	e014      	b.n	80063ea <_vfiprintf_r+0x156>
 80063c0:	eba0 0308 	sub.w	r3, r0, r8
 80063c4:	fa09 f303 	lsl.w	r3, r9, r3
 80063c8:	4313      	orrs	r3, r2
 80063ca:	9304      	str	r3, [sp, #16]
 80063cc:	46a2      	mov	sl, r4
 80063ce:	e7d2      	b.n	8006376 <_vfiprintf_r+0xe2>
 80063d0:	9b03      	ldr	r3, [sp, #12]
 80063d2:	1d19      	adds	r1, r3, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	9103      	str	r1, [sp, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bfbb      	ittet	lt
 80063dc:	425b      	neglt	r3, r3
 80063de:	f042 0202 	orrlt.w	r2, r2, #2
 80063e2:	9307      	strge	r3, [sp, #28]
 80063e4:	9307      	strlt	r3, [sp, #28]
 80063e6:	bfb8      	it	lt
 80063e8:	9204      	strlt	r2, [sp, #16]
 80063ea:	7823      	ldrb	r3, [r4, #0]
 80063ec:	2b2e      	cmp	r3, #46	; 0x2e
 80063ee:	d10c      	bne.n	800640a <_vfiprintf_r+0x176>
 80063f0:	7863      	ldrb	r3, [r4, #1]
 80063f2:	2b2a      	cmp	r3, #42	; 0x2a
 80063f4:	d135      	bne.n	8006462 <_vfiprintf_r+0x1ce>
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	1d1a      	adds	r2, r3, #4
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	9203      	str	r2, [sp, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bfb8      	it	lt
 8006402:	f04f 33ff 	movlt.w	r3, #4294967295
 8006406:	3402      	adds	r4, #2
 8006408:	9305      	str	r3, [sp, #20]
 800640a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80064f0 <_vfiprintf_r+0x25c>
 800640e:	7821      	ldrb	r1, [r4, #0]
 8006410:	2203      	movs	r2, #3
 8006412:	4650      	mov	r0, sl
 8006414:	f7f9 fefc 	bl	8000210 <memchr>
 8006418:	b140      	cbz	r0, 800642c <_vfiprintf_r+0x198>
 800641a:	2340      	movs	r3, #64	; 0x40
 800641c:	eba0 000a 	sub.w	r0, r0, sl
 8006420:	fa03 f000 	lsl.w	r0, r3, r0
 8006424:	9b04      	ldr	r3, [sp, #16]
 8006426:	4303      	orrs	r3, r0
 8006428:	3401      	adds	r4, #1
 800642a:	9304      	str	r3, [sp, #16]
 800642c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006430:	482c      	ldr	r0, [pc, #176]	; (80064e4 <_vfiprintf_r+0x250>)
 8006432:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006436:	2206      	movs	r2, #6
 8006438:	f7f9 feea 	bl	8000210 <memchr>
 800643c:	2800      	cmp	r0, #0
 800643e:	d03f      	beq.n	80064c0 <_vfiprintf_r+0x22c>
 8006440:	4b29      	ldr	r3, [pc, #164]	; (80064e8 <_vfiprintf_r+0x254>)
 8006442:	bb1b      	cbnz	r3, 800648c <_vfiprintf_r+0x1f8>
 8006444:	9b03      	ldr	r3, [sp, #12]
 8006446:	3307      	adds	r3, #7
 8006448:	f023 0307 	bic.w	r3, r3, #7
 800644c:	3308      	adds	r3, #8
 800644e:	9303      	str	r3, [sp, #12]
 8006450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006452:	443b      	add	r3, r7
 8006454:	9309      	str	r3, [sp, #36]	; 0x24
 8006456:	e767      	b.n	8006328 <_vfiprintf_r+0x94>
 8006458:	fb0c 3202 	mla	r2, ip, r2, r3
 800645c:	460c      	mov	r4, r1
 800645e:	2001      	movs	r0, #1
 8006460:	e7a5      	b.n	80063ae <_vfiprintf_r+0x11a>
 8006462:	2300      	movs	r3, #0
 8006464:	3401      	adds	r4, #1
 8006466:	9305      	str	r3, [sp, #20]
 8006468:	4619      	mov	r1, r3
 800646a:	f04f 0c0a 	mov.w	ip, #10
 800646e:	4620      	mov	r0, r4
 8006470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006474:	3a30      	subs	r2, #48	; 0x30
 8006476:	2a09      	cmp	r2, #9
 8006478:	d903      	bls.n	8006482 <_vfiprintf_r+0x1ee>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0c5      	beq.n	800640a <_vfiprintf_r+0x176>
 800647e:	9105      	str	r1, [sp, #20]
 8006480:	e7c3      	b.n	800640a <_vfiprintf_r+0x176>
 8006482:	fb0c 2101 	mla	r1, ip, r1, r2
 8006486:	4604      	mov	r4, r0
 8006488:	2301      	movs	r3, #1
 800648a:	e7f0      	b.n	800646e <_vfiprintf_r+0x1da>
 800648c:	ab03      	add	r3, sp, #12
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	462a      	mov	r2, r5
 8006492:	4b16      	ldr	r3, [pc, #88]	; (80064ec <_vfiprintf_r+0x258>)
 8006494:	a904      	add	r1, sp, #16
 8006496:	4630      	mov	r0, r6
 8006498:	f3af 8000 	nop.w
 800649c:	4607      	mov	r7, r0
 800649e:	1c78      	adds	r0, r7, #1
 80064a0:	d1d6      	bne.n	8006450 <_vfiprintf_r+0x1bc>
 80064a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064a4:	07d9      	lsls	r1, r3, #31
 80064a6:	d405      	bmi.n	80064b4 <_vfiprintf_r+0x220>
 80064a8:	89ab      	ldrh	r3, [r5, #12]
 80064aa:	059a      	lsls	r2, r3, #22
 80064ac:	d402      	bmi.n	80064b4 <_vfiprintf_r+0x220>
 80064ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064b0:	f7ff fd7f 	bl	8005fb2 <__retarget_lock_release_recursive>
 80064b4:	89ab      	ldrh	r3, [r5, #12]
 80064b6:	065b      	lsls	r3, r3, #25
 80064b8:	f53f af12 	bmi.w	80062e0 <_vfiprintf_r+0x4c>
 80064bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064be:	e711      	b.n	80062e4 <_vfiprintf_r+0x50>
 80064c0:	ab03      	add	r3, sp, #12
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	462a      	mov	r2, r5
 80064c6:	4b09      	ldr	r3, [pc, #36]	; (80064ec <_vfiprintf_r+0x258>)
 80064c8:	a904      	add	r1, sp, #16
 80064ca:	4630      	mov	r0, r6
 80064cc:	f000 f880 	bl	80065d0 <_printf_i>
 80064d0:	e7e4      	b.n	800649c <_vfiprintf_r+0x208>
 80064d2:	bf00      	nop
 80064d4:	08006ab8 	.word	0x08006ab8
 80064d8:	08006ad8 	.word	0x08006ad8
 80064dc:	08006a98 	.word	0x08006a98
 80064e0:	08006af8 	.word	0x08006af8
 80064e4:	08006b02 	.word	0x08006b02
 80064e8:	00000000 	.word	0x00000000
 80064ec:	0800626f 	.word	0x0800626f
 80064f0:	08006afe 	.word	0x08006afe

080064f4 <_printf_common>:
 80064f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f8:	4616      	mov	r6, r2
 80064fa:	4699      	mov	r9, r3
 80064fc:	688a      	ldr	r2, [r1, #8]
 80064fe:	690b      	ldr	r3, [r1, #16]
 8006500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006504:	4293      	cmp	r3, r2
 8006506:	bfb8      	it	lt
 8006508:	4613      	movlt	r3, r2
 800650a:	6033      	str	r3, [r6, #0]
 800650c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006510:	4607      	mov	r7, r0
 8006512:	460c      	mov	r4, r1
 8006514:	b10a      	cbz	r2, 800651a <_printf_common+0x26>
 8006516:	3301      	adds	r3, #1
 8006518:	6033      	str	r3, [r6, #0]
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	0699      	lsls	r1, r3, #26
 800651e:	bf42      	ittt	mi
 8006520:	6833      	ldrmi	r3, [r6, #0]
 8006522:	3302      	addmi	r3, #2
 8006524:	6033      	strmi	r3, [r6, #0]
 8006526:	6825      	ldr	r5, [r4, #0]
 8006528:	f015 0506 	ands.w	r5, r5, #6
 800652c:	d106      	bne.n	800653c <_printf_common+0x48>
 800652e:	f104 0a19 	add.w	sl, r4, #25
 8006532:	68e3      	ldr	r3, [r4, #12]
 8006534:	6832      	ldr	r2, [r6, #0]
 8006536:	1a9b      	subs	r3, r3, r2
 8006538:	42ab      	cmp	r3, r5
 800653a:	dc26      	bgt.n	800658a <_printf_common+0x96>
 800653c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006540:	1e13      	subs	r3, r2, #0
 8006542:	6822      	ldr	r2, [r4, #0]
 8006544:	bf18      	it	ne
 8006546:	2301      	movne	r3, #1
 8006548:	0692      	lsls	r2, r2, #26
 800654a:	d42b      	bmi.n	80065a4 <_printf_common+0xb0>
 800654c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006550:	4649      	mov	r1, r9
 8006552:	4638      	mov	r0, r7
 8006554:	47c0      	blx	r8
 8006556:	3001      	adds	r0, #1
 8006558:	d01e      	beq.n	8006598 <_printf_common+0xa4>
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	68e5      	ldr	r5, [r4, #12]
 800655e:	6832      	ldr	r2, [r6, #0]
 8006560:	f003 0306 	and.w	r3, r3, #6
 8006564:	2b04      	cmp	r3, #4
 8006566:	bf08      	it	eq
 8006568:	1aad      	subeq	r5, r5, r2
 800656a:	68a3      	ldr	r3, [r4, #8]
 800656c:	6922      	ldr	r2, [r4, #16]
 800656e:	bf0c      	ite	eq
 8006570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006574:	2500      	movne	r5, #0
 8006576:	4293      	cmp	r3, r2
 8006578:	bfc4      	itt	gt
 800657a:	1a9b      	subgt	r3, r3, r2
 800657c:	18ed      	addgt	r5, r5, r3
 800657e:	2600      	movs	r6, #0
 8006580:	341a      	adds	r4, #26
 8006582:	42b5      	cmp	r5, r6
 8006584:	d11a      	bne.n	80065bc <_printf_common+0xc8>
 8006586:	2000      	movs	r0, #0
 8006588:	e008      	b.n	800659c <_printf_common+0xa8>
 800658a:	2301      	movs	r3, #1
 800658c:	4652      	mov	r2, sl
 800658e:	4649      	mov	r1, r9
 8006590:	4638      	mov	r0, r7
 8006592:	47c0      	blx	r8
 8006594:	3001      	adds	r0, #1
 8006596:	d103      	bne.n	80065a0 <_printf_common+0xac>
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a0:	3501      	adds	r5, #1
 80065a2:	e7c6      	b.n	8006532 <_printf_common+0x3e>
 80065a4:	18e1      	adds	r1, r4, r3
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	2030      	movs	r0, #48	; 0x30
 80065aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ae:	4422      	add	r2, r4
 80065b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065b8:	3302      	adds	r3, #2
 80065ba:	e7c7      	b.n	800654c <_printf_common+0x58>
 80065bc:	2301      	movs	r3, #1
 80065be:	4622      	mov	r2, r4
 80065c0:	4649      	mov	r1, r9
 80065c2:	4638      	mov	r0, r7
 80065c4:	47c0      	blx	r8
 80065c6:	3001      	adds	r0, #1
 80065c8:	d0e6      	beq.n	8006598 <_printf_common+0xa4>
 80065ca:	3601      	adds	r6, #1
 80065cc:	e7d9      	b.n	8006582 <_printf_common+0x8e>
	...

080065d0 <_printf_i>:
 80065d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065d4:	7e0f      	ldrb	r7, [r1, #24]
 80065d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065d8:	2f78      	cmp	r7, #120	; 0x78
 80065da:	4691      	mov	r9, r2
 80065dc:	4680      	mov	r8, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	469a      	mov	sl, r3
 80065e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065e6:	d807      	bhi.n	80065f8 <_printf_i+0x28>
 80065e8:	2f62      	cmp	r7, #98	; 0x62
 80065ea:	d80a      	bhi.n	8006602 <_printf_i+0x32>
 80065ec:	2f00      	cmp	r7, #0
 80065ee:	f000 80d8 	beq.w	80067a2 <_printf_i+0x1d2>
 80065f2:	2f58      	cmp	r7, #88	; 0x58
 80065f4:	f000 80a3 	beq.w	800673e <_printf_i+0x16e>
 80065f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006600:	e03a      	b.n	8006678 <_printf_i+0xa8>
 8006602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006606:	2b15      	cmp	r3, #21
 8006608:	d8f6      	bhi.n	80065f8 <_printf_i+0x28>
 800660a:	a101      	add	r1, pc, #4	; (adr r1, 8006610 <_printf_i+0x40>)
 800660c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006610:	08006669 	.word	0x08006669
 8006614:	0800667d 	.word	0x0800667d
 8006618:	080065f9 	.word	0x080065f9
 800661c:	080065f9 	.word	0x080065f9
 8006620:	080065f9 	.word	0x080065f9
 8006624:	080065f9 	.word	0x080065f9
 8006628:	0800667d 	.word	0x0800667d
 800662c:	080065f9 	.word	0x080065f9
 8006630:	080065f9 	.word	0x080065f9
 8006634:	080065f9 	.word	0x080065f9
 8006638:	080065f9 	.word	0x080065f9
 800663c:	08006789 	.word	0x08006789
 8006640:	080066ad 	.word	0x080066ad
 8006644:	0800676b 	.word	0x0800676b
 8006648:	080065f9 	.word	0x080065f9
 800664c:	080065f9 	.word	0x080065f9
 8006650:	080067ab 	.word	0x080067ab
 8006654:	080065f9 	.word	0x080065f9
 8006658:	080066ad 	.word	0x080066ad
 800665c:	080065f9 	.word	0x080065f9
 8006660:	080065f9 	.word	0x080065f9
 8006664:	08006773 	.word	0x08006773
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	1d1a      	adds	r2, r3, #4
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	602a      	str	r2, [r5, #0]
 8006670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006678:	2301      	movs	r3, #1
 800667a:	e0a3      	b.n	80067c4 <_printf_i+0x1f4>
 800667c:	6820      	ldr	r0, [r4, #0]
 800667e:	6829      	ldr	r1, [r5, #0]
 8006680:	0606      	lsls	r6, r0, #24
 8006682:	f101 0304 	add.w	r3, r1, #4
 8006686:	d50a      	bpl.n	800669e <_printf_i+0xce>
 8006688:	680e      	ldr	r6, [r1, #0]
 800668a:	602b      	str	r3, [r5, #0]
 800668c:	2e00      	cmp	r6, #0
 800668e:	da03      	bge.n	8006698 <_printf_i+0xc8>
 8006690:	232d      	movs	r3, #45	; 0x2d
 8006692:	4276      	negs	r6, r6
 8006694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006698:	485e      	ldr	r0, [pc, #376]	; (8006814 <_printf_i+0x244>)
 800669a:	230a      	movs	r3, #10
 800669c:	e019      	b.n	80066d2 <_printf_i+0x102>
 800669e:	680e      	ldr	r6, [r1, #0]
 80066a0:	602b      	str	r3, [r5, #0]
 80066a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066a6:	bf18      	it	ne
 80066a8:	b236      	sxthne	r6, r6
 80066aa:	e7ef      	b.n	800668c <_printf_i+0xbc>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	6820      	ldr	r0, [r4, #0]
 80066b0:	1d19      	adds	r1, r3, #4
 80066b2:	6029      	str	r1, [r5, #0]
 80066b4:	0601      	lsls	r1, r0, #24
 80066b6:	d501      	bpl.n	80066bc <_printf_i+0xec>
 80066b8:	681e      	ldr	r6, [r3, #0]
 80066ba:	e002      	b.n	80066c2 <_printf_i+0xf2>
 80066bc:	0646      	lsls	r6, r0, #25
 80066be:	d5fb      	bpl.n	80066b8 <_printf_i+0xe8>
 80066c0:	881e      	ldrh	r6, [r3, #0]
 80066c2:	4854      	ldr	r0, [pc, #336]	; (8006814 <_printf_i+0x244>)
 80066c4:	2f6f      	cmp	r7, #111	; 0x6f
 80066c6:	bf0c      	ite	eq
 80066c8:	2308      	moveq	r3, #8
 80066ca:	230a      	movne	r3, #10
 80066cc:	2100      	movs	r1, #0
 80066ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066d2:	6865      	ldr	r5, [r4, #4]
 80066d4:	60a5      	str	r5, [r4, #8]
 80066d6:	2d00      	cmp	r5, #0
 80066d8:	bfa2      	ittt	ge
 80066da:	6821      	ldrge	r1, [r4, #0]
 80066dc:	f021 0104 	bicge.w	r1, r1, #4
 80066e0:	6021      	strge	r1, [r4, #0]
 80066e2:	b90e      	cbnz	r6, 80066e8 <_printf_i+0x118>
 80066e4:	2d00      	cmp	r5, #0
 80066e6:	d04d      	beq.n	8006784 <_printf_i+0x1b4>
 80066e8:	4615      	mov	r5, r2
 80066ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80066ee:	fb03 6711 	mls	r7, r3, r1, r6
 80066f2:	5dc7      	ldrb	r7, [r0, r7]
 80066f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066f8:	4637      	mov	r7, r6
 80066fa:	42bb      	cmp	r3, r7
 80066fc:	460e      	mov	r6, r1
 80066fe:	d9f4      	bls.n	80066ea <_printf_i+0x11a>
 8006700:	2b08      	cmp	r3, #8
 8006702:	d10b      	bne.n	800671c <_printf_i+0x14c>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	07de      	lsls	r6, r3, #31
 8006708:	d508      	bpl.n	800671c <_printf_i+0x14c>
 800670a:	6923      	ldr	r3, [r4, #16]
 800670c:	6861      	ldr	r1, [r4, #4]
 800670e:	4299      	cmp	r1, r3
 8006710:	bfde      	ittt	le
 8006712:	2330      	movle	r3, #48	; 0x30
 8006714:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006718:	f105 35ff 	addle.w	r5, r5, #4294967295
 800671c:	1b52      	subs	r2, r2, r5
 800671e:	6122      	str	r2, [r4, #16]
 8006720:	f8cd a000 	str.w	sl, [sp]
 8006724:	464b      	mov	r3, r9
 8006726:	aa03      	add	r2, sp, #12
 8006728:	4621      	mov	r1, r4
 800672a:	4640      	mov	r0, r8
 800672c:	f7ff fee2 	bl	80064f4 <_printf_common>
 8006730:	3001      	adds	r0, #1
 8006732:	d14c      	bne.n	80067ce <_printf_i+0x1fe>
 8006734:	f04f 30ff 	mov.w	r0, #4294967295
 8006738:	b004      	add	sp, #16
 800673a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673e:	4835      	ldr	r0, [pc, #212]	; (8006814 <_printf_i+0x244>)
 8006740:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006744:	6829      	ldr	r1, [r5, #0]
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	f851 6b04 	ldr.w	r6, [r1], #4
 800674c:	6029      	str	r1, [r5, #0]
 800674e:	061d      	lsls	r5, r3, #24
 8006750:	d514      	bpl.n	800677c <_printf_i+0x1ac>
 8006752:	07df      	lsls	r7, r3, #31
 8006754:	bf44      	itt	mi
 8006756:	f043 0320 	orrmi.w	r3, r3, #32
 800675a:	6023      	strmi	r3, [r4, #0]
 800675c:	b91e      	cbnz	r6, 8006766 <_printf_i+0x196>
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	f023 0320 	bic.w	r3, r3, #32
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	2310      	movs	r3, #16
 8006768:	e7b0      	b.n	80066cc <_printf_i+0xfc>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	f043 0320 	orr.w	r3, r3, #32
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	2378      	movs	r3, #120	; 0x78
 8006774:	4828      	ldr	r0, [pc, #160]	; (8006818 <_printf_i+0x248>)
 8006776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800677a:	e7e3      	b.n	8006744 <_printf_i+0x174>
 800677c:	0659      	lsls	r1, r3, #25
 800677e:	bf48      	it	mi
 8006780:	b2b6      	uxthmi	r6, r6
 8006782:	e7e6      	b.n	8006752 <_printf_i+0x182>
 8006784:	4615      	mov	r5, r2
 8006786:	e7bb      	b.n	8006700 <_printf_i+0x130>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	6826      	ldr	r6, [r4, #0]
 800678c:	6961      	ldr	r1, [r4, #20]
 800678e:	1d18      	adds	r0, r3, #4
 8006790:	6028      	str	r0, [r5, #0]
 8006792:	0635      	lsls	r5, r6, #24
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	d501      	bpl.n	800679c <_printf_i+0x1cc>
 8006798:	6019      	str	r1, [r3, #0]
 800679a:	e002      	b.n	80067a2 <_printf_i+0x1d2>
 800679c:	0670      	lsls	r0, r6, #25
 800679e:	d5fb      	bpl.n	8006798 <_printf_i+0x1c8>
 80067a0:	8019      	strh	r1, [r3, #0]
 80067a2:	2300      	movs	r3, #0
 80067a4:	6123      	str	r3, [r4, #16]
 80067a6:	4615      	mov	r5, r2
 80067a8:	e7ba      	b.n	8006720 <_printf_i+0x150>
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	1d1a      	adds	r2, r3, #4
 80067ae:	602a      	str	r2, [r5, #0]
 80067b0:	681d      	ldr	r5, [r3, #0]
 80067b2:	6862      	ldr	r2, [r4, #4]
 80067b4:	2100      	movs	r1, #0
 80067b6:	4628      	mov	r0, r5
 80067b8:	f7f9 fd2a 	bl	8000210 <memchr>
 80067bc:	b108      	cbz	r0, 80067c2 <_printf_i+0x1f2>
 80067be:	1b40      	subs	r0, r0, r5
 80067c0:	6060      	str	r0, [r4, #4]
 80067c2:	6863      	ldr	r3, [r4, #4]
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	2300      	movs	r3, #0
 80067c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067cc:	e7a8      	b.n	8006720 <_printf_i+0x150>
 80067ce:	6923      	ldr	r3, [r4, #16]
 80067d0:	462a      	mov	r2, r5
 80067d2:	4649      	mov	r1, r9
 80067d4:	4640      	mov	r0, r8
 80067d6:	47d0      	blx	sl
 80067d8:	3001      	adds	r0, #1
 80067da:	d0ab      	beq.n	8006734 <_printf_i+0x164>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	079b      	lsls	r3, r3, #30
 80067e0:	d413      	bmi.n	800680a <_printf_i+0x23a>
 80067e2:	68e0      	ldr	r0, [r4, #12]
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	4298      	cmp	r0, r3
 80067e8:	bfb8      	it	lt
 80067ea:	4618      	movlt	r0, r3
 80067ec:	e7a4      	b.n	8006738 <_printf_i+0x168>
 80067ee:	2301      	movs	r3, #1
 80067f0:	4632      	mov	r2, r6
 80067f2:	4649      	mov	r1, r9
 80067f4:	4640      	mov	r0, r8
 80067f6:	47d0      	blx	sl
 80067f8:	3001      	adds	r0, #1
 80067fa:	d09b      	beq.n	8006734 <_printf_i+0x164>
 80067fc:	3501      	adds	r5, #1
 80067fe:	68e3      	ldr	r3, [r4, #12]
 8006800:	9903      	ldr	r1, [sp, #12]
 8006802:	1a5b      	subs	r3, r3, r1
 8006804:	42ab      	cmp	r3, r5
 8006806:	dcf2      	bgt.n	80067ee <_printf_i+0x21e>
 8006808:	e7eb      	b.n	80067e2 <_printf_i+0x212>
 800680a:	2500      	movs	r5, #0
 800680c:	f104 0619 	add.w	r6, r4, #25
 8006810:	e7f5      	b.n	80067fe <_printf_i+0x22e>
 8006812:	bf00      	nop
 8006814:	08006b09 	.word	0x08006b09
 8006818:	08006b1a 	.word	0x08006b1a

0800681c <_sbrk_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4d06      	ldr	r5, [pc, #24]	; (8006838 <_sbrk_r+0x1c>)
 8006820:	2300      	movs	r3, #0
 8006822:	4604      	mov	r4, r0
 8006824:	4608      	mov	r0, r1
 8006826:	602b      	str	r3, [r5, #0]
 8006828:	f7fa fd68 	bl	80012fc <_sbrk>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d102      	bne.n	8006836 <_sbrk_r+0x1a>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	b103      	cbz	r3, 8006836 <_sbrk_r+0x1a>
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	bd38      	pop	{r3, r4, r5, pc}
 8006838:	20004098 	.word	0x20004098

0800683c <__sread>:
 800683c:	b510      	push	{r4, lr}
 800683e:	460c      	mov	r4, r1
 8006840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006844:	f000 f8a0 	bl	8006988 <_read_r>
 8006848:	2800      	cmp	r0, #0
 800684a:	bfab      	itete	ge
 800684c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800684e:	89a3      	ldrhlt	r3, [r4, #12]
 8006850:	181b      	addge	r3, r3, r0
 8006852:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006856:	bfac      	ite	ge
 8006858:	6563      	strge	r3, [r4, #84]	; 0x54
 800685a:	81a3      	strhlt	r3, [r4, #12]
 800685c:	bd10      	pop	{r4, pc}

0800685e <__swrite>:
 800685e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006862:	461f      	mov	r7, r3
 8006864:	898b      	ldrh	r3, [r1, #12]
 8006866:	05db      	lsls	r3, r3, #23
 8006868:	4605      	mov	r5, r0
 800686a:	460c      	mov	r4, r1
 800686c:	4616      	mov	r6, r2
 800686e:	d505      	bpl.n	800687c <__swrite+0x1e>
 8006870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006874:	2302      	movs	r3, #2
 8006876:	2200      	movs	r2, #0
 8006878:	f000 f868 	bl	800694c <_lseek_r>
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006882:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	4632      	mov	r2, r6
 800688a:	463b      	mov	r3, r7
 800688c:	4628      	mov	r0, r5
 800688e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006892:	f000 b817 	b.w	80068c4 <_write_r>

08006896 <__sseek>:
 8006896:	b510      	push	{r4, lr}
 8006898:	460c      	mov	r4, r1
 800689a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800689e:	f000 f855 	bl	800694c <_lseek_r>
 80068a2:	1c43      	adds	r3, r0, #1
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	bf15      	itete	ne
 80068a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80068aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068b2:	81a3      	strheq	r3, [r4, #12]
 80068b4:	bf18      	it	ne
 80068b6:	81a3      	strhne	r3, [r4, #12]
 80068b8:	bd10      	pop	{r4, pc}

080068ba <__sclose>:
 80068ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068be:	f000 b813 	b.w	80068e8 <_close_r>
	...

080068c4 <_write_r>:
 80068c4:	b538      	push	{r3, r4, r5, lr}
 80068c6:	4d07      	ldr	r5, [pc, #28]	; (80068e4 <_write_r+0x20>)
 80068c8:	4604      	mov	r4, r0
 80068ca:	4608      	mov	r0, r1
 80068cc:	4611      	mov	r1, r2
 80068ce:	2200      	movs	r2, #0
 80068d0:	602a      	str	r2, [r5, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	f7fa fcc2 	bl	800125c <_write>
 80068d8:	1c43      	adds	r3, r0, #1
 80068da:	d102      	bne.n	80068e2 <_write_r+0x1e>
 80068dc:	682b      	ldr	r3, [r5, #0]
 80068de:	b103      	cbz	r3, 80068e2 <_write_r+0x1e>
 80068e0:	6023      	str	r3, [r4, #0]
 80068e2:	bd38      	pop	{r3, r4, r5, pc}
 80068e4:	20004098 	.word	0x20004098

080068e8 <_close_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4d06      	ldr	r5, [pc, #24]	; (8006904 <_close_r+0x1c>)
 80068ec:	2300      	movs	r3, #0
 80068ee:	4604      	mov	r4, r0
 80068f0:	4608      	mov	r0, r1
 80068f2:	602b      	str	r3, [r5, #0]
 80068f4:	f7fa fcce 	bl	8001294 <_close>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	d102      	bne.n	8006902 <_close_r+0x1a>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	b103      	cbz	r3, 8006902 <_close_r+0x1a>
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	20004098 	.word	0x20004098

08006908 <_fstat_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4d07      	ldr	r5, [pc, #28]	; (8006928 <_fstat_r+0x20>)
 800690c:	2300      	movs	r3, #0
 800690e:	4604      	mov	r4, r0
 8006910:	4608      	mov	r0, r1
 8006912:	4611      	mov	r1, r2
 8006914:	602b      	str	r3, [r5, #0]
 8006916:	f7fa fcc9 	bl	80012ac <_fstat>
 800691a:	1c43      	adds	r3, r0, #1
 800691c:	d102      	bne.n	8006924 <_fstat_r+0x1c>
 800691e:	682b      	ldr	r3, [r5, #0]
 8006920:	b103      	cbz	r3, 8006924 <_fstat_r+0x1c>
 8006922:	6023      	str	r3, [r4, #0]
 8006924:	bd38      	pop	{r3, r4, r5, pc}
 8006926:	bf00      	nop
 8006928:	20004098 	.word	0x20004098

0800692c <_isatty_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d06      	ldr	r5, [pc, #24]	; (8006948 <_isatty_r+0x1c>)
 8006930:	2300      	movs	r3, #0
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	602b      	str	r3, [r5, #0]
 8006938:	f7fa fcc8 	bl	80012cc <_isatty>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_isatty_r+0x1a>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_isatty_r+0x1a>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	20004098 	.word	0x20004098

0800694c <_lseek_r>:
 800694c:	b538      	push	{r3, r4, r5, lr}
 800694e:	4d07      	ldr	r5, [pc, #28]	; (800696c <_lseek_r+0x20>)
 8006950:	4604      	mov	r4, r0
 8006952:	4608      	mov	r0, r1
 8006954:	4611      	mov	r1, r2
 8006956:	2200      	movs	r2, #0
 8006958:	602a      	str	r2, [r5, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	f7fa fcc1 	bl	80012e2 <_lseek>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d102      	bne.n	800696a <_lseek_r+0x1e>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	b103      	cbz	r3, 800696a <_lseek_r+0x1e>
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	20004098 	.word	0x20004098

08006970 <__malloc_lock>:
 8006970:	4801      	ldr	r0, [pc, #4]	; (8006978 <__malloc_lock+0x8>)
 8006972:	f7ff bb1d 	b.w	8005fb0 <__retarget_lock_acquire_recursive>
 8006976:	bf00      	nop
 8006978:	2000408c 	.word	0x2000408c

0800697c <__malloc_unlock>:
 800697c:	4801      	ldr	r0, [pc, #4]	; (8006984 <__malloc_unlock+0x8>)
 800697e:	f7ff bb18 	b.w	8005fb2 <__retarget_lock_release_recursive>
 8006982:	bf00      	nop
 8006984:	2000408c 	.word	0x2000408c

08006988 <_read_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4d07      	ldr	r5, [pc, #28]	; (80069a8 <_read_r+0x20>)
 800698c:	4604      	mov	r4, r0
 800698e:	4608      	mov	r0, r1
 8006990:	4611      	mov	r1, r2
 8006992:	2200      	movs	r2, #0
 8006994:	602a      	str	r2, [r5, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	f7fa fc43 	bl	8001222 <_read>
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	d102      	bne.n	80069a6 <_read_r+0x1e>
 80069a0:	682b      	ldr	r3, [r5, #0]
 80069a2:	b103      	cbz	r3, 80069a6 <_read_r+0x1e>
 80069a4:	6023      	str	r3, [r4, #0]
 80069a6:	bd38      	pop	{r3, r4, r5, pc}
 80069a8:	20004098 	.word	0x20004098

080069ac <_init>:
 80069ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ae:	bf00      	nop
 80069b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069b2:	bc08      	pop	{r3}
 80069b4:	469e      	mov	lr, r3
 80069b6:	4770      	bx	lr

080069b8 <_fini>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	bf00      	nop
 80069bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069be:	bc08      	pop	{r3}
 80069c0:	469e      	mov	lr, r3
 80069c2:	4770      	bx	lr
