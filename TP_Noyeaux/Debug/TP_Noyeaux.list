
TP_Noyeaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080063c4  080063c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d0  080064d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080064d0  080064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064d8  080064d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064dc  080064dc  000164dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080064e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040bc  20000074  08006554  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004130  08006554  00024130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c8a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000323f  00000000  00000000  00035d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00038f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003a268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b00  00000000  00000000  0003b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c9b  00000000  00000000  00063ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9e7a  00000000  00000000  0007ab93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00174a0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005440  00000000  00000000  00174a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080063ac 	.word	0x080063ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080063ac 	.word	0x080063ac

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000094 	.word	0x20000094
 8000544:	200000e8 	.word	0x200000e8

08000548 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <MX_FREERTOS_Init+0x30>)
 8000550:	1d3c      	adds	r4, r7, #4
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f003 fdf0 	bl	800414a <osThreadCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <MX_FREERTOS_Init+0x34>)
 800056e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bdb0      	pop	{r4, r5, r7, pc}
 8000578:	080063d0 	.word	0x080063d0
 800057c:	20000090 	.word	0x20000090

08000580 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f003 fe2a 	bl	80041e2 <osDelay>
 800058e:	e7fb      	b.n	8000588 <StartDefaultTask+0x8>

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <MX_GPIO_Init+0x5c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a14      	ldr	r2, [pc, #80]	; (80005ec <MX_GPIO_Init+0x5c>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <MX_GPIO_Init+0x5c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_GPIO_Init+0x5c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <MX_GPIO_Init+0x5c>)
 80005b4:	f043 0302 	orr.w	r3, r3, #2
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_GPIO_Init+0x5c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_GPIO_Init+0x5c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <MX_GPIO_Init+0x5c>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_GPIO_Init+0x5c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800

080005f0 <USART1_IRQHandler>:

uint8_t input_char;
TaskHandle_t h_task_usart1 = NULL;
TaskHandle_t h_task_tim1 = NULL;
/* New character on USART1 */
void USART1_IRQHandler(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	BaseType_t higher_priority_task_woken = pdFALSE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
	vTaskNotifyGiveFromISR(h_task_usart1,
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <USART1_IRQHandler+0x48>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	1d3a      	adds	r2, r7, #4
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f004 fc8a 	bl	8004f1c <vTaskNotifyGiveFromISR>
	&higher_priority_task_woken);
	HAL_UART_Receive_IT(&huart1, &input_char, 1);
 8000608:	2201      	movs	r2, #1
 800060a:	490c      	ldr	r1, [pc, #48]	; (800063c <USART1_IRQHandler+0x4c>)
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <USART1_IRQHandler+0x50>)
 800060e:	f002 fb68 	bl	8002ce2 <HAL_UART_Receive_IT>
	HAL_UART_IRQHandler(&huart1);
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <USART1_IRQHandler+0x50>)
 8000614:	f002 fbaa 	bl	8002d6c <HAL_UART_IRQHandler>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d007      	beq.n	800062e <USART1_IRQHandler+0x3e>
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <USART1_IRQHandler+0x54>)
 8000620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	f3bf 8f4f 	dsb	sy
 800062a:	f3bf 8f6f 	isb	sy
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200002ec 	.word	0x200002ec
 800063c:	200002e8 	.word	0x200002e8
 8000640:	20000348 	.word	0x20000348
 8000644:	e000ed04 	.word	0xe000ed04

08000648 <taskGive>:
 */

TaskHandle_t xHandleGive = NULL;
TaskHandle_t xHandleTake = NULL;

void taskGive(void *p){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

	for(;;){
		printf("Avant sem Give \r\n");
 8000650:	4808      	ldr	r0, [pc, #32]	; (8000674 <taskGive+0x2c>)
 8000652:	f005 fa1b 	bl	8005a8c <puts>
		xTaskNotifyGive(xHandleTake);
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <taskGive+0x30>)
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	2202      	movs	r2, #2
 800065e:	2100      	movs	r1, #0
 8000660:	f004 fba0 	bl	8004da4 <xTaskGenericNotify>
		printf("Apres sem Give \r\n");
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <taskGive+0x34>)
 8000666:	f005 fa11 	bl	8005a8c <puts>

		vTaskDelay(1000);
 800066a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066e:	f004 f81b 	bl	80046a8 <vTaskDelay>
	for(;;){
 8000672:	e7ed      	b.n	8000650 <taskGive+0x8>
 8000674:	080063ec 	.word	0x080063ec
 8000678:	200002f4 	.word	0x200002f4
 800067c:	08006400 	.word	0x08006400

08000680 <taskTake>:

	}

}

void taskTake(void *p){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	for(;;){
		printf("avant sem prendre \r\n");
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <taskTake+0x20>)
 800068a:	f005 f9ff 	bl	8005a8c <puts>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800068e:	f04f 31ff 	mov.w	r1, #4294967295
 8000692:	2001      	movs	r0, #1
 8000694:	f004 fb3e 	bl	8004d14 <ulTaskNotifyTake>
		printf("apres sem prendre \r\n");
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <taskTake+0x24>)
 800069a:	f005 f9f7 	bl	8005a8c <puts>
	for(;;){
 800069e:	e7f3      	b.n	8000688 <taskTake+0x8>
 80006a0:	08006414 	.word	0x08006414
 80006a4:	08006428 	.word	0x08006428

080006a8 <__io_putchar>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int __io_putchar(int ch) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	2201      	movs	r2, #1
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <__io_putchar+0x20>)
 80006ba:	f002 fa8f 	bl	8002bdc <HAL_UART_Transmit>
	return ch;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000348 	.word	0x20000348

080006cc <main>:
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle1 = NULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006d6:	f000 fb0a 	bl	8000cee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006da:	f000 f82f 	bl	800073c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006de:	f7ff ff57 	bl	8000590 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80006e2:	f000 fa29 	bl	8000b38 <MX_USART1_UART_Init>
	//    STACK_SIZE, /* Stack size in words, not bytes. */
	//    (void *) DELAY_1, /* Parameter passed into the task. */
	//    tskIDLE_PRIORITY,/* Priority at which the task is created. */
	//    &xHandle1 ); /* Used to pass out the created task's handle. */

	xReturned = xTaskCreate(
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <main+0x58>)
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	2301      	movs	r3, #1
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2300      	movs	r3, #0
 80006f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <main+0x5c>)
 80006f6:	480d      	ldr	r0, [pc, #52]	; (800072c <main+0x60>)
 80006f8:	f003 fe9e 	bl	8004438 <xTaskCreate>
 80006fc:	6038      	str	r0, [r7, #0]
			STACK_SIZE, /* Stack size in words, not bytes. */
			NULL, /* Parameter passed into the task. */
			tskIDLE_PRIORITY+1,/* Priority at which the task is created. */
			&xHandleGive ); /* Used to pass out the created task's handle. */

	xReturned = xTaskCreate(
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <main+0x64>)
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	2302      	movs	r3, #2
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2300      	movs	r3, #0
 8000708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800070c:	4909      	ldr	r1, [pc, #36]	; (8000734 <main+0x68>)
 800070e:	480a      	ldr	r0, [pc, #40]	; (8000738 <main+0x6c>)
 8000710:	f003 fe92 	bl	8004438 <xTaskCreate>
 8000714:	6038      	str	r0, [r7, #0]
			STACK_SIZE, /* Stack size in words, not bytes. */
			NULL, /* Parameter passed into the task. */
			tskIDLE_PRIORITY+2,/* Priority at which the task is created. */
			&xHandleTake ); /* Used to pass out the created task's handle. */

	vTaskStartScheduler();
 8000716:	f003 fffd 	bl	8004714 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800071a:	f7ff ff15 	bl	8000548 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800071e:	f003 fd0d 	bl	800413c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000722:	e7fe      	b.n	8000722 <main+0x56>
 8000724:	200002f0 	.word	0x200002f0
 8000728:	0800643c 	.word	0x0800643c
 800072c:	08000649 	.word	0x08000649
 8000730:	200002f4 	.word	0x200002f4
 8000734:	08006444 	.word	0x08006444
 8000738:	08000681 	.word	0x08000681

0800073c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f005 f928 	bl	80059a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <SystemClock_Config+0xd4>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a2a      	ldr	r2, [pc, #168]	; (8000810 <SystemClock_Config+0xd4>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <SystemClock_Config+0xd4>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <SystemClock_Config+0xd8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a25      	ldr	r2, [pc, #148]	; (8000814 <SystemClock_Config+0xd8>)
 800077e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <SystemClock_Config+0xd8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80007a4:	2319      	movs	r3, #25
 80007a6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 432;
 80007a8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80007ac:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fe34 	bl	8001428 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80007c6:	f000 f839 	bl	800083c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ca:	f000 fddd 	bl	8001388 <HAL_PWREx_EnableOverDrive>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80007d4:	f000 f832 	bl	800083c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2302      	movs	r3, #2
 80007de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2107      	movs	r1, #7
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 f8ba 	bl	8001970 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000802:	f000 f81b 	bl	800083c <Error_Handler>
	}
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d101      	bne.n	800082e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800082a:	f000 fa6d 	bl	8000d08 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40001000 	.word	0x40001000

0800083c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <HAL_MspInit+0x4c>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000870:	6453      	str	r3, [r2, #68]	; 0x44
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	210f      	movs	r1, #15
 8000882:	f06f 0001 	mvn.w	r0, #1
 8000886:	f000 fb17 	bl	8000eb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08e      	sub	sp, #56	; 0x38
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008a8:	4b33      	ldr	r3, [pc, #204]	; (8000978 <HAL_InitTick+0xe0>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a32      	ldr	r2, [pc, #200]	; (8000978 <HAL_InitTick+0xe0>)
 80008ae:	f043 0310 	orr.w	r3, r3, #16
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
 80008b4:	4b30      	ldr	r3, [pc, #192]	; (8000978 <HAL_InitTick+0xe0>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	f003 0310 	and.w	r3, r3, #16
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c0:	f107 0210 	add.w	r2, r7, #16
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fa36 	bl	8001d3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008d0:	6a3b      	ldr	r3, [r7, #32]
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d103      	bne.n	80008e2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008da:	f001 fa07 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 80008de:	6378      	str	r0, [r7, #52]	; 0x34
 80008e0:	e004      	b.n	80008ec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008e2:	f001 fa03 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 80008e6:	4603      	mov	r3, r0
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ee:	4a23      	ldr	r2, [pc, #140]	; (800097c <HAL_InitTick+0xe4>)
 80008f0:	fba2 2303 	umull	r2, r3, r2, r3
 80008f4:	0c9b      	lsrs	r3, r3, #18
 80008f6:	3b01      	subs	r3, #1
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <HAL_InitTick+0xe8>)
 80008fc:	4a21      	ldr	r2, [pc, #132]	; (8000984 <HAL_InitTick+0xec>)
 80008fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <HAL_InitTick+0xe8>)
 8000902:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000906:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000908:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <HAL_InitTick+0xe8>)
 800090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <HAL_InitTick+0xe8>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <HAL_InitTick+0xe8>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <HAL_InitTick+0xe8>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000920:	4817      	ldr	r0, [pc, #92]	; (8000980 <HAL_InitTick+0xe8>)
 8000922:	f001 fe2d 	bl	8002580 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800092c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000930:	2b00      	cmp	r3, #0
 8000932:	d11b      	bne.n	800096c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <HAL_InitTick+0xe8>)
 8000936:	f001 fe85 	bl	8002644 <HAL_TIM_Base_Start_IT>
 800093a:	4603      	mov	r3, r0
 800093c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000940:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000944:	2b00      	cmp	r3, #0
 8000946:	d111      	bne.n	800096c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000948:	2036      	movs	r0, #54	; 0x36
 800094a:	f000 fad1 	bl	8000ef0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d808      	bhi.n	8000966 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	2036      	movs	r0, #54	; 0x36
 800095a:	f000 faad 	bl	8000eb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_InitTick+0xf0>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	e002      	b.n	800096c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800096c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000970:	4618      	mov	r0, r3
 8000972:	3738      	adds	r7, #56	; 0x38
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	431bde83 	.word	0x431bde83
 8000980:	200002f8 	.word	0x200002f8
 8000984:	40001000 	.word	0x40001000
 8000988:	20000004 	.word	0x20000004

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <TIM6_DAC_IRQHandler+0x10>)
 80009be:	f001 feb9 	bl	8002734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200002f8 	.word	0x200002f8

080009cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e00a      	b.n	80009f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009de:	f3af 8000 	nop.w
 80009e2:	4601      	mov	r1, r0
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	60ba      	str	r2, [r7, #8]
 80009ea:	b2ca      	uxtb	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dbf0      	blt.n	80009de <_read+0x12>
  }

  return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e009      	b.n	8000a2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1c5a      	adds	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fe41 	bl	80006a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf1      	blt.n	8000a18 <_write+0x12>
  }
  return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_close>:

int _close(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a66:	605a      	str	r2, [r3, #4]
  return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_isatty>:

int _isatty(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f004 ff38 	bl	800594c <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20050000 	.word	0x20050000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	20000344 	.word	0x20000344
 8000b10:	20004130 	.word	0x20004130

08000b14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <MX_USART1_UART_Init+0x5c>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b7c:	f001 ffe0 	bl	8002b40 <HAL_UART_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b86:	f7ff fe59 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000348 	.word	0x20000348
 8000b94:	40011000 	.word	0x40011000

08000b98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0ac      	sub	sp, #176	; 0xb0
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb0:	f107 0318 	add.w	r3, r7, #24
 8000bb4:	2284      	movs	r2, #132	; 0x84
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f004 fef1 	bl	80059a0 <memset>
  if(uartHandle->Instance==USART1)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a32      	ldr	r2, [pc, #200]	; (8000c8c <HAL_UART_MspInit+0xf4>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d15c      	bne.n	8000c82 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bc8:	2340      	movs	r3, #64	; 0x40
 8000bca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd0:	f107 0318 	add.w	r3, r7, #24
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 f8e3 	bl	8001da0 <HAL_RCCEx_PeriphCLKConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be0:	f7ff fe2c 	bl	800083c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be4:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <HAL_UART_MspInit+0xf8>)
 8000be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be8:	4a29      	ldr	r2, [pc, #164]	; (8000c90 <HAL_UART_MspInit+0xf8>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf0:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <HAL_UART_MspInit+0xf8>)
 8000bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf4:	f003 0310 	and.w	r3, r3, #16
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfc:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <HAL_UART_MspInit+0xf8>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <HAL_UART_MspInit+0xf8>)
 8000c02:	f043 0302 	orr.w	r3, r3, #2
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30
 8000c08:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <HAL_UART_MspInit+0xf8>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f003 0302 	and.w	r3, r3, #2
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <HAL_UART_MspInit+0xf8>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <HAL_UART_MspInit+0xf8>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <HAL_UART_MspInit+0xf8>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c44:	2307      	movs	r3, #7
 8000c46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4810      	ldr	r0, [pc, #64]	; (8000c94 <HAL_UART_MspInit+0xfc>)
 8000c52:	f000 f9ed 	bl	8001030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c70:	2307      	movs	r3, #7
 8000c72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4806      	ldr	r0, [pc, #24]	; (8000c98 <HAL_UART_MspInit+0x100>)
 8000c7e:	f000 f9d7 	bl	8001030 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c82:	bf00      	nop
 8000c84:	37b0      	adds	r7, #176	; 0xb0
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020400 	.word	0x40020400
 8000c98:	40020000 	.word	0x40020000

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca2:	490e      	ldr	r1, [pc, #56]	; (8000cdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc6:	f7ff ff25 	bl	8000b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cca:	f004 fe45 	bl	8005958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fcfd 	bl	80006cc <main>
  bx  lr    
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ce0:	080064e0 	.word	0x080064e0
  ldr r2, =_sbss
 8000ce4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ce8:	20004130 	.word	0x20004130

08000cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>

08000cee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f000 f8d5 	bl	8000ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf8:	200f      	movs	r0, #15
 8000cfa:	f7ff fdcd 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfe:	f7ff fda3 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	200003d0 	.word	0x200003d0

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200003d0 	.word	0x200003d0

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <__NVIC_SetPriorityGrouping+0x40>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	4313      	orrs	r3, r2
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x40>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00
 8000d8c:	05fa0000 	.word	0x05fa0000

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ff4c 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eca:	f7ff ff61 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000ece:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f7ff ffb1 	bl	8000e3c <NVIC_EncodePriority>
 8000eda:	4602      	mov	r2, r0
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff80 	bl	8000de8 <__NVIC_SetPriority>
}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff54 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f1a:	f7ff ff09 	bl	8000d30 <HAL_GetTick>
 8000f1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d008      	beq.n	8000f3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e052      	b.n	8000fe4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0216 	bic.w	r2, r2, #22
 8000f4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	695a      	ldr	r2, [r3, #20]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d103      	bne.n	8000f6e <HAL_DMA_Abort+0x62>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d007      	beq.n	8000f7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0208 	bic.w	r2, r2, #8
 8000f7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0201 	bic.w	r2, r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f8e:	e013      	b.n	8000fb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f90:	f7ff fece 	bl	8000d30 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d90c      	bls.n	8000fb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e015      	b.n	8000fe4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1e4      	bne.n	8000f90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fca:	223f      	movs	r2, #63	; 0x3f
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d004      	beq.n	800100a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00c      	b.n	8001024 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2205      	movs	r2, #5
 800100e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0201 	bic.w	r2, r2, #1
 8001020:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	e175      	b.n	800133c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001050:	2201      	movs	r2, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	429a      	cmp	r2, r3
 800106a:	f040 8164 	bne.w	8001336 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b01      	cmp	r3, #1
 8001078:	d005      	beq.n	8001086 <HAL_GPIO_Init+0x56>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d130      	bne.n	80010e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010bc:	2201      	movs	r2, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	f003 0201 	and.w	r2, r3, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d017      	beq.n	8001124 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d123      	bne.n	8001178 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	220f      	movs	r2, #15
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	691a      	ldr	r2, [r3, #16]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	08da      	lsrs	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3208      	adds	r2, #8
 8001172:	69b9      	ldr	r1, [r7, #24]
 8001174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0203 	and.w	r2, r3, #3
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80be 	beq.w	8001336 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	4b66      	ldr	r3, [pc, #408]	; (8001354 <HAL_GPIO_Init+0x324>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a65      	ldr	r2, [pc, #404]	; (8001354 <HAL_GPIO_Init+0x324>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b63      	ldr	r3, [pc, #396]	; (8001354 <HAL_GPIO_Init+0x324>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011d2:	4a61      	ldr	r2, [pc, #388]	; (8001358 <HAL_GPIO_Init+0x328>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a58      	ldr	r2, [pc, #352]	; (800135c <HAL_GPIO_Init+0x32c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d037      	beq.n	800126e <HAL_GPIO_Init+0x23e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a57      	ldr	r2, [pc, #348]	; (8001360 <HAL_GPIO_Init+0x330>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d031      	beq.n	800126a <HAL_GPIO_Init+0x23a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a56      	ldr	r2, [pc, #344]	; (8001364 <HAL_GPIO_Init+0x334>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d02b      	beq.n	8001266 <HAL_GPIO_Init+0x236>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a55      	ldr	r2, [pc, #340]	; (8001368 <HAL_GPIO_Init+0x338>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x232>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a54      	ldr	r2, [pc, #336]	; (800136c <HAL_GPIO_Init+0x33c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x22e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a53      	ldr	r2, [pc, #332]	; (8001370 <HAL_GPIO_Init+0x340>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x22a>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a52      	ldr	r2, [pc, #328]	; (8001374 <HAL_GPIO_Init+0x344>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x226>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a51      	ldr	r2, [pc, #324]	; (8001378 <HAL_GPIO_Init+0x348>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x222>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a50      	ldr	r2, [pc, #320]	; (800137c <HAL_GPIO_Init+0x34c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x21e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4f      	ldr	r2, [pc, #316]	; (8001380 <HAL_GPIO_Init+0x350>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x21a>
 8001246:	2309      	movs	r3, #9
 8001248:	e012      	b.n	8001270 <HAL_GPIO_Init+0x240>
 800124a:	230a      	movs	r3, #10
 800124c:	e010      	b.n	8001270 <HAL_GPIO_Init+0x240>
 800124e:	2308      	movs	r3, #8
 8001250:	e00e      	b.n	8001270 <HAL_GPIO_Init+0x240>
 8001252:	2307      	movs	r3, #7
 8001254:	e00c      	b.n	8001270 <HAL_GPIO_Init+0x240>
 8001256:	2306      	movs	r3, #6
 8001258:	e00a      	b.n	8001270 <HAL_GPIO_Init+0x240>
 800125a:	2305      	movs	r3, #5
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x240>
 800125e:	2304      	movs	r3, #4
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x240>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x240>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x240>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x240>
 800126e:	2300      	movs	r3, #0
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f002 0203 	and.w	r2, r2, #3
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001280:	4935      	ldr	r1, [pc, #212]	; (8001358 <HAL_GPIO_Init+0x328>)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128e:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <HAL_GPIO_Init+0x354>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012b2:	4a34      	ldr	r2, [pc, #208]	; (8001384 <HAL_GPIO_Init+0x354>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b8:	4b32      	ldr	r3, [pc, #200]	; (8001384 <HAL_GPIO_Init+0x354>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012dc:	4a29      	ldr	r2, [pc, #164]	; (8001384 <HAL_GPIO_Init+0x354>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012e2:	4b28      	ldr	r3, [pc, #160]	; (8001384 <HAL_GPIO_Init+0x354>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001306:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <HAL_GPIO_Init+0x354>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_GPIO_Init+0x354>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <HAL_GPIO_Init+0x354>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3301      	adds	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	f67f ae86 	bls.w	8001050 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40013800 	.word	0x40013800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40021400 	.word	0x40021400
 8001374:	40021800 	.word	0x40021800
 8001378:	40021c00 	.word	0x40021c00
 800137c:	40022000 	.word	0x40022000
 8001380:	40022400 	.word	0x40022400
 8001384:	40013c00 	.word	0x40013c00

08001388 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <HAL_PWREx_EnableOverDrive+0x98>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a22      	ldr	r2, [pc, #136]	; (8001420 <HAL_PWREx_EnableOverDrive+0x98>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <HAL_PWREx_EnableOverDrive+0x98>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013b6:	f7ff fcbb 	bl	8000d30 <HAL_GetTick>
 80013ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013bc:	e009      	b.n	80013d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013be:	f7ff fcb7 	bl	8000d30 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013cc:	d901      	bls.n	80013d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e022      	b.n	8001418 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013de:	d1ee      	bne.n	80013be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013ec:	f7ff fca0 	bl	8000d30 <HAL_GetTick>
 80013f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013f2:	e009      	b.n	8001408 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013f4:	f7ff fc9c 	bl	8000d30 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001402:	d901      	bls.n	8001408 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e007      	b.n	8001418 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_PWREx_EnableOverDrive+0x9c>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001414:	d1ee      	bne.n	80013f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000

08001428 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e291      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8087 	beq.w	800155a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800144c:	4b96      	ldr	r3, [pc, #600]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	2b04      	cmp	r3, #4
 8001456:	d00c      	beq.n	8001472 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001458:	4b93      	ldr	r3, [pc, #588]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	2b08      	cmp	r3, #8
 8001462:	d112      	bne.n	800148a <HAL_RCC_OscConfig+0x62>
 8001464:	4b90      	ldr	r3, [pc, #576]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001470:	d10b      	bne.n	800148a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001472:	4b8d      	ldr	r3, [pc, #564]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d06c      	beq.n	8001558 <HAL_RCC_OscConfig+0x130>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d168      	bne.n	8001558 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e26b      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001492:	d106      	bne.n	80014a2 <HAL_RCC_OscConfig+0x7a>
 8001494:	4b84      	ldr	r3, [pc, #528]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a83      	ldr	r2, [pc, #524]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 800149a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	e02e      	b.n	8001500 <HAL_RCC_OscConfig+0xd8>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x9c>
 80014aa:	4b7f      	ldr	r3, [pc, #508]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a7e      	ldr	r2, [pc, #504]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80014b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4b7c      	ldr	r3, [pc, #496]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a7b      	ldr	r2, [pc, #492]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80014bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e01d      	b.n	8001500 <HAL_RCC_OscConfig+0xd8>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0xc0>
 80014ce:	4b76      	ldr	r3, [pc, #472]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a75      	ldr	r2, [pc, #468]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a72      	ldr	r2, [pc, #456]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0xd8>
 80014e8:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a6e      	ldr	r2, [pc, #440]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80014ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b6c      	ldr	r3, [pc, #432]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a6b      	ldr	r2, [pc, #428]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80014fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d013      	beq.n	8001530 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fc12 	bl	8000d30 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fc0e 	bl	8000d30 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e21f      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0xe8>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fbfe 	bl	8000d30 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fbfa 	bl	8000d30 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e20b      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	4b57      	ldr	r3, [pc, #348]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x110>
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d069      	beq.n	800163a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001566:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00b      	beq.n	800158a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001572:	4b4d      	ldr	r3, [pc, #308]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b08      	cmp	r3, #8
 800157c:	d11c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x190>
 800157e:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d116      	bne.n	80015b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <HAL_RCC_OscConfig+0x17a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d001      	beq.n	80015a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e1df      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a2:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	493d      	ldr	r1, [pc, #244]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b6:	e040      	b.n	800163a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d023      	beq.n	8001608 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c0:	4b39      	ldr	r3, [pc, #228]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a38      	ldr	r2, [pc, #224]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fbb0 	bl	8000d30 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fbac 	bl	8000d30 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1bd      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e6:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4929      	ldr	r1, [pc, #164]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
 8001606:	e018      	b.n	800163a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fb8c 	bl	8000d30 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161c:	f7ff fb88 	bl	8000d30 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e199      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d038      	beq.n	80016b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d019      	beq.n	8001682 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001652:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165a:	f7ff fb69 	bl	8000d30 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001662:	f7ff fb65 	bl	8000d30 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e176      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x23a>
 8001680:	e01a      	b.n	80016b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168e:	f7ff fb4f 	bl	8000d30 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001696:	f7ff fb4b 	bl	8000d30 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d903      	bls.n	80016ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e15c      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
 80016a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	4b91      	ldr	r3, [pc, #580]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 80016ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ee      	bne.n	8001696 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80a4 	beq.w	800180e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c6:	4b8b      	ldr	r3, [pc, #556]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10d      	bne.n	80016ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b88      	ldr	r3, [pc, #544]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a87      	ldr	r2, [pc, #540]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b85      	ldr	r3, [pc, #532]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ea:	2301      	movs	r3, #1
 80016ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ee:	4b82      	ldr	r3, [pc, #520]	; (80018f8 <HAL_RCC_OscConfig+0x4d0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d118      	bne.n	800172c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016fa:	4b7f      	ldr	r3, [pc, #508]	; (80018f8 <HAL_RCC_OscConfig+0x4d0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a7e      	ldr	r2, [pc, #504]	; (80018f8 <HAL_RCC_OscConfig+0x4d0>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001706:	f7ff fb13 	bl	8000d30 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170e:	f7ff fb0f 	bl	8000d30 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b64      	cmp	r3, #100	; 0x64
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e120      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001720:	4b75      	ldr	r3, [pc, #468]	; (80018f8 <HAL_RCC_OscConfig+0x4d0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d106      	bne.n	8001742 <HAL_RCC_OscConfig+0x31a>
 8001734:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	4a6e      	ldr	r2, [pc, #440]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6713      	str	r3, [r2, #112]	; 0x70
 8001740:	e02d      	b.n	800179e <HAL_RCC_OscConfig+0x376>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x33c>
 800174a:	4b6a      	ldr	r3, [pc, #424]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174e:	4a69      	ldr	r2, [pc, #420]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	6713      	str	r3, [r2, #112]	; 0x70
 8001756:	4b67      	ldr	r3, [pc, #412]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	4a66      	ldr	r2, [pc, #408]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 800175c:	f023 0304 	bic.w	r3, r3, #4
 8001760:	6713      	str	r3, [r2, #112]	; 0x70
 8001762:	e01c      	b.n	800179e <HAL_RCC_OscConfig+0x376>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b05      	cmp	r3, #5
 800176a:	d10c      	bne.n	8001786 <HAL_RCC_OscConfig+0x35e>
 800176c:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	4a60      	ldr	r2, [pc, #384]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6713      	str	r3, [r2, #112]	; 0x70
 8001778:	4b5e      	ldr	r3, [pc, #376]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177c:	4a5d      	ldr	r2, [pc, #372]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6713      	str	r3, [r2, #112]	; 0x70
 8001784:	e00b      	b.n	800179e <HAL_RCC_OscConfig+0x376>
 8001786:	4b5b      	ldr	r3, [pc, #364]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	4a5a      	ldr	r2, [pc, #360]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6713      	str	r3, [r2, #112]	; 0x70
 8001792:	4b58      	ldr	r3, [pc, #352]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	4a57      	ldr	r2, [pc, #348]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001798:	f023 0304 	bic.w	r3, r3, #4
 800179c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d015      	beq.n	80017d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a6:	f7ff fac3 	bl	8000d30 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7ff fabf 	bl	8000d30 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e0ce      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c4:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0ee      	beq.n	80017ae <HAL_RCC_OscConfig+0x386>
 80017d0:	e014      	b.n	80017fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d2:	f7ff faad 	bl	8000d30 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d8:	e00a      	b.n	80017f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7ff faa9 	bl	8000d30 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e0b8      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f0:	4b40      	ldr	r3, [pc, #256]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1ee      	bne.n	80017da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d105      	bne.n	800180e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001802:	4b3c      	ldr	r3, [pc, #240]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a3b      	ldr	r2, [pc, #236]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80a4 	beq.w	8001960 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b08      	cmp	r3, #8
 8001822:	d06b      	beq.n	80018fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d149      	bne.n	80018c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182c:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a30      	ldr	r2, [pc, #192]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fa7a 	bl	8000d30 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff fa76 	bl	8000d30 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e087      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001852:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69da      	ldr	r2, [r3, #28]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	019b      	lsls	r3, r3, #6
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	085b      	lsrs	r3, r3, #1
 8001876:	3b01      	subs	r3, #1
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	061b      	lsls	r3, r3, #24
 8001882:	4313      	orrs	r3, r2
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001886:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800188a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fa4a 	bl	8000d30 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff fa46 	bl	8000d30 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e057      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x478>
 80018be:	e04f      	b.n	8001960 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 80018c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff fa30 	bl	8000d30 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff fa2c 	bl	8000d30 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e03d      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e6:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4ac>
 80018f2:	e035      	b.n	8001960 <HAL_RCC_OscConfig+0x538>
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_RCC_OscConfig+0x544>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d028      	beq.n	800195c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d121      	bne.n	800195c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d11a      	bne.n	800195c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800192c:	4013      	ands	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001932:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001934:	4293      	cmp	r3, r2
 8001936:	d111      	bne.n	800195c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	3b01      	subs	r3, #1
 8001946:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d107      	bne.n	800195c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0d0      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b6a      	ldr	r3, [pc, #424]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d910      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b67      	ldr	r3, [pc, #412]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 020f 	bic.w	r2, r3, #15
 800199e:	4965      	ldr	r1, [pc, #404]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b63      	ldr	r3, [pc, #396]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0b8      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d0:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4a58      	ldr	r2, [pc, #352]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 80019d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4a52      	ldr	r2, [pc, #328]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 80019ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f4:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	494d      	ldr	r1, [pc, #308]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d040      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d107      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d115      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e07f      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e073      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e06b      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a52:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f023 0203 	bic.w	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4936      	ldr	r1, [pc, #216]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a64:	f7ff f964 	bl	8000d30 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6c:	f7ff f960 	bl	8000d30 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e053      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 020c 	and.w	r2, r3, #12
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d1eb      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a94:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d210      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 020f 	bic.w	r2, r3, #15
 8001aaa:	4922      	ldr	r1, [pc, #136]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e032      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4916      	ldr	r1, [pc, #88]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	490e      	ldr	r1, [pc, #56]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b02:	f000 f821 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8001b06:	4602      	mov	r2, r0
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	490a      	ldr	r1, [pc, #40]	; (8001b3c <HAL_RCC_ClockConfig+0x1cc>)
 8001b14:	5ccb      	ldrb	r3, [r1, r3]
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1d0>)
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x1d4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe feb8 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023c00 	.word	0x40023c00
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	08006454 	.word	0x08006454
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000004 	.word	0x20000004

08001b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b4c:	b090      	sub	sp, #64	; 0x40
 8001b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
 8001b54:	2300      	movs	r3, #0
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b58:	2300      	movs	r3, #0
 8001b5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b60:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d00d      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x40>
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	f200 80a1 	bhi.w	8001cb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x34>
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d003      	beq.n	8001b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b7a:	e09b      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b7c:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x184>)
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b80:	e09b      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b82:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b86:	e098      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b88:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b92:	4b4d      	ldr	r3, [pc, #308]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d028      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b9e:	4b4a      	ldr	r3, [pc, #296]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	099b      	lsrs	r3, r3, #6
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	623b      	str	r3, [r7, #32]
 8001ba8:	627a      	str	r2, [r7, #36]	; 0x24
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bb4:	fb03 f201 	mul.w	r2, r3, r1
 8001bb8:	2300      	movs	r3, #0
 8001bba:	fb00 f303 	mul.w	r3, r0, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a43      	ldr	r2, [pc, #268]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc2:	fba0 1202 	umull	r1, r2, r0, r2
 8001bc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bc8:	460a      	mov	r2, r1
 8001bca:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bce:	4413      	add	r3, r2
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	61fa      	str	r2, [r7, #28]
 8001bda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001be2:	f7fe fb15 	bl	8000210 <__aeabi_uldivmod>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4613      	mov	r3, r2
 8001bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bee:	e053      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf0:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	099b      	lsrs	r3, r3, #6
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	617a      	str	r2, [r7, #20]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c02:	f04f 0b00 	mov.w	fp, #0
 8001c06:	4652      	mov	r2, sl
 8001c08:	465b      	mov	r3, fp
 8001c0a:	f04f 0000 	mov.w	r0, #0
 8001c0e:	f04f 0100 	mov.w	r1, #0
 8001c12:	0159      	lsls	r1, r3, #5
 8001c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c18:	0150      	lsls	r0, r2, #5
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	ebb2 080a 	subs.w	r8, r2, sl
 8001c22:	eb63 090b 	sbc.w	r9, r3, fp
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c3a:	ebb2 0408 	subs.w	r4, r2, r8
 8001c3e:	eb63 0509 	sbc.w	r5, r3, r9
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	00eb      	lsls	r3, r5, #3
 8001c4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c50:	00e2      	lsls	r2, r4, #3
 8001c52:	4614      	mov	r4, r2
 8001c54:	461d      	mov	r5, r3
 8001c56:	eb14 030a 	adds.w	r3, r4, sl
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	eb45 030b 	adc.w	r3, r5, fp
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c6e:	4629      	mov	r1, r5
 8001c70:	028b      	lsls	r3, r1, #10
 8001c72:	4621      	mov	r1, r4
 8001c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c78:	4621      	mov	r1, r4
 8001c7a:	028a      	lsls	r2, r1, #10
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c82:	2200      	movs	r2, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	60fa      	str	r2, [r7, #12]
 8001c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c8c:	f7fe fac0 	bl	8000210 <__aeabi_uldivmod>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4613      	mov	r3, r2
 8001c96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001ca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cb2:	e002      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x184>)
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3740      	adds	r7, #64	; 0x40
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	00f42400 	.word	0x00f42400
 8001cd0:	017d7840 	.word	0x017d7840

08001cd4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000000 	.word	0x20000000

08001cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cf0:	f7ff fff0 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0a9b      	lsrs	r3, r3, #10
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4903      	ldr	r1, [pc, #12]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08006464 	.word	0x08006464

08001d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d18:	f7ff ffdc 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0b5b      	lsrs	r3, r3, #13
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4903      	ldr	r1, [pc, #12]	; (8001d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	08006464 	.word	0x08006464

08001d3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	220f      	movs	r2, #15
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <HAL_RCC_GetClockConfig+0x60>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 020f 	and.w	r2, r3, #15
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	601a      	str	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40023c00 	.word	0x40023c00

08001da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d012      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001dc8:	4b69      	ldr	r3, [pc, #420]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	4a68      	ldr	r2, [pc, #416]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001dd2:	6093      	str	r3, [r2, #8]
 8001dd4:	4b66      	ldr	r3, [pc, #408]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ddc:	4964      	ldr	r1, [pc, #400]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d017      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dfa:	4b5d      	ldr	r3, [pc, #372]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	4959      	ldr	r1, [pc, #356]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e18:	d101      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d017      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e36:	4b4e      	ldr	r3, [pc, #312]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	494a      	ldr	r1, [pc, #296]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e54:	d101      	bne.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 808b 	beq.w	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	4b3a      	ldr	r3, [pc, #232]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4a39      	ldr	r2, [pc, #228]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e90:	4b37      	ldr	r3, [pc, #220]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e9c:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a34      	ldr	r2, [pc, #208]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea8:	f7fe ff42 	bl	8000d30 <HAL_GetTick>
 8001eac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb0:	f7fe ff3e 	bl	8000d30 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e357      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d035      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d02e      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eec:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f00:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f02:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f0e:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f14:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d114      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe ff06 	bl	8000d30 <HAL_GetTick>
 8001f24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7fe ff02 	bl	8000d30 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e319      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0ee      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f56:	d111      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f66:	400b      	ands	r3, r1
 8001f68:	4901      	ldr	r1, [pc, #4]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40007000 	.word	0x40007000
 8001f78:	0ffffcff 	.word	0x0ffffcff
 8001f7c:	4baa      	ldr	r3, [pc, #680]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4aa9      	ldr	r2, [pc, #676]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f86:	6093      	str	r3, [r2, #8]
 8001f88:	4ba7      	ldr	r3, [pc, #668]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f94:	49a4      	ldr	r1, [pc, #656]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d010      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fa6:	4ba0      	ldr	r3, [pc, #640]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fac:	4a9e      	ldr	r2, [pc, #632]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fb6:	4b9c      	ldr	r3, [pc, #624]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fb8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc0:	4999      	ldr	r1, [pc, #612]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fd4:	4b94      	ldr	r3, [pc, #592]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fe2:	4991      	ldr	r1, [pc, #580]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ff6:	4b8c      	ldr	r3, [pc, #560]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002004:	4988      	ldr	r1, [pc, #544]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002018:	4b83      	ldr	r3, [pc, #524]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002026:	4980      	ldr	r1, [pc, #512]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800203a:	4b7b      	ldr	r3, [pc, #492]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002040:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	4977      	ldr	r1, [pc, #476]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800205c:	4b72      	ldr	r3, [pc, #456]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	f023 0203 	bic.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	496f      	ldr	r1, [pc, #444]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800207e:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002084:	f023 020c 	bic.w	r2, r3, #12
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208c:	4966      	ldr	r1, [pc, #408]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020a0:	4b61      	ldr	r3, [pc, #388]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	495e      	ldr	r1, [pc, #376]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020c2:	4b59      	ldr	r3, [pc, #356]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d0:	4955      	ldr	r1, [pc, #340]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020e4:	4b50      	ldr	r3, [pc, #320]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	494d      	ldr	r1, [pc, #308]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002106:	4b48      	ldr	r3, [pc, #288]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	4944      	ldr	r1, [pc, #272]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002128:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	493c      	ldr	r1, [pc, #240]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800214a:	4b37      	ldr	r3, [pc, #220]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002150:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002158:	4933      	ldr	r1, [pc, #204]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800216c:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002172:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800217a:	492b      	ldr	r1, [pc, #172]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d011      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800218e:	4b26      	ldr	r3, [pc, #152]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002194:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800219c:	4922      	ldr	r1, [pc, #136]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ac:	d101      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80021be:	2301      	movs	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021dc:	4912      	ldr	r1, [pc, #72]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00b      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021f0:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002200:	4909      	ldr	r1, [pc, #36]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d006      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80d9 	beq.w	80023ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800221c:	4b02      	ldr	r3, [pc, #8]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a01      	ldr	r2, [pc, #4]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002222:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002226:	e001      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002228:	40023800 	.word	0x40023800
 800222c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800222e:	f7fe fd7f 	bl	8000d30 <HAL_GetTick>
 8002232:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002236:	f7fe fd7b 	bl	8000d30 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b64      	cmp	r3, #100	; 0x64
 8002242:	d901      	bls.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e194      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002248:	4b6c      	ldr	r3, [pc, #432]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d021      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002264:	2b00      	cmp	r3, #0
 8002266:	d11d      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002268:	4b64      	ldr	r3, [pc, #400]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800226a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800226e:	0c1b      	lsrs	r3, r3, #16
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002276:	4b61      	ldr	r3, [pc, #388]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800227c:	0e1b      	lsrs	r3, r3, #24
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	019a      	lsls	r2, r3, #6
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	041b      	lsls	r3, r3, #16
 800228e:	431a      	orrs	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	061b      	lsls	r3, r3, #24
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	071b      	lsls	r3, r3, #28
 800229c:	4957      	ldr	r1, [pc, #348]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d004      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d02e      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ce:	d129      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022d0:	4b4a      	ldr	r3, [pc, #296]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022de:	4b47      	ldr	r3, [pc, #284]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022e4:	0f1b      	lsrs	r3, r3, #28
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	019a      	lsls	r2, r3, #6
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	041b      	lsls	r3, r3, #16
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	061b      	lsls	r3, r3, #24
 80022fe:	431a      	orrs	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	071b      	lsls	r3, r3, #28
 8002304:	493d      	ldr	r1, [pc, #244]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800230c:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800230e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002312:	f023 021f 	bic.w	r2, r3, #31
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	3b01      	subs	r3, #1
 800231c:	4937      	ldr	r1, [pc, #220]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01d      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002330:	4b32      	ldr	r3, [pc, #200]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002336:	0e1b      	lsrs	r3, r3, #24
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800233e:	4b2f      	ldr	r3, [pc, #188]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002344:	0f1b      	lsrs	r3, r3, #28
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	019a      	lsls	r2, r3, #6
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	041b      	lsls	r3, r3, #16
 8002358:	431a      	orrs	r2, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	431a      	orrs	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	071b      	lsls	r3, r3, #28
 8002364:	4925      	ldr	r1, [pc, #148]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d011      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	019a      	lsls	r2, r3, #6
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	061b      	lsls	r3, r3, #24
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	071b      	lsls	r3, r3, #28
 8002394:	4919      	ldr	r1, [pc, #100]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a16      	ldr	r2, [pc, #88]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a8:	f7fe fcc2 	bl	8000d30 <HAL_GetTick>
 80023ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023b0:	f7fe fcbe 	bl	8000d30 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	; 0x64
 80023bc:	d901      	bls.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e0d7      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	f040 80cd 	bne.w	8002570 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a08      	ldr	r2, [pc, #32]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e2:	f7fe fca5 	bl	8000d30 <HAL_GetTick>
 80023e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023ea:	f7fe fca1 	bl	8000d30 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b64      	cmp	r3, #100	; 0x64
 80023f6:	d903      	bls.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0ba      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80023fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002400:	4b5e      	ldr	r3, [pc, #376]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800240c:	d0ed      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800242a:	2b00      	cmp	r3, #0
 800242c:	d02e      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d12a      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002436:	4b51      	ldr	r3, [pc, #324]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002444:	4b4d      	ldr	r3, [pc, #308]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	0f1b      	lsrs	r3, r3, #28
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	019a      	lsls	r2, r3, #6
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	041b      	lsls	r3, r3, #16
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	061b      	lsls	r3, r3, #24
 8002464:	431a      	orrs	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	071b      	lsls	r3, r3, #28
 800246a:	4944      	ldr	r1, [pc, #272]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002472:	4b42      	ldr	r3, [pc, #264]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002478:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	3b01      	subs	r3, #1
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	493d      	ldr	r1, [pc, #244]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d022      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800249c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024a0:	d11d      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024a2:	4b36      	ldr	r3, [pc, #216]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a8:	0e1b      	lsrs	r3, r3, #24
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024b0:	4b32      	ldr	r3, [pc, #200]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	0f1b      	lsrs	r3, r3, #28
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	019a      	lsls	r2, r3, #6
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	431a      	orrs	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	061b      	lsls	r3, r3, #24
 80024d0:	431a      	orrs	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	071b      	lsls	r3, r3, #28
 80024d6:	4929      	ldr	r1, [pc, #164]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d028      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f0:	0e1b      	lsrs	r3, r3, #24
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024f8:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	0c1b      	lsrs	r3, r3, #16
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	019a      	lsls	r2, r3, #6
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	041b      	lsls	r3, r3, #16
 8002510:	431a      	orrs	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	071b      	lsls	r3, r3, #28
 800251e:	4917      	ldr	r1, [pc, #92]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800252c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	4911      	ldr	r1, [pc, #68]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0e      	ldr	r2, [pc, #56]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002548:	f7fe fbf2 	bl	8000d30 <HAL_GetTick>
 800254c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002550:	f7fe fbee 	bl	8000d30 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	; 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e007      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800256a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800256e:	d1ef      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3720      	adds	r7, #32
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800

08002580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e049      	b.n	8002626 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f841 	bl	800262e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	4619      	mov	r1, r3
 80025be:	4610      	mov	r0, r2
 80025c0:	f000 fa00 	bl	80029c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d001      	beq.n	800265c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e054      	b.n	8002706 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a26      	ldr	r2, [pc, #152]	; (8002714 <HAL_TIM_Base_Start_IT+0xd0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d022      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002686:	d01d      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a22      	ldr	r2, [pc, #136]	; (8002718 <HAL_TIM_Base_Start_IT+0xd4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d018      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a21      	ldr	r2, [pc, #132]	; (800271c <HAL_TIM_Base_Start_IT+0xd8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d013      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1f      	ldr	r2, [pc, #124]	; (8002720 <HAL_TIM_Base_Start_IT+0xdc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00e      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <HAL_TIM_Base_Start_IT+0xe0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <HAL_TIM_Base_Start_IT+0xe4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d004      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1b      	ldr	r2, [pc, #108]	; (800272c <HAL_TIM_Base_Start_IT+0xe8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d115      	bne.n	80026f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_TIM_Base_Start_IT+0xec>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d015      	beq.n	8002702 <HAL_TIM_Base_Start_IT+0xbe>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026dc:	d011      	beq.n	8002702 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ee:	e008      	b.n	8002702 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e000      	b.n	8002704 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40010000 	.word	0x40010000
 8002718:	40000400 	.word	0x40000400
 800271c:	40000800 	.word	0x40000800
 8002720:	40000c00 	.word	0x40000c00
 8002724:	40010400 	.word	0x40010400
 8002728:	40014000 	.word	0x40014000
 800272c:	40001800 	.word	0x40001800
 8002730:	00010007 	.word	0x00010007

08002734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b02      	cmp	r3, #2
 8002748:	d122      	bne.n	8002790 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b02      	cmp	r3, #2
 8002756:	d11b      	bne.n	8002790 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0202 	mvn.w	r2, #2
 8002760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f905 	bl	8002986 <HAL_TIM_IC_CaptureCallback>
 800277c:	e005      	b.n	800278a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8f7 	bl	8002972 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f908 	bl	800299a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b04      	cmp	r3, #4
 800279c:	d122      	bne.n	80027e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d11b      	bne.n	80027e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0204 	mvn.w	r2, #4
 80027b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8db 	bl	8002986 <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8cd 	bl	8002972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f8de 	bl	800299a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d122      	bne.n	8002838 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d11b      	bne.n	8002838 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0208 	mvn.w	r2, #8
 8002808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2204      	movs	r2, #4
 800280e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8b1 	bl	8002986 <HAL_TIM_IC_CaptureCallback>
 8002824:	e005      	b.n	8002832 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f8a3 	bl	8002972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f8b4 	bl	800299a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b10      	cmp	r3, #16
 8002844:	d122      	bne.n	800288c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b10      	cmp	r3, #16
 8002852:	d11b      	bne.n	800288c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0210 	mvn.w	r2, #16
 800285c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2208      	movs	r2, #8
 8002862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f887 	bl	8002986 <HAL_TIM_IC_CaptureCallback>
 8002878:	e005      	b.n	8002886 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f879 	bl	8002972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f88a 	bl	800299a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b01      	cmp	r3, #1
 8002898:	d10e      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d107      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0201 	mvn.w	r2, #1
 80028b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fd ffb0 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	2b80      	cmp	r3, #128	; 0x80
 80028c4:	d10e      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d0:	2b80      	cmp	r3, #128	; 0x80
 80028d2:	d107      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f91a 	bl	8002b18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f2:	d10e      	bne.n	8002912 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fe:	2b80      	cmp	r3, #128	; 0x80
 8002900:	d107      	bne.n	8002912 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800290a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f90d 	bl	8002b2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	d10e      	bne.n	800293e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292a:	2b40      	cmp	r3, #64	; 0x40
 800292c:	d107      	bne.n	800293e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f838 	bl	80029ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b20      	cmp	r3, #32
 800294a:	d10e      	bne.n	800296a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b20      	cmp	r3, #32
 8002958:	d107      	bne.n	800296a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f06f 0220 	mvn.w	r2, #32
 8002962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f8cd 	bl	8002b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a40      	ldr	r2, [pc, #256]	; (8002ad8 <TIM_Base_SetConfig+0x114>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d013      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e2:	d00f      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a3d      	ldr	r2, [pc, #244]	; (8002adc <TIM_Base_SetConfig+0x118>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00b      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a3c      	ldr	r2, [pc, #240]	; (8002ae0 <TIM_Base_SetConfig+0x11c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d007      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a3b      	ldr	r2, [pc, #236]	; (8002ae4 <TIM_Base_SetConfig+0x120>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d003      	beq.n	8002a04 <TIM_Base_SetConfig+0x40>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a3a      	ldr	r2, [pc, #232]	; (8002ae8 <TIM_Base_SetConfig+0x124>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d108      	bne.n	8002a16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a2f      	ldr	r2, [pc, #188]	; (8002ad8 <TIM_Base_SetConfig+0x114>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d02b      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d027      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a2c      	ldr	r2, [pc, #176]	; (8002adc <TIM_Base_SetConfig+0x118>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d023      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a2b      	ldr	r2, [pc, #172]	; (8002ae0 <TIM_Base_SetConfig+0x11c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01f      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a2a      	ldr	r2, [pc, #168]	; (8002ae4 <TIM_Base_SetConfig+0x120>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01b      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a29      	ldr	r2, [pc, #164]	; (8002ae8 <TIM_Base_SetConfig+0x124>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d017      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a28      	ldr	r2, [pc, #160]	; (8002aec <TIM_Base_SetConfig+0x128>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <TIM_Base_SetConfig+0x12c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00f      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <TIM_Base_SetConfig+0x130>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00b      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a25      	ldr	r2, [pc, #148]	; (8002af8 <TIM_Base_SetConfig+0x134>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a24      	ldr	r2, [pc, #144]	; (8002afc <TIM_Base_SetConfig+0x138>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d003      	beq.n	8002a76 <TIM_Base_SetConfig+0xb2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a23      	ldr	r2, [pc, #140]	; (8002b00 <TIM_Base_SetConfig+0x13c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d108      	bne.n	8002a88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <TIM_Base_SetConfig+0x114>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <TIM_Base_SetConfig+0xf8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <TIM_Base_SetConfig+0x124>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d103      	bne.n	8002ac4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	615a      	str	r2, [r3, #20]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40000800 	.word	0x40000800
 8002ae4:	40000c00 	.word	0x40000c00
 8002ae8:	40010400 	.word	0x40010400
 8002aec:	40014000 	.word	0x40014000
 8002af0:	40014400 	.word	0x40014400
 8002af4:	40014800 	.word	0x40014800
 8002af8:	40001800 	.word	0x40001800
 8002afc:	40001c00 	.word	0x40001c00
 8002b00:	40002000 	.word	0x40002000

08002b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e040      	b.n	8002bd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fe f818 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	; 0x24
 8002b6c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fbf0 	bl	8003364 <UART_SetConfig>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e022      	b.n	8002bd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fe48 	bl	800382c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fecf 	bl	8003970 <UART_CheckIdleState>
 8002bd2:	4603      	mov	r3, r0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	; 0x28
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d171      	bne.n	8002cd8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_UART_Transmit+0x24>
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e06a      	b.n	8002cda <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2221      	movs	r2, #33	; 0x21
 8002c10:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c12:	f7fe f88d 	bl	8000d30 <HAL_GetTick>
 8002c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88fa      	ldrh	r2, [r7, #6]
 8002c1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	88fa      	ldrh	r2, [r7, #6]
 8002c24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c30:	d108      	bne.n	8002c44 <HAL_UART_Transmit+0x68>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d104      	bne.n	8002c44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	e003      	b.n	8002c4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c4c:	e02c      	b.n	8002ca8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2200      	movs	r2, #0
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 fec0 	bl	80039de <UART_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e038      	b.n	8002cda <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10b      	bne.n	8002c86 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	3302      	adds	r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	e007      	b.n	8002c96 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	3301      	adds	r3, #1
 8002c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1cc      	bne.n	8002c4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2140      	movs	r1, #64	; 0x40
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fe8d 	bl	80039de <UART_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e005      	b.n	8002cda <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e000      	b.n	8002cda <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3720      	adds	r7, #32
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b08a      	sub	sp, #40	; 0x28
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	4613      	mov	r3, r2
 8002cee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d132      	bne.n	8002d60 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_UART_Receive_IT+0x24>
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e02b      	b.n	8002d62 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d018      	beq.n	8002d50 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	e853 3f00 	ldrex	r3, [r3]
 8002d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	623b      	str	r3, [r7, #32]
 8002d3e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d40:	69f9      	ldr	r1, [r7, #28]
 8002d42:	6a3a      	ldr	r2, [r7, #32]
 8002d44:	e841 2300 	strex	r3, r2, [r1]
 8002d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e6      	bne.n	8002d1e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	461a      	mov	r2, r3
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 ff08 	bl	8003b6c <UART_Start_Receive_IT>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	e000      	b.n	8002d62 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3728      	adds	r7, #40	; 0x28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b0ba      	sub	sp, #232	; 0xe8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d96:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002da0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d115      	bne.n	8002dd4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00f      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8297 	beq.w	80032f8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	4798      	blx	r3
      }
      return;
 8002dd2:	e291      	b.n	80032f8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002dd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8117 	beq.w	800300c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002dea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002dee:	4b85      	ldr	r3, [pc, #532]	; (8003004 <HAL_UART_IRQHandler+0x298>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 810a 	beq.w	800300c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d011      	beq.n	8002e28 <HAL_UART_IRQHandler+0xbc>
 8002e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00b      	beq.n	8002e28 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2201      	movs	r2, #1
 8002e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1e:	f043 0201 	orr.w	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d011      	beq.n	8002e58 <HAL_UART_IRQHandler+0xec>
 8002e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2202      	movs	r2, #2
 8002e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e4e:	f043 0204 	orr.w	r2, r3, #4
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d011      	beq.n	8002e88 <HAL_UART_IRQHandler+0x11c>
 8002e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00b      	beq.n	8002e88 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2204      	movs	r2, #4
 8002e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e7e:	f043 0202 	orr.w	r2, r3, #2
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d017      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d105      	bne.n	8002eac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ea4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00b      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eba:	f043 0208 	orr.w	r2, r3, #8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d012      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x18a>
 8002ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00c      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ee4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eec:	f043 0220 	orr.w	r2, r3, #32
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 81fd 	beq.w	80032fc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d007      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b40      	cmp	r3, #64	; 0x40
 8002f40:	d005      	beq.n	8002f4e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d04f      	beq.n	8002fee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fed2 	bl	8003cf8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b40      	cmp	r3, #64	; 0x40
 8002f60:	d141      	bne.n	8002fe6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3308      	adds	r3, #8
 8002f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3308      	adds	r3, #8
 8002f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1d9      	bne.n	8002f62 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d013      	beq.n	8002fde <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fba:	4a13      	ldr	r2, [pc, #76]	; (8003008 <HAL_UART_IRQHandler+0x29c>)
 8002fbc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe f812 	bl	8000fec <HAL_DMA_Abort_IT>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d017      	beq.n	8002ffe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	e00f      	b.n	8002ffe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f9aa 	bl	8003338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe4:	e00b      	b.n	8002ffe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f9a6 	bl	8003338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fec:	e007      	b.n	8002ffe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f9a2 	bl	8003338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002ffc:	e17e      	b.n	80032fc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffe:	bf00      	nop
    return;
 8003000:	e17c      	b.n	80032fc <HAL_UART_IRQHandler+0x590>
 8003002:	bf00      	nop
 8003004:	04000120 	.word	0x04000120
 8003008:	08003dc1 	.word	0x08003dc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003010:	2b01      	cmp	r3, #1
 8003012:	f040 814c 	bne.w	80032ae <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8145 	beq.w	80032ae <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 813e 	beq.w	80032ae <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2210      	movs	r2, #16
 8003038:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	f040 80b6 	bne.w	80031b6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003056:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8150 	beq.w	8003300 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800306a:	429a      	cmp	r2, r3
 800306c:	f080 8148 	bcs.w	8003300 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003076:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003084:	f000 8086 	beq.w	8003194 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800309c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030c2:	e841 2300 	strex	r3, r2, [r1]
 80030c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1da      	bne.n	8003088 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3308      	adds	r3, #8
 80030d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3308      	adds	r3, #8
 80030f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003102:	e841 2300 	strex	r3, r2, [r1]
 8003106:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1e1      	bne.n	80030d2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3308      	adds	r3, #8
 8003114:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800311e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3308      	adds	r3, #8
 800312e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003132:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003134:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003138:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e3      	bne.n	800310e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003164:	f023 0310 	bic.w	r3, r3, #16
 8003168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003176:	65bb      	str	r3, [r7, #88]	; 0x58
 8003178:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800317c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e4      	bne.n	8003154 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd febc 	bl	8000f0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	4619      	mov	r1, r3
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8cc 	bl	800334c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031b4:	e0a4      	b.n	8003300 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8096 	beq.w	8003304 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80031d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8091 	beq.w	8003304 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003204:	647b      	str	r3, [r7, #68]	; 0x44
 8003206:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003208:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800320a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800320c:	e841 2300 	strex	r3, r2, [r1]
 8003210:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e4      	bne.n	80031e2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3308      	adds	r3, #8
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	e853 3f00 	ldrex	r3, [r3]
 8003226:	623b      	str	r3, [r7, #32]
   return(result);
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3308      	adds	r3, #8
 8003238:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800323c:	633a      	str	r2, [r7, #48]	; 0x30
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e3      	bne.n	8003218 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	60fb      	str	r3, [r7, #12]
   return(result);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f023 0310 	bic.w	r3, r3, #16
 8003278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	69b9      	ldr	r1, [r7, #24]
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	617b      	str	r3, [r7, #20]
   return(result);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e4      	bne.n	8003264 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032a4:	4619      	mov	r1, r3
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f850 	bl	800334c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032ac:	e02a      	b.n	8003304 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00e      	beq.n	80032d8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01c      	beq.n	8003308 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	4798      	blx	r3
    }
    return;
 80032d6:	e017      	b.n	8003308 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d012      	beq.n	800330a <HAL_UART_IRQHandler+0x59e>
 80032e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00c      	beq.n	800330a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fd7b 	bl	8003dec <UART_EndTransmit_IT>
    return;
 80032f6:	e008      	b.n	800330a <HAL_UART_IRQHandler+0x59e>
      return;
 80032f8:	bf00      	nop
 80032fa:	e006      	b.n	800330a <HAL_UART_IRQHandler+0x59e>
    return;
 80032fc:	bf00      	nop
 80032fe:	e004      	b.n	800330a <HAL_UART_IRQHandler+0x59e>
      return;
 8003300:	bf00      	nop
 8003302:	e002      	b.n	800330a <HAL_UART_IRQHandler+0x59e>
      return;
 8003304:	bf00      	nop
 8003306:	e000      	b.n	800330a <HAL_UART_IRQHandler+0x59e>
    return;
 8003308:	bf00      	nop
  }

}
 800330a:	37e8      	adds	r7, #232	; 0xe8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4ba6      	ldr	r3, [pc, #664]	; (8003628 <UART_SetConfig+0x2c4>)
 8003390:	4013      	ands	r3, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	6979      	ldr	r1, [r7, #20]
 8003398:	430b      	orrs	r3, r1
 800339a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a94      	ldr	r2, [pc, #592]	; (800362c <UART_SetConfig+0x2c8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d120      	bne.n	8003422 <UART_SetConfig+0xbe>
 80033e0:	4b93      	ldr	r3, [pc, #588]	; (8003630 <UART_SetConfig+0x2cc>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d816      	bhi.n	800341c <UART_SetConfig+0xb8>
 80033ee:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <UART_SetConfig+0x90>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003405 	.word	0x08003405
 80033f8:	08003411 	.word	0x08003411
 80033fc:	0800340b 	.word	0x0800340b
 8003400:	08003417 	.word	0x08003417
 8003404:	2301      	movs	r3, #1
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e150      	b.n	80036ac <UART_SetConfig+0x348>
 800340a:	2302      	movs	r3, #2
 800340c:	77fb      	strb	r3, [r7, #31]
 800340e:	e14d      	b.n	80036ac <UART_SetConfig+0x348>
 8003410:	2304      	movs	r3, #4
 8003412:	77fb      	strb	r3, [r7, #31]
 8003414:	e14a      	b.n	80036ac <UART_SetConfig+0x348>
 8003416:	2308      	movs	r3, #8
 8003418:	77fb      	strb	r3, [r7, #31]
 800341a:	e147      	b.n	80036ac <UART_SetConfig+0x348>
 800341c:	2310      	movs	r3, #16
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	e144      	b.n	80036ac <UART_SetConfig+0x348>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a83      	ldr	r2, [pc, #524]	; (8003634 <UART_SetConfig+0x2d0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d132      	bne.n	8003492 <UART_SetConfig+0x12e>
 800342c:	4b80      	ldr	r3, [pc, #512]	; (8003630 <UART_SetConfig+0x2cc>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d828      	bhi.n	800348c <UART_SetConfig+0x128>
 800343a:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <UART_SetConfig+0xdc>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	08003475 	.word	0x08003475
 8003444:	0800348d 	.word	0x0800348d
 8003448:	0800348d 	.word	0x0800348d
 800344c:	0800348d 	.word	0x0800348d
 8003450:	08003481 	.word	0x08003481
 8003454:	0800348d 	.word	0x0800348d
 8003458:	0800348d 	.word	0x0800348d
 800345c:	0800348d 	.word	0x0800348d
 8003460:	0800347b 	.word	0x0800347b
 8003464:	0800348d 	.word	0x0800348d
 8003468:	0800348d 	.word	0x0800348d
 800346c:	0800348d 	.word	0x0800348d
 8003470:	08003487 	.word	0x08003487
 8003474:	2300      	movs	r3, #0
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e118      	b.n	80036ac <UART_SetConfig+0x348>
 800347a:	2302      	movs	r3, #2
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e115      	b.n	80036ac <UART_SetConfig+0x348>
 8003480:	2304      	movs	r3, #4
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e112      	b.n	80036ac <UART_SetConfig+0x348>
 8003486:	2308      	movs	r3, #8
 8003488:	77fb      	strb	r3, [r7, #31]
 800348a:	e10f      	b.n	80036ac <UART_SetConfig+0x348>
 800348c:	2310      	movs	r3, #16
 800348e:	77fb      	strb	r3, [r7, #31]
 8003490:	e10c      	b.n	80036ac <UART_SetConfig+0x348>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a68      	ldr	r2, [pc, #416]	; (8003638 <UART_SetConfig+0x2d4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d120      	bne.n	80034de <UART_SetConfig+0x17a>
 800349c:	4b64      	ldr	r3, [pc, #400]	; (8003630 <UART_SetConfig+0x2cc>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034a6:	2b30      	cmp	r3, #48	; 0x30
 80034a8:	d013      	beq.n	80034d2 <UART_SetConfig+0x16e>
 80034aa:	2b30      	cmp	r3, #48	; 0x30
 80034ac:	d814      	bhi.n	80034d8 <UART_SetConfig+0x174>
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d009      	beq.n	80034c6 <UART_SetConfig+0x162>
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d810      	bhi.n	80034d8 <UART_SetConfig+0x174>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <UART_SetConfig+0x15c>
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	d006      	beq.n	80034cc <UART_SetConfig+0x168>
 80034be:	e00b      	b.n	80034d8 <UART_SetConfig+0x174>
 80034c0:	2300      	movs	r3, #0
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e0f2      	b.n	80036ac <UART_SetConfig+0x348>
 80034c6:	2302      	movs	r3, #2
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e0ef      	b.n	80036ac <UART_SetConfig+0x348>
 80034cc:	2304      	movs	r3, #4
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e0ec      	b.n	80036ac <UART_SetConfig+0x348>
 80034d2:	2308      	movs	r3, #8
 80034d4:	77fb      	strb	r3, [r7, #31]
 80034d6:	e0e9      	b.n	80036ac <UART_SetConfig+0x348>
 80034d8:	2310      	movs	r3, #16
 80034da:	77fb      	strb	r3, [r7, #31]
 80034dc:	e0e6      	b.n	80036ac <UART_SetConfig+0x348>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a56      	ldr	r2, [pc, #344]	; (800363c <UART_SetConfig+0x2d8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d120      	bne.n	800352a <UART_SetConfig+0x1c6>
 80034e8:	4b51      	ldr	r3, [pc, #324]	; (8003630 <UART_SetConfig+0x2cc>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034f2:	2bc0      	cmp	r3, #192	; 0xc0
 80034f4:	d013      	beq.n	800351e <UART_SetConfig+0x1ba>
 80034f6:	2bc0      	cmp	r3, #192	; 0xc0
 80034f8:	d814      	bhi.n	8003524 <UART_SetConfig+0x1c0>
 80034fa:	2b80      	cmp	r3, #128	; 0x80
 80034fc:	d009      	beq.n	8003512 <UART_SetConfig+0x1ae>
 80034fe:	2b80      	cmp	r3, #128	; 0x80
 8003500:	d810      	bhi.n	8003524 <UART_SetConfig+0x1c0>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <UART_SetConfig+0x1a8>
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	d006      	beq.n	8003518 <UART_SetConfig+0x1b4>
 800350a:	e00b      	b.n	8003524 <UART_SetConfig+0x1c0>
 800350c:	2300      	movs	r3, #0
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e0cc      	b.n	80036ac <UART_SetConfig+0x348>
 8003512:	2302      	movs	r3, #2
 8003514:	77fb      	strb	r3, [r7, #31]
 8003516:	e0c9      	b.n	80036ac <UART_SetConfig+0x348>
 8003518:	2304      	movs	r3, #4
 800351a:	77fb      	strb	r3, [r7, #31]
 800351c:	e0c6      	b.n	80036ac <UART_SetConfig+0x348>
 800351e:	2308      	movs	r3, #8
 8003520:	77fb      	strb	r3, [r7, #31]
 8003522:	e0c3      	b.n	80036ac <UART_SetConfig+0x348>
 8003524:	2310      	movs	r3, #16
 8003526:	77fb      	strb	r3, [r7, #31]
 8003528:	e0c0      	b.n	80036ac <UART_SetConfig+0x348>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a44      	ldr	r2, [pc, #272]	; (8003640 <UART_SetConfig+0x2dc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d125      	bne.n	8003580 <UART_SetConfig+0x21c>
 8003534:	4b3e      	ldr	r3, [pc, #248]	; (8003630 <UART_SetConfig+0x2cc>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003542:	d017      	beq.n	8003574 <UART_SetConfig+0x210>
 8003544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003548:	d817      	bhi.n	800357a <UART_SetConfig+0x216>
 800354a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354e:	d00b      	beq.n	8003568 <UART_SetConfig+0x204>
 8003550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003554:	d811      	bhi.n	800357a <UART_SetConfig+0x216>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <UART_SetConfig+0x1fe>
 800355a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355e:	d006      	beq.n	800356e <UART_SetConfig+0x20a>
 8003560:	e00b      	b.n	800357a <UART_SetConfig+0x216>
 8003562:	2300      	movs	r3, #0
 8003564:	77fb      	strb	r3, [r7, #31]
 8003566:	e0a1      	b.n	80036ac <UART_SetConfig+0x348>
 8003568:	2302      	movs	r3, #2
 800356a:	77fb      	strb	r3, [r7, #31]
 800356c:	e09e      	b.n	80036ac <UART_SetConfig+0x348>
 800356e:	2304      	movs	r3, #4
 8003570:	77fb      	strb	r3, [r7, #31]
 8003572:	e09b      	b.n	80036ac <UART_SetConfig+0x348>
 8003574:	2308      	movs	r3, #8
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e098      	b.n	80036ac <UART_SetConfig+0x348>
 800357a:	2310      	movs	r3, #16
 800357c:	77fb      	strb	r3, [r7, #31]
 800357e:	e095      	b.n	80036ac <UART_SetConfig+0x348>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a2f      	ldr	r2, [pc, #188]	; (8003644 <UART_SetConfig+0x2e0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d125      	bne.n	80035d6 <UART_SetConfig+0x272>
 800358a:	4b29      	ldr	r3, [pc, #164]	; (8003630 <UART_SetConfig+0x2cc>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003590:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003594:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003598:	d017      	beq.n	80035ca <UART_SetConfig+0x266>
 800359a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800359e:	d817      	bhi.n	80035d0 <UART_SetConfig+0x26c>
 80035a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a4:	d00b      	beq.n	80035be <UART_SetConfig+0x25a>
 80035a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035aa:	d811      	bhi.n	80035d0 <UART_SetConfig+0x26c>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <UART_SetConfig+0x254>
 80035b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b4:	d006      	beq.n	80035c4 <UART_SetConfig+0x260>
 80035b6:	e00b      	b.n	80035d0 <UART_SetConfig+0x26c>
 80035b8:	2301      	movs	r3, #1
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e076      	b.n	80036ac <UART_SetConfig+0x348>
 80035be:	2302      	movs	r3, #2
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e073      	b.n	80036ac <UART_SetConfig+0x348>
 80035c4:	2304      	movs	r3, #4
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e070      	b.n	80036ac <UART_SetConfig+0x348>
 80035ca:	2308      	movs	r3, #8
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e06d      	b.n	80036ac <UART_SetConfig+0x348>
 80035d0:	2310      	movs	r3, #16
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e06a      	b.n	80036ac <UART_SetConfig+0x348>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1b      	ldr	r2, [pc, #108]	; (8003648 <UART_SetConfig+0x2e4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d138      	bne.n	8003652 <UART_SetConfig+0x2ee>
 80035e0:	4b13      	ldr	r3, [pc, #76]	; (8003630 <UART_SetConfig+0x2cc>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80035ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035ee:	d017      	beq.n	8003620 <UART_SetConfig+0x2bc>
 80035f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035f4:	d82a      	bhi.n	800364c <UART_SetConfig+0x2e8>
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fa:	d00b      	beq.n	8003614 <UART_SetConfig+0x2b0>
 80035fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003600:	d824      	bhi.n	800364c <UART_SetConfig+0x2e8>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <UART_SetConfig+0x2aa>
 8003606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360a:	d006      	beq.n	800361a <UART_SetConfig+0x2b6>
 800360c:	e01e      	b.n	800364c <UART_SetConfig+0x2e8>
 800360e:	2300      	movs	r3, #0
 8003610:	77fb      	strb	r3, [r7, #31]
 8003612:	e04b      	b.n	80036ac <UART_SetConfig+0x348>
 8003614:	2302      	movs	r3, #2
 8003616:	77fb      	strb	r3, [r7, #31]
 8003618:	e048      	b.n	80036ac <UART_SetConfig+0x348>
 800361a:	2304      	movs	r3, #4
 800361c:	77fb      	strb	r3, [r7, #31]
 800361e:	e045      	b.n	80036ac <UART_SetConfig+0x348>
 8003620:	2308      	movs	r3, #8
 8003622:	77fb      	strb	r3, [r7, #31]
 8003624:	e042      	b.n	80036ac <UART_SetConfig+0x348>
 8003626:	bf00      	nop
 8003628:	efff69f3 	.word	0xefff69f3
 800362c:	40011000 	.word	0x40011000
 8003630:	40023800 	.word	0x40023800
 8003634:	40004400 	.word	0x40004400
 8003638:	40004800 	.word	0x40004800
 800363c:	40004c00 	.word	0x40004c00
 8003640:	40005000 	.word	0x40005000
 8003644:	40011400 	.word	0x40011400
 8003648:	40007800 	.word	0x40007800
 800364c:	2310      	movs	r3, #16
 800364e:	77fb      	strb	r3, [r7, #31]
 8003650:	e02c      	b.n	80036ac <UART_SetConfig+0x348>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a72      	ldr	r2, [pc, #456]	; (8003820 <UART_SetConfig+0x4bc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d125      	bne.n	80036a8 <UART_SetConfig+0x344>
 800365c:	4b71      	ldr	r3, [pc, #452]	; (8003824 <UART_SetConfig+0x4c0>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003666:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800366a:	d017      	beq.n	800369c <UART_SetConfig+0x338>
 800366c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003670:	d817      	bhi.n	80036a2 <UART_SetConfig+0x33e>
 8003672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003676:	d00b      	beq.n	8003690 <UART_SetConfig+0x32c>
 8003678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800367c:	d811      	bhi.n	80036a2 <UART_SetConfig+0x33e>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <UART_SetConfig+0x326>
 8003682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003686:	d006      	beq.n	8003696 <UART_SetConfig+0x332>
 8003688:	e00b      	b.n	80036a2 <UART_SetConfig+0x33e>
 800368a:	2300      	movs	r3, #0
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	e00d      	b.n	80036ac <UART_SetConfig+0x348>
 8003690:	2302      	movs	r3, #2
 8003692:	77fb      	strb	r3, [r7, #31]
 8003694:	e00a      	b.n	80036ac <UART_SetConfig+0x348>
 8003696:	2304      	movs	r3, #4
 8003698:	77fb      	strb	r3, [r7, #31]
 800369a:	e007      	b.n	80036ac <UART_SetConfig+0x348>
 800369c:	2308      	movs	r3, #8
 800369e:	77fb      	strb	r3, [r7, #31]
 80036a0:	e004      	b.n	80036ac <UART_SetConfig+0x348>
 80036a2:	2310      	movs	r3, #16
 80036a4:	77fb      	strb	r3, [r7, #31]
 80036a6:	e001      	b.n	80036ac <UART_SetConfig+0x348>
 80036a8:	2310      	movs	r3, #16
 80036aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b4:	d15b      	bne.n	800376e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80036b6:	7ffb      	ldrb	r3, [r7, #31]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d828      	bhi.n	800370e <UART_SetConfig+0x3aa>
 80036bc:	a201      	add	r2, pc, #4	; (adr r2, 80036c4 <UART_SetConfig+0x360>)
 80036be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c2:	bf00      	nop
 80036c4:	080036e9 	.word	0x080036e9
 80036c8:	080036f1 	.word	0x080036f1
 80036cc:	080036f9 	.word	0x080036f9
 80036d0:	0800370f 	.word	0x0800370f
 80036d4:	080036ff 	.word	0x080036ff
 80036d8:	0800370f 	.word	0x0800370f
 80036dc:	0800370f 	.word	0x0800370f
 80036e0:	0800370f 	.word	0x0800370f
 80036e4:	08003707 	.word	0x08003707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e8:	f7fe fb00 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 80036ec:	61b8      	str	r0, [r7, #24]
        break;
 80036ee:	e013      	b.n	8003718 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036f0:	f7fe fb10 	bl	8001d14 <HAL_RCC_GetPCLK2Freq>
 80036f4:	61b8      	str	r0, [r7, #24]
        break;
 80036f6:	e00f      	b.n	8003718 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f8:	4b4b      	ldr	r3, [pc, #300]	; (8003828 <UART_SetConfig+0x4c4>)
 80036fa:	61bb      	str	r3, [r7, #24]
        break;
 80036fc:	e00c      	b.n	8003718 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fe:	f7fe fa23 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8003702:	61b8      	str	r0, [r7, #24]
        break;
 8003704:	e008      	b.n	8003718 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370a:	61bb      	str	r3, [r7, #24]
        break;
 800370c:	e004      	b.n	8003718 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	77bb      	strb	r3, [r7, #30]
        break;
 8003716:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d074      	beq.n	8003808 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	005a      	lsls	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	085b      	lsrs	r3, r3, #1
 8003728:	441a      	add	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003732:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b0f      	cmp	r3, #15
 8003738:	d916      	bls.n	8003768 <UART_SetConfig+0x404>
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003740:	d212      	bcs.n	8003768 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	b29b      	uxth	r3, r3
 8003746:	f023 030f 	bic.w	r3, r3, #15
 800374a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	b29b      	uxth	r3, r3
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	b29a      	uxth	r2, r3
 8003758:	89fb      	ldrh	r3, [r7, #14]
 800375a:	4313      	orrs	r3, r2
 800375c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	89fa      	ldrh	r2, [r7, #14]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	e04f      	b.n	8003808 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	77bb      	strb	r3, [r7, #30]
 800376c:	e04c      	b.n	8003808 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800376e:	7ffb      	ldrb	r3, [r7, #31]
 8003770:	2b08      	cmp	r3, #8
 8003772:	d828      	bhi.n	80037c6 <UART_SetConfig+0x462>
 8003774:	a201      	add	r2, pc, #4	; (adr r2, 800377c <UART_SetConfig+0x418>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	080037a1 	.word	0x080037a1
 8003780:	080037a9 	.word	0x080037a9
 8003784:	080037b1 	.word	0x080037b1
 8003788:	080037c7 	.word	0x080037c7
 800378c:	080037b7 	.word	0x080037b7
 8003790:	080037c7 	.word	0x080037c7
 8003794:	080037c7 	.word	0x080037c7
 8003798:	080037c7 	.word	0x080037c7
 800379c:	080037bf 	.word	0x080037bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a0:	f7fe faa4 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 80037a4:	61b8      	str	r0, [r7, #24]
        break;
 80037a6:	e013      	b.n	80037d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037a8:	f7fe fab4 	bl	8001d14 <HAL_RCC_GetPCLK2Freq>
 80037ac:	61b8      	str	r0, [r7, #24]
        break;
 80037ae:	e00f      	b.n	80037d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b0:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <UART_SetConfig+0x4c4>)
 80037b2:	61bb      	str	r3, [r7, #24]
        break;
 80037b4:	e00c      	b.n	80037d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037b6:	f7fe f9c7 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 80037ba:	61b8      	str	r0, [r7, #24]
        break;
 80037bc:	e008      	b.n	80037d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c2:	61bb      	str	r3, [r7, #24]
        break;
 80037c4:	e004      	b.n	80037d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	77bb      	strb	r3, [r7, #30]
        break;
 80037ce:	bf00      	nop
    }

    if (pclk != 0U)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d018      	beq.n	8003808 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	085a      	lsrs	r2, r3, #1
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	441a      	add	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b0f      	cmp	r3, #15
 80037ee:	d909      	bls.n	8003804 <UART_SetConfig+0x4a0>
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f6:	d205      	bcs.n	8003804 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	e001      	b.n	8003808 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003814:	7fbb      	ldrb	r3, [r7, #30]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3720      	adds	r7, #32
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40007c00 	.word	0x40007c00
 8003824:	40023800 	.word	0x40023800
 8003828:	00f42400 	.word	0x00f42400

0800382c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01a      	beq.n	8003942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800392a:	d10a      	bne.n	8003942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
  }
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af02      	add	r7, sp, #8
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003980:	f7fd f9d6 	bl	8000d30 <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b08      	cmp	r3, #8
 8003992:	d10e      	bne.n	80039b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003994:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f81b 	bl	80039de <UART_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e011      	b.n	80039d6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b09c      	sub	sp, #112	; 0x70
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	4613      	mov	r3, r2
 80039ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ee:	e0a7      	b.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	f000 80a3 	beq.w	8003b40 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fa:	f7fd f999 	bl	8000d30 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d302      	bcc.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d13f      	bne.n	8003a90 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a24:	667b      	str	r3, [r7, #100]	; 0x64
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a30:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e6      	bne.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3308      	adds	r3, #8
 8003a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	663b      	str	r3, [r7, #96]	; 0x60
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3308      	adds	r3, #8
 8003a60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a62:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e5      	bne.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e068      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d050      	beq.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aac:	d148      	bne.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ab6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003acc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003adc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e6      	bne.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3308      	adds	r3, #8
 8003af0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	613b      	str	r3, [r7, #16]
   return(result);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3308      	adds	r3, #8
 8003b08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b0a:	623a      	str	r2, [r7, #32]
 8003b0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	69f9      	ldr	r1, [r7, #28]
 8003b10:	6a3a      	ldr	r2, [r7, #32]
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e5      	bne.n	8003aea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e010      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	f43f af48 	beq.w	80039f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3770      	adds	r7, #112	; 0x70
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b097      	sub	sp, #92	; 0x5c
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	88fa      	ldrh	r2, [r7, #6]
 8003b8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	d10e      	bne.n	8003bbe <UART_Start_Receive_IT+0x52>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <UART_Start_Receive_IT+0x48>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003bae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bb2:	e02d      	b.n	8003c10 <UART_Start_Receive_IT+0xa4>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	22ff      	movs	r2, #255	; 0xff
 8003bb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bbc:	e028      	b.n	8003c10 <UART_Start_Receive_IT+0xa4>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10d      	bne.n	8003be2 <UART_Start_Receive_IT+0x76>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <UART_Start_Receive_IT+0x6c>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	22ff      	movs	r2, #255	; 0xff
 8003bd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bd6:	e01b      	b.n	8003c10 <UART_Start_Receive_IT+0xa4>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	227f      	movs	r2, #127	; 0x7f
 8003bdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003be0:	e016      	b.n	8003c10 <UART_Start_Receive_IT+0xa4>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bea:	d10d      	bne.n	8003c08 <UART_Start_Receive_IT+0x9c>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <UART_Start_Receive_IT+0x92>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	227f      	movs	r2, #127	; 0x7f
 8003bf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bfc:	e008      	b.n	8003c10 <UART_Start_Receive_IT+0xa4>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	223f      	movs	r2, #63	; 0x3f
 8003c02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c06:	e003      	b.n	8003c10 <UART_Start_Receive_IT+0xa4>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2222      	movs	r2, #34	; 0x22
 8003c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3308      	adds	r3, #8
 8003c26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	657b      	str	r3, [r7, #84]	; 0x54
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c40:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c42:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e5      	bne.n	8003c20 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5c:	d107      	bne.n	8003c6e <UART_Start_Receive_IT+0x102>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <UART_Start_Receive_IT+0x184>)
 8003c6a:	669a      	str	r2, [r3, #104]	; 0x68
 8003c6c:	e002      	b.n	8003c74 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a20      	ldr	r2, [pc, #128]	; (8003cf4 <UART_Start_Receive_IT+0x188>)
 8003c72:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d019      	beq.n	8003cb0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003c90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c9c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e6      	bne.n	8003c7c <UART_Start_Receive_IT+0x110>
 8003cae:	e018      	b.n	8003ce2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f043 0320 	orr.w	r3, r3, #32
 8003cc4:	653b      	str	r3, [r7, #80]	; 0x50
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cce:	623b      	str	r3, [r7, #32]
 8003cd0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	69f9      	ldr	r1, [r7, #28]
 8003cd4:	6a3a      	ldr	r2, [r7, #32]
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e6      	bne.n	8003cb0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	375c      	adds	r7, #92	; 0x5c
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	08003fa7 	.word	0x08003fa7
 8003cf4:	08003e41 	.word	0x08003e41

08003cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b095      	sub	sp, #84	; 0x54
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e6      	bne.n	8003d00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3308      	adds	r3, #8
 8003d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3308      	adds	r3, #8
 8003d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e5      	bne.n	8003d32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d118      	bne.n	8003da0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f023 0310 	bic.w	r3, r3, #16
 8003d82:	647b      	str	r3, [r7, #68]	; 0x44
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6979      	ldr	r1, [r7, #20]
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	613b      	str	r3, [r7, #16]
   return(result);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e6      	bne.n	8003d6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003db4:	bf00      	nop
 8003db6:	3754      	adds	r7, #84	; 0x54
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7ff faaa 	bl	8003338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e08:	61fb      	str	r3, [r7, #28]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	6979      	ldr	r1, [r7, #20]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e6      	bne.n	8003df4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff fa6c 	bl	8003310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e38:	bf00      	nop
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b096      	sub	sp, #88	; 0x58
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e4e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e58:	2b22      	cmp	r3, #34	; 0x22
 8003e5a:	f040 8098 	bne.w	8003f8e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e68:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003e6c:	b2d9      	uxtb	r1, r3
 8003e6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e78:	400a      	ands	r2, r1
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d17b      	bne.n	8003f9e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eba:	653b      	str	r3, [r7, #80]	; 0x50
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003eca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e6      	bne.n	8003ea6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3308      	adds	r3, #8
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	e853 3f00 	ldrex	r3, [r3]
 8003ee6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ef8:	633a      	str	r2, [r7, #48]	; 0x30
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f00:	e841 2300 	strex	r3, r2, [r1]
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e5      	bne.n	8003ed8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d12e      	bne.n	8003f86 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0310 	bic.w	r3, r3, #16
 8003f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	69b9      	ldr	r1, [r7, #24]
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	617b      	str	r3, [r7, #20]
   return(result);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e6      	bne.n	8003f2e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	d103      	bne.n	8003f76 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2210      	movs	r2, #16
 8003f74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff f9e4 	bl	800334c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f84:	e00b      	b.n	8003f9e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff f9cc 	bl	8003324 <HAL_UART_RxCpltCallback>
}
 8003f8c:	e007      	b.n	8003f9e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699a      	ldr	r2, [r3, #24]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0208 	orr.w	r2, r2, #8
 8003f9c:	619a      	str	r2, [r3, #24]
}
 8003f9e:	bf00      	nop
 8003fa0:	3758      	adds	r7, #88	; 0x58
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b096      	sub	sp, #88	; 0x58
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fb4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fbe:	2b22      	cmp	r3, #34	; 0x22
 8003fc0:	f040 8098 	bne.w	80040f4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003fd4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003fd8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003fdc:	4013      	ands	r3, r2
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	1c9a      	adds	r2, r3, #2
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d17b      	bne.n	8004104 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004020:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800402a:	643b      	str	r3, [r7, #64]	; 0x40
 800402c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004030:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e6      	bne.n	800400c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3308      	adds	r3, #8
 8004044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	61fb      	str	r3, [r7, #28]
   return(result);
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	64bb      	str	r3, [r7, #72]	; 0x48
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3308      	adds	r3, #8
 800405c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800405e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004060:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e5      	bne.n	800403e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408a:	2b01      	cmp	r3, #1
 800408c:	d12e      	bne.n	80040ec <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f023 0310 	bic.w	r3, r3, #16
 80040a8:	647b      	str	r3, [r7, #68]	; 0x44
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	6979      	ldr	r1, [r7, #20]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	613b      	str	r3, [r7, #16]
   return(result);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e6      	bne.n	8004094 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b10      	cmp	r3, #16
 80040d2:	d103      	bne.n	80040dc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2210      	movs	r2, #16
 80040da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff f931 	bl	800334c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040ea:	e00b      	b.n	8004104 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff f919 	bl	8003324 <HAL_UART_RxCpltCallback>
}
 80040f2:	e007      	b.n	8004104 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0208 	orr.w	r2, r2, #8
 8004102:	619a      	str	r2, [r3, #24]
}
 8004104:	bf00      	nop
 8004106:	3758      	adds	r7, #88	; 0x58
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800411a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800411e:	2b84      	cmp	r3, #132	; 0x84
 8004120:	d005      	beq.n	800412e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004122:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4413      	add	r3, r2
 800412a:	3303      	adds	r3, #3
 800412c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004140:	f000 fae8 	bl	8004714 <vTaskStartScheduler>
  
  return osOK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	bd80      	pop	{r7, pc}

0800414a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800414a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414c:	b089      	sub	sp, #36	; 0x24
 800414e:	af04      	add	r7, sp, #16
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d020      	beq.n	800419e <osThreadCreate+0x54>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01c      	beq.n	800419e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685c      	ldr	r4, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681d      	ldr	r5, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691e      	ldr	r6, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff ffc8 	bl	800410c <makeFreeRtosPriority>
 800417c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004186:	9202      	str	r2, [sp, #8]
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	9100      	str	r1, [sp, #0]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	4632      	mov	r2, r6
 8004190:	4629      	mov	r1, r5
 8004192:	4620      	mov	r0, r4
 8004194:	f000 f8ed 	bl	8004372 <xTaskCreateStatic>
 8004198:	4603      	mov	r3, r0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e01c      	b.n	80041d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685c      	ldr	r4, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041aa:	b29e      	uxth	r6, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff ffaa 	bl	800410c <makeFreeRtosPriority>
 80041b8:	4602      	mov	r2, r0
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	9200      	str	r2, [sp, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	4632      	mov	r2, r6
 80041c6:	4629      	mov	r1, r5
 80041c8:	4620      	mov	r0, r4
 80041ca:	f000 f935 	bl	8004438 <xTaskCreate>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d001      	beq.n	80041d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e000      	b.n	80041da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80041d8:	68fb      	ldr	r3, [r7, #12]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <osDelay+0x16>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	e000      	b.n	80041fa <osDelay+0x18>
 80041f8:	2301      	movs	r3, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fa54 	bl	80046a8 <vTaskDelay>
  
  return osOK;
 8004200:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f103 0208 	add.w	r2, r3, #8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f04f 32ff 	mov.w	r2, #4294967295
 8004222:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f103 0208 	add.w	r2, r3, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f103 0208 	add.w	r2, r3, #8
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	601a      	str	r2, [r3, #0]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c2:	d103      	bne.n	80042cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	e00c      	b.n	80042e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3308      	adds	r3, #8
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	e002      	b.n	80042da <vListInsert+0x2e>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d2f6      	bcs.n	80042d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
}
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800431e:	b480      	push	{r7}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6892      	ldr	r2, [r2, #8]
 8004334:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6852      	ldr	r2, [r2, #4]
 800433e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	d103      	bne.n	8004352 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004372:	b580      	push	{r7, lr}
 8004374:	b08e      	sub	sp, #56	; 0x38
 8004376:	af04      	add	r7, sp, #16
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10c      	bne.n	80043a0 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	b672      	cpsid	i
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	b662      	cpsie	i
 800439a:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80043a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10c      	bne.n	80043c0 <xTaskCreateStatic+0x4e>
	__asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	b672      	cpsid	i
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	b662      	cpsie	i
 80043ba:	61fb      	str	r3, [r7, #28]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043c0:	2354      	movs	r3, #84	; 0x54
 80043c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b54      	cmp	r3, #84	; 0x54
 80043c8:	d00c      	beq.n	80043e4 <xTaskCreateStatic+0x72>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	b672      	cpsid	i
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	b662      	cpsie	i
 80043de:	61bb      	str	r3, [r7, #24]
}
 80043e0:	bf00      	nop
 80043e2:	e7fe      	b.n	80043e2 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01e      	beq.n	800442a <xTaskCreateStatic+0xb8>
 80043ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01b      	beq.n	800442a <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004404:	2300      	movs	r3, #0
 8004406:	9303      	str	r3, [sp, #12]
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	9302      	str	r3, [sp, #8]
 800440c:	f107 0314 	add.w	r3, r7, #20
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f850 	bl	80044c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004424:	f000 f8d6 	bl	80045d4 <prvAddNewTaskToReadyList>
 8004428:	e001      	b.n	800442e <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800442e:	697b      	ldr	r3, [r7, #20]
	}
 8004430:	4618      	mov	r0, r3
 8004432:	3728      	adds	r7, #40	; 0x28
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08c      	sub	sp, #48	; 0x30
 800443c:	af04      	add	r7, sp, #16
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004448:	88fb      	ldrh	r3, [r7, #6]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4618      	mov	r0, r3
 800444e:	f001 f899 	bl	8005584 <pvPortMalloc>
 8004452:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00e      	beq.n	8004478 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800445a:	2054      	movs	r0, #84	; 0x54
 800445c:	f001 f892 	bl	8005584 <pvPortMalloc>
 8004460:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
 800446e:	e005      	b.n	800447c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004470:	6978      	ldr	r0, [r7, #20]
 8004472:	f001 f951 	bl	8005718 <vPortFree>
 8004476:	e001      	b.n	800447c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004478:	2300      	movs	r3, #0
 800447a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d017      	beq.n	80044b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	2300      	movs	r3, #0
 800448e:	9303      	str	r3, [sp, #12]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	9302      	str	r3, [sp, #8]
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f80e 	bl	80044c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044a6:	69f8      	ldr	r0, [r7, #28]
 80044a8:	f000 f894 	bl	80045d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044ac:	2301      	movs	r3, #1
 80044ae:	61bb      	str	r3, [r7, #24]
 80044b0:	e002      	b.n	80044b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044b2:	f04f 33ff 	mov.w	r3, #4294967295
 80044b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044b8:	69bb      	ldr	r3, [r7, #24]
	}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3720      	adds	r7, #32
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b088      	sub	sp, #32
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80044da:	440b      	add	r3, r1
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	f023 0307 	bic.w	r3, r3, #7
 80044e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00c      	beq.n	800450e <prvInitialiseNewTask+0x4c>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	b672      	cpsid	i
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	b662      	cpsie	i
 8004508:	617b      	str	r3, [r7, #20]
}
 800450a:	bf00      	nop
 800450c:	e7fe      	b.n	800450c <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01f      	beq.n	8004554 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004514:	2300      	movs	r3, #0
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	e012      	b.n	8004540 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	4413      	add	r3, r2
 8004520:	7819      	ldrb	r1, [r3, #0]
 8004522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	4413      	add	r3, r2
 8004528:	3334      	adds	r3, #52	; 0x34
 800452a:	460a      	mov	r2, r1
 800452c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d006      	beq.n	8004548 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	3301      	adds	r3, #1
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	2b0f      	cmp	r3, #15
 8004544:	d9e9      	bls.n	800451a <prvInitialiseNewTask+0x58>
 8004546:	e000      	b.n	800454a <prvInitialiseNewTask+0x88>
			{
				break;
 8004548:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004552:	e003      	b.n	800455c <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	2b06      	cmp	r3, #6
 8004560:	d901      	bls.n	8004566 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004562:	2306      	movs	r3, #6
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800456a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004570:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	2200      	movs	r2, #0
 8004576:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	3304      	adds	r3, #4
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fe64 	bl	800424a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	3318      	adds	r3, #24
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fe5f 	bl	800424a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004590:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	f1c3 0207 	rsb	r2, r3, #7
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	2200      	movs	r2, #0
 80045a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	68f9      	ldr	r1, [r7, #12]
 80045b4:	69b8      	ldr	r0, [r7, #24]
 80045b6:	f000 fdaf 	bl	8005118 <pxPortInitialiseStack>
 80045ba:	4602      	mov	r2, r0
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045cc:	bf00      	nop
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045dc:	f000 fea6 	bl	800532c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045e0:	4b2a      	ldr	r3, [pc, #168]	; (800468c <prvAddNewTaskToReadyList+0xb8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3301      	adds	r3, #1
 80045e6:	4a29      	ldr	r2, [pc, #164]	; (800468c <prvAddNewTaskToReadyList+0xb8>)
 80045e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045ea:	4b29      	ldr	r3, [pc, #164]	; (8004690 <prvAddNewTaskToReadyList+0xbc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045f2:	4a27      	ldr	r2, [pc, #156]	; (8004690 <prvAddNewTaskToReadyList+0xbc>)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045f8:	4b24      	ldr	r3, [pc, #144]	; (800468c <prvAddNewTaskToReadyList+0xb8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d110      	bne.n	8004622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004600:	f000 fac8 	bl	8004b94 <prvInitialiseTaskLists>
 8004604:	e00d      	b.n	8004622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004606:	4b23      	ldr	r3, [pc, #140]	; (8004694 <prvAddNewTaskToReadyList+0xc0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800460e:	4b20      	ldr	r3, [pc, #128]	; (8004690 <prvAddNewTaskToReadyList+0xbc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	429a      	cmp	r2, r3
 800461a:	d802      	bhi.n	8004622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800461c:	4a1c      	ldr	r2, [pc, #112]	; (8004690 <prvAddNewTaskToReadyList+0xbc>)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004622:	4b1d      	ldr	r3, [pc, #116]	; (8004698 <prvAddNewTaskToReadyList+0xc4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3301      	adds	r3, #1
 8004628:	4a1b      	ldr	r2, [pc, #108]	; (8004698 <prvAddNewTaskToReadyList+0xc4>)
 800462a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	2201      	movs	r2, #1
 8004632:	409a      	lsls	r2, r3
 8004634:	4b19      	ldr	r3, [pc, #100]	; (800469c <prvAddNewTaskToReadyList+0xc8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4313      	orrs	r3, r2
 800463a:	4a18      	ldr	r2, [pc, #96]	; (800469c <prvAddNewTaskToReadyList+0xc8>)
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <prvAddNewTaskToReadyList+0xcc>)
 800464c:	441a      	add	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3304      	adds	r3, #4
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f7ff fe05 	bl	8004264 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800465a:	f000 fe9b 	bl	8005394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800465e:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <prvAddNewTaskToReadyList+0xc0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00e      	beq.n	8004684 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004666:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <prvAddNewTaskToReadyList+0xbc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	429a      	cmp	r2, r3
 8004672:	d207      	bcs.n	8004684 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <prvAddNewTaskToReadyList+0xd0>)
 8004676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	200004d4 	.word	0x200004d4
 8004690:	200003d4 	.word	0x200003d4
 8004694:	200004e0 	.word	0x200004e0
 8004698:	200004f0 	.word	0x200004f0
 800469c:	200004dc 	.word	0x200004dc
 80046a0:	200003d8 	.word	0x200003d8
 80046a4:	e000ed04 	.word	0xe000ed04

080046a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d019      	beq.n	80046ee <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046ba:	4b14      	ldr	r3, [pc, #80]	; (800470c <vTaskDelay+0x64>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00c      	beq.n	80046dc <vTaskDelay+0x34>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	b672      	cpsid	i
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	b662      	cpsie	i
 80046d6:	60bb      	str	r3, [r7, #8]
}
 80046d8:	bf00      	nop
 80046da:	e7fe      	b.n	80046da <vTaskDelay+0x32>
			vTaskSuspendAll();
 80046dc:	f000 f87e 	bl	80047dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046e0:	2100      	movs	r1, #0
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fcb2 	bl	800504c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046e8:	f000 f886 	bl	80047f8 <xTaskResumeAll>
 80046ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d107      	bne.n	8004704 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <vTaskDelay+0x68>)
 80046f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004704:	bf00      	nop
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	200004fc 	.word	0x200004fc
 8004710:	e000ed04 	.word	0xe000ed04

08004714 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08a      	sub	sp, #40	; 0x28
 8004718:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800471e:	2300      	movs	r3, #0
 8004720:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004722:	463a      	mov	r2, r7
 8004724:	1d39      	adds	r1, r7, #4
 8004726:	f107 0308 	add.w	r3, r7, #8
 800472a:	4618      	mov	r0, r3
 800472c:	f7fb fef2 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004730:	6839      	ldr	r1, [r7, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	9202      	str	r2, [sp, #8]
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	2300      	movs	r3, #0
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	2300      	movs	r3, #0
 8004740:	460a      	mov	r2, r1
 8004742:	4920      	ldr	r1, [pc, #128]	; (80047c4 <vTaskStartScheduler+0xb0>)
 8004744:	4820      	ldr	r0, [pc, #128]	; (80047c8 <vTaskStartScheduler+0xb4>)
 8004746:	f7ff fe14 	bl	8004372 <xTaskCreateStatic>
 800474a:	4603      	mov	r3, r0
 800474c:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <vTaskStartScheduler+0xb8>)
 800474e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004750:	4b1e      	ldr	r3, [pc, #120]	; (80047cc <vTaskStartScheduler+0xb8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004758:	2301      	movs	r3, #1
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	e001      	b.n	8004762 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d118      	bne.n	800479a <vTaskStartScheduler+0x86>
	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	b672      	cpsid	i
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	b662      	cpsie	i
 800477c:	613b      	str	r3, [r7, #16]
}
 800477e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004780:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <vTaskStartScheduler+0xbc>)
 8004782:	f04f 32ff 	mov.w	r2, #4294967295
 8004786:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004788:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <vTaskStartScheduler+0xc0>)
 800478a:	2201      	movs	r2, #1
 800478c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800478e:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <vTaskStartScheduler+0xc4>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004794:	f000 fd4c 	bl	8005230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004798:	e010      	b.n	80047bc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d10c      	bne.n	80047bc <vTaskStartScheduler+0xa8>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	b672      	cpsid	i
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	b662      	cpsie	i
 80047b6:	60fb      	str	r3, [r7, #12]
}
 80047b8:	bf00      	nop
 80047ba:	e7fe      	b.n	80047ba <vTaskStartScheduler+0xa6>
}
 80047bc:	bf00      	nop
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	0800644c 	.word	0x0800644c
 80047c8:	08004b65 	.word	0x08004b65
 80047cc:	200004f8 	.word	0x200004f8
 80047d0:	200004f4 	.word	0x200004f4
 80047d4:	200004e0 	.word	0x200004e0
 80047d8:	200004d8 	.word	0x200004d8

080047dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047e0:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <vTaskSuspendAll+0x18>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	4a03      	ldr	r2, [pc, #12]	; (80047f4 <vTaskSuspendAll+0x18>)
 80047e8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80047ea:	bf00      	nop
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	200004fc 	.word	0x200004fc

080047f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004802:	2300      	movs	r3, #0
 8004804:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004806:	4b42      	ldr	r3, [pc, #264]	; (8004910 <xTaskResumeAll+0x118>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10c      	bne.n	8004828 <xTaskResumeAll+0x30>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	b672      	cpsid	i
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	b662      	cpsie	i
 8004822:	603b      	str	r3, [r7, #0]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004828:	f000 fd80 	bl	800532c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800482c:	4b38      	ldr	r3, [pc, #224]	; (8004910 <xTaskResumeAll+0x118>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3b01      	subs	r3, #1
 8004832:	4a37      	ldr	r2, [pc, #220]	; (8004910 <xTaskResumeAll+0x118>)
 8004834:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004836:	4b36      	ldr	r3, [pc, #216]	; (8004910 <xTaskResumeAll+0x118>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d161      	bne.n	8004902 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800483e:	4b35      	ldr	r3, [pc, #212]	; (8004914 <xTaskResumeAll+0x11c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d05d      	beq.n	8004902 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004846:	e02e      	b.n	80048a6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004848:	4b33      	ldr	r3, [pc, #204]	; (8004918 <xTaskResumeAll+0x120>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3318      	adds	r3, #24
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff fd62 	bl	800431e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3304      	adds	r3, #4
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff fd5d 	bl	800431e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	2201      	movs	r2, #1
 800486a:	409a      	lsls	r2, r3
 800486c:	4b2b      	ldr	r3, [pc, #172]	; (800491c <xTaskResumeAll+0x124>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4313      	orrs	r3, r2
 8004872:	4a2a      	ldr	r2, [pc, #168]	; (800491c <xTaskResumeAll+0x124>)
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4a27      	ldr	r2, [pc, #156]	; (8004920 <xTaskResumeAll+0x128>)
 8004884:	441a      	add	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3304      	adds	r3, #4
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f7ff fce9 	bl	8004264 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004896:	4b23      	ldr	r3, [pc, #140]	; (8004924 <xTaskResumeAll+0x12c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80048a0:	4b21      	ldr	r3, [pc, #132]	; (8004928 <xTaskResumeAll+0x130>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048a6:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <xTaskResumeAll+0x120>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1cc      	bne.n	8004848 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048b4:	f000 fa0e 	bl	8004cd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048b8:	4b1c      	ldr	r3, [pc, #112]	; (800492c <xTaskResumeAll+0x134>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d010      	beq.n	80048e6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048c4:	f000 f836 	bl	8004934 <xTaskIncrementTick>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80048ce:	4b16      	ldr	r3, [pc, #88]	; (8004928 <xTaskResumeAll+0x130>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1f1      	bne.n	80048c4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80048e0:	4b12      	ldr	r3, [pc, #72]	; (800492c <xTaskResumeAll+0x134>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048e6:	4b10      	ldr	r3, [pc, #64]	; (8004928 <xTaskResumeAll+0x130>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048ee:	2301      	movs	r3, #1
 80048f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048f2:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <xTaskResumeAll+0x138>)
 80048f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004902:	f000 fd47 	bl	8005394 <vPortExitCritical>

	return xAlreadyYielded;
 8004906:	68bb      	ldr	r3, [r7, #8]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	200004fc 	.word	0x200004fc
 8004914:	200004d4 	.word	0x200004d4
 8004918:	20000494 	.word	0x20000494
 800491c:	200004dc 	.word	0x200004dc
 8004920:	200003d8 	.word	0x200003d8
 8004924:	200003d4 	.word	0x200003d4
 8004928:	200004e8 	.word	0x200004e8
 800492c:	200004e4 	.word	0x200004e4
 8004930:	e000ed04 	.word	0xe000ed04

08004934 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800493e:	4b4f      	ldr	r3, [pc, #316]	; (8004a7c <xTaskIncrementTick+0x148>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f040 808a 	bne.w	8004a5c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004948:	4b4d      	ldr	r3, [pc, #308]	; (8004a80 <xTaskIncrementTick+0x14c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3301      	adds	r3, #1
 800494e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004950:	4a4b      	ldr	r2, [pc, #300]	; (8004a80 <xTaskIncrementTick+0x14c>)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d122      	bne.n	80049a2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800495c:	4b49      	ldr	r3, [pc, #292]	; (8004a84 <xTaskIncrementTick+0x150>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00c      	beq.n	8004980 <xTaskIncrementTick+0x4c>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	b672      	cpsid	i
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	b662      	cpsie	i
 800497a:	603b      	str	r3, [r7, #0]
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <xTaskIncrementTick+0x4a>
 8004980:	4b40      	ldr	r3, [pc, #256]	; (8004a84 <xTaskIncrementTick+0x150>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	4b40      	ldr	r3, [pc, #256]	; (8004a88 <xTaskIncrementTick+0x154>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a3e      	ldr	r2, [pc, #248]	; (8004a84 <xTaskIncrementTick+0x150>)
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	4a3e      	ldr	r2, [pc, #248]	; (8004a88 <xTaskIncrementTick+0x154>)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	4b3d      	ldr	r3, [pc, #244]	; (8004a8c <xTaskIncrementTick+0x158>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3301      	adds	r3, #1
 800499a:	4a3c      	ldr	r2, [pc, #240]	; (8004a8c <xTaskIncrementTick+0x158>)
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	f000 f999 	bl	8004cd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049a2:	4b3b      	ldr	r3, [pc, #236]	; (8004a90 <xTaskIncrementTick+0x15c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d348      	bcc.n	8004a3e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ac:	4b35      	ldr	r3, [pc, #212]	; (8004a84 <xTaskIncrementTick+0x150>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d104      	bne.n	80049c0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b6:	4b36      	ldr	r3, [pc, #216]	; (8004a90 <xTaskIncrementTick+0x15c>)
 80049b8:	f04f 32ff 	mov.w	r2, #4294967295
 80049bc:	601a      	str	r2, [r3, #0]
					break;
 80049be:	e03e      	b.n	8004a3e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c0:	4b30      	ldr	r3, [pc, #192]	; (8004a84 <xTaskIncrementTick+0x150>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d203      	bcs.n	80049e0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049d8:	4a2d      	ldr	r2, [pc, #180]	; (8004a90 <xTaskIncrementTick+0x15c>)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049de:	e02e      	b.n	8004a3e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fc9a 	bl	800431e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d004      	beq.n	80049fc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	3318      	adds	r3, #24
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fc91 	bl	800431e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	2201      	movs	r2, #1
 8004a02:	409a      	lsls	r2, r3
 8004a04:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <xTaskIncrementTick+0x160>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	4a22      	ldr	r2, [pc, #136]	; (8004a94 <xTaskIncrementTick+0x160>)
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4a1f      	ldr	r2, [pc, #124]	; (8004a98 <xTaskIncrementTick+0x164>)
 8004a1c:	441a      	add	r2, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4619      	mov	r1, r3
 8004a24:	4610      	mov	r0, r2
 8004a26:	f7ff fc1d 	bl	8004264 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2e:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <xTaskIncrementTick+0x168>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d3b9      	bcc.n	80049ac <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a3c:	e7b6      	b.n	80049ac <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a3e:	4b17      	ldr	r3, [pc, #92]	; (8004a9c <xTaskIncrementTick+0x168>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a44:	4914      	ldr	r1, [pc, #80]	; (8004a98 <xTaskIncrementTick+0x164>)
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d907      	bls.n	8004a66 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8004a56:	2301      	movs	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	e004      	b.n	8004a66 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a5c:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <xTaskIncrementTick+0x16c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3301      	adds	r3, #1
 8004a62:	4a0f      	ldr	r2, [pc, #60]	; (8004aa0 <xTaskIncrementTick+0x16c>)
 8004a64:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a66:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <xTaskIncrementTick+0x170>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a72:	697b      	ldr	r3, [r7, #20]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	200004fc 	.word	0x200004fc
 8004a80:	200004d8 	.word	0x200004d8
 8004a84:	2000048c 	.word	0x2000048c
 8004a88:	20000490 	.word	0x20000490
 8004a8c:	200004ec 	.word	0x200004ec
 8004a90:	200004f4 	.word	0x200004f4
 8004a94:	200004dc 	.word	0x200004dc
 8004a98:	200003d8 	.word	0x200003d8
 8004a9c:	200003d4 	.word	0x200003d4
 8004aa0:	200004e4 	.word	0x200004e4
 8004aa4:	200004e8 	.word	0x200004e8

08004aa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004aae:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <vTaskSwitchContext+0xa8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ab6:	4b27      	ldr	r3, [pc, #156]	; (8004b54 <vTaskSwitchContext+0xac>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004abc:	e041      	b.n	8004b42 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004abe:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <vTaskSwitchContext+0xac>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac4:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <vTaskSwitchContext+0xb0>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	fab3 f383 	clz	r3, r3
 8004ad0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004ad2:	7afb      	ldrb	r3, [r7, #11]
 8004ad4:	f1c3 031f 	rsb	r3, r3, #31
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	4920      	ldr	r1, [pc, #128]	; (8004b5c <vTaskSwitchContext+0xb4>)
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10c      	bne.n	8004b08 <vTaskSwitchContext+0x60>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	b672      	cpsid	i
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	b662      	cpsie	i
 8004b02:	607b      	str	r3, [r7, #4]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <vTaskSwitchContext+0x5e>
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4a12      	ldr	r2, [pc, #72]	; (8004b5c <vTaskSwitchContext+0xb4>)
 8004b14:	4413      	add	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3308      	adds	r3, #8
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d104      	bne.n	8004b38 <vTaskSwitchContext+0x90>
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	605a      	str	r2, [r3, #4]
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <vTaskSwitchContext+0xb8>)
 8004b40:	6013      	str	r3, [r2, #0]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	200004fc 	.word	0x200004fc
 8004b54:	200004e8 	.word	0x200004e8
 8004b58:	200004dc 	.word	0x200004dc
 8004b5c:	200003d8 	.word	0x200003d8
 8004b60:	200003d4 	.word	0x200003d4

08004b64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b6c:	f000 f852 	bl	8004c14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <prvIdleTask+0x28>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d9f9      	bls.n	8004b6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <prvIdleTask+0x2c>)
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b88:	e7f0      	b.n	8004b6c <prvIdleTask+0x8>
 8004b8a:	bf00      	nop
 8004b8c:	200003d8 	.word	0x200003d8
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	e00c      	b.n	8004bba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <prvInitialiseTaskLists+0x60>)
 8004bac:	4413      	add	r3, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff fb2b 	bl	800420a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	607b      	str	r3, [r7, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b06      	cmp	r3, #6
 8004bbe:	d9ef      	bls.n	8004ba0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bc0:	480d      	ldr	r0, [pc, #52]	; (8004bf8 <prvInitialiseTaskLists+0x64>)
 8004bc2:	f7ff fb22 	bl	800420a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bc6:	480d      	ldr	r0, [pc, #52]	; (8004bfc <prvInitialiseTaskLists+0x68>)
 8004bc8:	f7ff fb1f 	bl	800420a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bcc:	480c      	ldr	r0, [pc, #48]	; (8004c00 <prvInitialiseTaskLists+0x6c>)
 8004bce:	f7ff fb1c 	bl	800420a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bd2:	480c      	ldr	r0, [pc, #48]	; (8004c04 <prvInitialiseTaskLists+0x70>)
 8004bd4:	f7ff fb19 	bl	800420a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bd8:	480b      	ldr	r0, [pc, #44]	; (8004c08 <prvInitialiseTaskLists+0x74>)
 8004bda:	f7ff fb16 	bl	800420a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bde:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <prvInitialiseTaskLists+0x78>)
 8004be0:	4a05      	ldr	r2, [pc, #20]	; (8004bf8 <prvInitialiseTaskLists+0x64>)
 8004be2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004be4:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <prvInitialiseTaskLists+0x7c>)
 8004be6:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <prvInitialiseTaskLists+0x68>)
 8004be8:	601a      	str	r2, [r3, #0]
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	200003d8 	.word	0x200003d8
 8004bf8:	20000464 	.word	0x20000464
 8004bfc:	20000478 	.word	0x20000478
 8004c00:	20000494 	.word	0x20000494
 8004c04:	200004a8 	.word	0x200004a8
 8004c08:	200004c0 	.word	0x200004c0
 8004c0c:	2000048c 	.word	0x2000048c
 8004c10:	20000490 	.word	0x20000490

08004c14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c1a:	e019      	b.n	8004c50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c1c:	f000 fb86 	bl	800532c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c20:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <prvCheckTasksWaitingTermination+0x50>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff fb76 	bl	800431e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c32:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <prvCheckTasksWaitingTermination+0x54>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	4a0b      	ldr	r2, [pc, #44]	; (8004c68 <prvCheckTasksWaitingTermination+0x54>)
 8004c3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <prvCheckTasksWaitingTermination+0x58>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <prvCheckTasksWaitingTermination+0x58>)
 8004c44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c46:	f000 fba5 	bl	8005394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f810 	bl	8004c70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c50:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <prvCheckTasksWaitingTermination+0x58>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e1      	bne.n	8004c1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	200004a8 	.word	0x200004a8
 8004c68:	200004d4 	.word	0x200004d4
 8004c6c:	200004bc 	.word	0x200004bc

08004c70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d108      	bne.n	8004c94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fd46 	bl	8005718 <vPortFree>
				vPortFree( pxTCB );
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fd43 	bl	8005718 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c92:	e01a      	b.n	8004cca <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d103      	bne.n	8004ca6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fd3a 	bl	8005718 <vPortFree>
	}
 8004ca4:	e011      	b.n	8004cca <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d00c      	beq.n	8004cca <prvDeleteTCB+0x5a>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	b672      	cpsid	i
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	b662      	cpsie	i
 8004cc4:	60fb      	str	r3, [r7, #12]
}
 8004cc6:	bf00      	nop
 8004cc8:	e7fe      	b.n	8004cc8 <prvDeleteTCB+0x58>
	}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cda:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <prvResetNextTaskUnblockTime+0x38>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d104      	bne.n	8004cee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <prvResetNextTaskUnblockTime+0x3c>)
 8004ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cec:	e008      	b.n	8004d00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cee:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <prvResetNextTaskUnblockTime+0x38>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <prvResetNextTaskUnblockTime+0x3c>)
 8004cfe:	6013      	str	r3, [r2, #0]
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	2000048c 	.word	0x2000048c
 8004d10:	200004f4 	.word	0x200004f4

08004d14 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8004d1e:	f000 fb05 	bl	800532c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004d22:	4b1e      	ldr	r3, [pc, #120]	; (8004d9c <ulTaskNotifyTake+0x88>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d113      	bne.n	8004d54 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <ulTaskNotifyTake+0x88>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00b      	beq.n	8004d54 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	6838      	ldr	r0, [r7, #0]
 8004d40:	f000 f984 	bl	800504c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004d44:	4b16      	ldr	r3, [pc, #88]	; (8004da0 <ulTaskNotifyTake+0x8c>)
 8004d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004d54:	f000 fb1e 	bl	8005394 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004d58:	f000 fae8 	bl	800532c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <ulTaskNotifyTake+0x88>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d62:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00c      	beq.n	8004d84 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d004      	beq.n	8004d7a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004d70:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <ulTaskNotifyTake+0x88>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2200      	movs	r2, #0
 8004d76:	64da      	str	r2, [r3, #76]	; 0x4c
 8004d78:	e004      	b.n	8004d84 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8004d7a:	4b08      	ldr	r3, [pc, #32]	; (8004d9c <ulTaskNotifyTake+0x88>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	3a01      	subs	r2, #1
 8004d82:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d84:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <ulTaskNotifyTake+0x88>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8004d8e:	f000 fb01 	bl	8005394 <vPortExitCritical>

		return ulReturn;
 8004d92:	68fb      	ldr	r3, [r7, #12]
	}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	200003d4 	.word	0x200003d4
 8004da0:	e000ed04 	.word	0xe000ed04

08004da4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004db4:	2301      	movs	r3, #1
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <xTaskGenericNotify+0x34>
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	b672      	cpsid	i
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	b662      	cpsie	i
 8004dd2:	61bb      	str	r3, [r7, #24]
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004ddc:	f000 faa6 	bl	800532c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004df4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d828      	bhi.n	8004e56 <xTaskGenericNotify+0xb2>
 8004e04:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <xTaskGenericNotify+0x68>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e7b 	.word	0x08004e7b
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e2f 	.word	0x08004e2f
 8004e18:	08004e3b 	.word	0x08004e3b
 8004e1c:	08004e43 	.word	0x08004e43
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004e2c:	e028      	b.n	8004e80 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004e38:	e022      	b.n	8004e80 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004e40:	e01e      	b.n	8004e80 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004e42:	7ffb      	ldrb	r3, [r7, #31]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d003      	beq.n	8004e50 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004e4e:	e017      	b.n	8004e80 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004e54:	e014      	b.n	8004e80 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5e:	d00e      	beq.n	8004e7e <xTaskGenericNotify+0xda>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	b672      	cpsid	i
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	b662      	cpsie	i
 8004e74:	617b      	str	r3, [r7, #20]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xTaskGenericNotify+0xd4>
					break;
 8004e7a:	bf00      	nop
 8004e7c:	e000      	b.n	8004e80 <xTaskGenericNotify+0xdc>

					break;
 8004e7e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004e80:	7ffb      	ldrb	r3, [r7, #31]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d13b      	bne.n	8004efe <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fa47 	bl	800431e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	2201      	movs	r2, #1
 8004e96:	409a      	lsls	r2, r3
 8004e98:	4b1c      	ldr	r3, [pc, #112]	; (8004f0c <xTaskGenericNotify+0x168>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <xTaskGenericNotify+0x168>)
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4a18      	ldr	r2, [pc, #96]	; (8004f10 <xTaskGenericNotify+0x16c>)
 8004eb0:	441a      	add	r2, r3
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f7ff f9d3 	bl	8004264 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00c      	beq.n	8004ee0 <xTaskGenericNotify+0x13c>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	b672      	cpsid	i
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	b662      	cpsie	i
 8004eda:	613b      	str	r3, [r7, #16]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <xTaskGenericNotify+0x170>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d907      	bls.n	8004efe <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <xTaskGenericNotify+0x174>)
 8004ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004efe:	f000 fa49 	bl	8005394 <vPortExitCritical>

		return xReturn;
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3728      	adds	r7, #40	; 0x28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	200004dc 	.word	0x200004dc
 8004f10:	200003d8 	.word	0x200003d8
 8004f14:	200003d4 	.word	0x200003d4
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08a      	sub	sp, #40	; 0x28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10c      	bne.n	8004f46 <vTaskNotifyGiveFromISR+0x2a>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	b672      	cpsid	i
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	b662      	cpsie	i
 8004f40:	61bb      	str	r3, [r7, #24]
}
 8004f42:	bf00      	nop
 8004f44:	e7fe      	b.n	8004f44 <vTaskNotifyGiveFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f46:	f000 fad9 	bl	80054fc <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f4e:	f3ef 8211 	mrs	r2, BASEPRI
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	b672      	cpsid	i
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	b662      	cpsie	i
 8004f66:	617a      	str	r2, [r7, #20]
 8004f68:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f6a:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f6c:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f74:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	2202      	movs	r2, #2
 8004f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004f88:	7ffb      	ldrb	r3, [r7, #31]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d147      	bne.n	800501e <vTaskNotifyGiveFromISR+0x102>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00c      	beq.n	8004fb0 <vTaskNotifyGiveFromISR+0x94>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	b672      	cpsid	i
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	b662      	cpsie	i
 8004faa:	60fb      	str	r3, [r7, #12]
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <vTaskNotifyGiveFromISR+0x92>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fb0:	4b20      	ldr	r3, [pc, #128]	; (8005034 <vTaskNotifyGiveFromISR+0x118>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d11c      	bne.n	8004ff2 <vTaskNotifyGiveFromISR+0xd6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff f9ae 	bl	800431e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <vTaskNotifyGiveFromISR+0x11c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	4a19      	ldr	r2, [pc, #100]	; (8005038 <vTaskNotifyGiveFromISR+0x11c>)
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4a16      	ldr	r2, [pc, #88]	; (800503c <vTaskNotifyGiveFromISR+0x120>)
 8004fe2:	441a      	add	r2, r3
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f7ff f93a 	bl	8004264 <vListInsertEnd>
 8004ff0:	e005      	b.n	8004ffe <vTaskNotifyGiveFromISR+0xe2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	3318      	adds	r3, #24
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4811      	ldr	r0, [pc, #68]	; (8005040 <vTaskNotifyGiveFromISR+0x124>)
 8004ffa:	f7ff f933 	bl	8004264 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005002:	4b10      	ldr	r3, [pc, #64]	; (8005044 <vTaskNotifyGiveFromISR+0x128>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	429a      	cmp	r2, r3
 800500a:	d908      	bls.n	800501e <vTaskNotifyGiveFromISR+0x102>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <vTaskNotifyGiveFromISR+0xfc>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2201      	movs	r2, #1
 8005016:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <vTaskNotifyGiveFromISR+0x12c>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005028:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800502a:	bf00      	nop
 800502c:	3728      	adds	r7, #40	; 0x28
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	200004fc 	.word	0x200004fc
 8005038:	200004dc 	.word	0x200004dc
 800503c:	200003d8 	.word	0x200003d8
 8005040:	20000494 	.word	0x20000494
 8005044:	200003d4 	.word	0x200003d4
 8005048:	200004e8 	.word	0x200004e8

0800504c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005056:	4b29      	ldr	r3, [pc, #164]	; (80050fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800505c:	4b28      	ldr	r3, [pc, #160]	; (8005100 <prvAddCurrentTaskToDelayedList+0xb4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3304      	adds	r3, #4
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff f95b 	bl	800431e <uxListRemove>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10b      	bne.n	8005086 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800506e:	4b24      	ldr	r3, [pc, #144]	; (8005100 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	2201      	movs	r2, #1
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	43da      	mvns	r2, r3
 800507c:	4b21      	ldr	r3, [pc, #132]	; (8005104 <prvAddCurrentTaskToDelayedList+0xb8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4013      	ands	r3, r2
 8005082:	4a20      	ldr	r2, [pc, #128]	; (8005104 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005084:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d10a      	bne.n	80050a4 <prvAddCurrentTaskToDelayedList+0x58>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d007      	beq.n	80050a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005094:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3304      	adds	r3, #4
 800509a:	4619      	mov	r1, r3
 800509c:	481a      	ldr	r0, [pc, #104]	; (8005108 <prvAddCurrentTaskToDelayedList+0xbc>)
 800509e:	f7ff f8e1 	bl	8004264 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050a2:	e026      	b.n	80050f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4413      	add	r3, r2
 80050aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050ac:	4b14      	ldr	r3, [pc, #80]	; (8005100 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d209      	bcs.n	80050d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050bc:	4b13      	ldr	r3, [pc, #76]	; (800510c <prvAddCurrentTaskToDelayedList+0xc0>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3304      	adds	r3, #4
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f7ff f8ef 	bl	80042ac <vListInsert>
}
 80050ce:	e010      	b.n	80050f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <prvAddCurrentTaskToDelayedList+0xc4>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3304      	adds	r3, #4
 80050da:	4619      	mov	r1, r3
 80050dc:	4610      	mov	r0, r2
 80050de:	f7ff f8e5 	bl	80042ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050e2:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d202      	bcs.n	80050f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80050ec:	4a09      	ldr	r2, [pc, #36]	; (8005114 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	6013      	str	r3, [r2, #0]
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	200004d8 	.word	0x200004d8
 8005100:	200003d4 	.word	0x200003d4
 8005104:	200004dc 	.word	0x200004dc
 8005108:	200004c0 	.word	0x200004c0
 800510c:	20000490 	.word	0x20000490
 8005110:	2000048c 	.word	0x2000048c
 8005114:	200004f4 	.word	0x200004f4

08005118 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	3b04      	subs	r3, #4
 8005128:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005130:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3b04      	subs	r3, #4
 8005136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f023 0201 	bic.w	r2, r3, #1
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3b04      	subs	r3, #4
 8005146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005148:	4a0c      	ldr	r2, [pc, #48]	; (800517c <pxPortInitialiseStack+0x64>)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3b14      	subs	r3, #20
 8005152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3b04      	subs	r3, #4
 800515e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f06f 0202 	mvn.w	r2, #2
 8005166:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3b20      	subs	r3, #32
 800516c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800516e:	68fb      	ldr	r3, [r7, #12]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	08005181 	.word	0x08005181

08005180 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005186:	2300      	movs	r3, #0
 8005188:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800518a:	4b14      	ldr	r3, [pc, #80]	; (80051dc <prvTaskExitError+0x5c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d00c      	beq.n	80051ae <prvTaskExitError+0x2e>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	b672      	cpsid	i
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	b662      	cpsie	i
 80051a8:	60fb      	str	r3, [r7, #12]
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <prvTaskExitError+0x2c>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	b672      	cpsid	i
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	b662      	cpsie	i
 80051c2:	60bb      	str	r3, [r7, #8]
}
 80051c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051c6:	bf00      	nop
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0fc      	beq.n	80051c8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051ce:	bf00      	nop
 80051d0:	bf00      	nop
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	2000000c 	.word	0x2000000c

080051e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051e0:	4b07      	ldr	r3, [pc, #28]	; (8005200 <pxCurrentTCBConst2>)
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	6808      	ldr	r0, [r1, #0]
 80051e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ea:	f380 8809 	msr	PSP, r0
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f380 8811 	msr	BASEPRI, r0
 80051fa:	4770      	bx	lr
 80051fc:	f3af 8000 	nop.w

08005200 <pxCurrentTCBConst2>:
 8005200:	200003d4 	.word	0x200003d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop

08005208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005208:	4808      	ldr	r0, [pc, #32]	; (800522c <prvPortStartFirstTask+0x24>)
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	6800      	ldr	r0, [r0, #0]
 800520e:	f380 8808 	msr	MSP, r0
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f380 8814 	msr	CONTROL, r0
 800521a:	b662      	cpsie	i
 800521c:	b661      	cpsie	f
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	df00      	svc	0
 8005228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800522a:	bf00      	nop
 800522c:	e000ed08 	.word	0xe000ed08

08005230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005236:	4b37      	ldr	r3, [pc, #220]	; (8005314 <xPortStartScheduler+0xe4>)
 8005238:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	22ff      	movs	r2, #255	; 0xff
 8005246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005258:	b2da      	uxtb	r2, r3
 800525a:	4b2f      	ldr	r3, [pc, #188]	; (8005318 <xPortStartScheduler+0xe8>)
 800525c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800525e:	4b2f      	ldr	r3, [pc, #188]	; (800531c <xPortStartScheduler+0xec>)
 8005260:	2207      	movs	r2, #7
 8005262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005264:	e009      	b.n	800527a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005266:	4b2d      	ldr	r3, [pc, #180]	; (800531c <xPortStartScheduler+0xec>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3b01      	subs	r3, #1
 800526c:	4a2b      	ldr	r2, [pc, #172]	; (800531c <xPortStartScheduler+0xec>)
 800526e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	b2db      	uxtb	r3, r3
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	b2db      	uxtb	r3, r3
 8005278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005282:	2b80      	cmp	r3, #128	; 0x80
 8005284:	d0ef      	beq.n	8005266 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005286:	4b25      	ldr	r3, [pc, #148]	; (800531c <xPortStartScheduler+0xec>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f1c3 0307 	rsb	r3, r3, #7
 800528e:	2b04      	cmp	r3, #4
 8005290:	d00c      	beq.n	80052ac <xPortStartScheduler+0x7c>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	b672      	cpsid	i
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	b662      	cpsie	i
 80052a6:	60bb      	str	r3, [r7, #8]
}
 80052a8:	bf00      	nop
 80052aa:	e7fe      	b.n	80052aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052ac:	4b1b      	ldr	r3, [pc, #108]	; (800531c <xPortStartScheduler+0xec>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	4a1a      	ldr	r2, [pc, #104]	; (800531c <xPortStartScheduler+0xec>)
 80052b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052b6:	4b19      	ldr	r3, [pc, #100]	; (800531c <xPortStartScheduler+0xec>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052be:	4a17      	ldr	r2, [pc, #92]	; (800531c <xPortStartScheduler+0xec>)
 80052c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052ca:	4b15      	ldr	r3, [pc, #84]	; (8005320 <xPortStartScheduler+0xf0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a14      	ldr	r2, [pc, #80]	; (8005320 <xPortStartScheduler+0xf0>)
 80052d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052d6:	4b12      	ldr	r3, [pc, #72]	; (8005320 <xPortStartScheduler+0xf0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a11      	ldr	r2, [pc, #68]	; (8005320 <xPortStartScheduler+0xf0>)
 80052dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80052e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052e2:	f000 f8dd 	bl	80054a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052e6:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <xPortStartScheduler+0xf4>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052ec:	f000 f8fc 	bl	80054e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052f0:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <xPortStartScheduler+0xf8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a0c      	ldr	r2, [pc, #48]	; (8005328 <xPortStartScheduler+0xf8>)
 80052f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80052fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052fc:	f7ff ff84 	bl	8005208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005300:	f7ff fbd2 	bl	8004aa8 <vTaskSwitchContext>
	prvTaskExitError();
 8005304:	f7ff ff3c 	bl	8005180 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	e000e400 	.word	0xe000e400
 8005318:	20000500 	.word	0x20000500
 800531c:	20000504 	.word	0x20000504
 8005320:	e000ed20 	.word	0xe000ed20
 8005324:	2000000c 	.word	0x2000000c
 8005328:	e000ef34 	.word	0xe000ef34

0800532c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
	__asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005336:	b672      	cpsid	i
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	b662      	cpsie	i
 8005346:	607b      	str	r3, [r7, #4]
}
 8005348:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800534a:	4b10      	ldr	r3, [pc, #64]	; (800538c <vPortEnterCritical+0x60>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3301      	adds	r3, #1
 8005350:	4a0e      	ldr	r2, [pc, #56]	; (800538c <vPortEnterCritical+0x60>)
 8005352:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005354:	4b0d      	ldr	r3, [pc, #52]	; (800538c <vPortEnterCritical+0x60>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d111      	bne.n	8005380 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800535c:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <vPortEnterCritical+0x64>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00c      	beq.n	8005380 <vPortEnterCritical+0x54>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	b672      	cpsid	i
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	b662      	cpsie	i
 800537a:	603b      	str	r3, [r7, #0]
}
 800537c:	bf00      	nop
 800537e:	e7fe      	b.n	800537e <vPortEnterCritical+0x52>
	}
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	2000000c 	.word	0x2000000c
 8005390:	e000ed04 	.word	0xe000ed04

08005394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800539a:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <vPortExitCritical+0x54>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10c      	bne.n	80053bc <vPortExitCritical+0x28>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	b672      	cpsid	i
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	b662      	cpsie	i
 80053b6:	607b      	str	r3, [r7, #4]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80053bc:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <vPortExitCritical+0x54>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	4a09      	ldr	r2, [pc, #36]	; (80053e8 <vPortExitCritical+0x54>)
 80053c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053c6:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <vPortExitCritical+0x54>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d105      	bne.n	80053da <vPortExitCritical+0x46>
 80053ce:	2300      	movs	r3, #0
 80053d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f383 8811 	msr	BASEPRI, r3
}
 80053d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	2000000c 	.word	0x2000000c
 80053ec:	00000000 	.word	0x00000000

080053f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053f0:	f3ef 8009 	mrs	r0, PSP
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	4b15      	ldr	r3, [pc, #84]	; (8005450 <pxCurrentTCBConst>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	f01e 0f10 	tst.w	lr, #16
 8005400:	bf08      	it	eq
 8005402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540a:	6010      	str	r0, [r2, #0]
 800540c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005414:	b672      	cpsid	i
 8005416:	f380 8811 	msr	BASEPRI, r0
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	b662      	cpsie	i
 8005424:	f7ff fb40 	bl	8004aa8 <vTaskSwitchContext>
 8005428:	f04f 0000 	mov.w	r0, #0
 800542c:	f380 8811 	msr	BASEPRI, r0
 8005430:	bc09      	pop	{r0, r3}
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	6808      	ldr	r0, [r1, #0]
 8005436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543a:	f01e 0f10 	tst.w	lr, #16
 800543e:	bf08      	it	eq
 8005440:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005444:	f380 8809 	msr	PSP, r0
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop

08005450 <pxCurrentTCBConst>:
 8005450:	200003d4 	.word	0x200003d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop

08005458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	b672      	cpsid	i
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	b662      	cpsie	i
 8005472:	607b      	str	r3, [r7, #4]
}
 8005474:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005476:	f7ff fa5d 	bl	8004934 <xTaskIncrementTick>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <SysTick_Handler+0x44>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	2300      	movs	r3, #0
 800548a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	f383 8811 	msr	BASEPRI, r3
}
 8005492:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005494:	bf00      	nop
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	e000ed04 	.word	0xe000ed04

080054a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <vPortSetupTimerInterrupt+0x34>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054aa:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <vPortSetupTimerInterrupt+0x38>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054b0:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <vPortSetupTimerInterrupt+0x3c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a0a      	ldr	r2, [pc, #40]	; (80054e0 <vPortSetupTimerInterrupt+0x40>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	099b      	lsrs	r3, r3, #6
 80054bc:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <vPortSetupTimerInterrupt+0x44>)
 80054be:	3b01      	subs	r3, #1
 80054c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054c2:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <vPortSetupTimerInterrupt+0x34>)
 80054c4:	2207      	movs	r2, #7
 80054c6:	601a      	str	r2, [r3, #0]
}
 80054c8:	bf00      	nop
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	e000e010 	.word	0xe000e010
 80054d8:	e000e018 	.word	0xe000e018
 80054dc:	20000000 	.word	0x20000000
 80054e0:	10624dd3 	.word	0x10624dd3
 80054e4:	e000e014 	.word	0xe000e014

080054e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80054f8 <vPortEnableVFP+0x10>
 80054ec:	6801      	ldr	r1, [r0, #0]
 80054ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80054f2:	6001      	str	r1, [r0, #0]
 80054f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054f6:	bf00      	nop
 80054f8:	e000ed88 	.word	0xe000ed88

080054fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005502:	f3ef 8305 	mrs	r3, IPSR
 8005506:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b0f      	cmp	r3, #15
 800550c:	d916      	bls.n	800553c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800550e:	4a19      	ldr	r2, [pc, #100]	; (8005574 <vPortValidateInterruptPriority+0x78>)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005518:	4b17      	ldr	r3, [pc, #92]	; (8005578 <vPortValidateInterruptPriority+0x7c>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	7afa      	ldrb	r2, [r7, #11]
 800551e:	429a      	cmp	r2, r3
 8005520:	d20c      	bcs.n	800553c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	b672      	cpsid	i
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	b662      	cpsie	i
 8005536:	607b      	str	r3, [r7, #4]
}
 8005538:	bf00      	nop
 800553a:	e7fe      	b.n	800553a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800553c:	4b0f      	ldr	r3, [pc, #60]	; (800557c <vPortValidateInterruptPriority+0x80>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005544:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <vPortValidateInterruptPriority+0x84>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d90c      	bls.n	8005566 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	b672      	cpsid	i
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	b662      	cpsie	i
 8005560:	603b      	str	r3, [r7, #0]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <vPortValidateInterruptPriority+0x68>
	}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	e000e3f0 	.word	0xe000e3f0
 8005578:	20000500 	.word	0x20000500
 800557c:	e000ed0c 	.word	0xe000ed0c
 8005580:	20000504 	.word	0x20000504

08005584 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08a      	sub	sp, #40	; 0x28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800558c:	2300      	movs	r3, #0
 800558e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005590:	f7ff f924 	bl	80047dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005594:	4b5b      	ldr	r3, [pc, #364]	; (8005704 <pvPortMalloc+0x180>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800559c:	f000 f91a 	bl	80057d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055a0:	4b59      	ldr	r3, [pc, #356]	; (8005708 <pvPortMalloc+0x184>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f040 8092 	bne.w	80056d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01f      	beq.n	80055f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80055b4:	2208      	movs	r2, #8
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4413      	add	r3, r2
 80055ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d016      	beq.n	80055f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f023 0307 	bic.w	r3, r3, #7
 80055cc:	3308      	adds	r3, #8
 80055ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00c      	beq.n	80055f4 <pvPortMalloc+0x70>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	b672      	cpsid	i
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	b662      	cpsie	i
 80055ee:	617b      	str	r3, [r7, #20]
}
 80055f0:	bf00      	nop
 80055f2:	e7fe      	b.n	80055f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d06b      	beq.n	80056d2 <pvPortMalloc+0x14e>
 80055fa:	4b44      	ldr	r3, [pc, #272]	; (800570c <pvPortMalloc+0x188>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	429a      	cmp	r2, r3
 8005602:	d866      	bhi.n	80056d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005604:	4b42      	ldr	r3, [pc, #264]	; (8005710 <pvPortMalloc+0x18c>)
 8005606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005608:	4b41      	ldr	r3, [pc, #260]	; (8005710 <pvPortMalloc+0x18c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800560e:	e004      	b.n	800561a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	429a      	cmp	r2, r3
 8005622:	d903      	bls.n	800562c <pvPortMalloc+0xa8>
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1f1      	bne.n	8005610 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800562c:	4b35      	ldr	r3, [pc, #212]	; (8005704 <pvPortMalloc+0x180>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005632:	429a      	cmp	r2, r3
 8005634:	d04d      	beq.n	80056d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2208      	movs	r2, #8
 800563c:	4413      	add	r3, r2
 800563e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	1ad2      	subs	r2, r2, r3
 8005650:	2308      	movs	r3, #8
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	429a      	cmp	r2, r3
 8005656:	d921      	bls.n	800569c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4413      	add	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00c      	beq.n	8005684 <pvPortMalloc+0x100>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	b672      	cpsid	i
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	b662      	cpsie	i
 800567e:	613b      	str	r3, [r7, #16]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	1ad2      	subs	r2, r2, r3
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005696:	69b8      	ldr	r0, [r7, #24]
 8005698:	f000 f8fe 	bl	8005898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800569c:	4b1b      	ldr	r3, [pc, #108]	; (800570c <pvPortMalloc+0x188>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	4a19      	ldr	r2, [pc, #100]	; (800570c <pvPortMalloc+0x188>)
 80056a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056aa:	4b18      	ldr	r3, [pc, #96]	; (800570c <pvPortMalloc+0x188>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4b19      	ldr	r3, [pc, #100]	; (8005714 <pvPortMalloc+0x190>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d203      	bcs.n	80056be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056b6:	4b15      	ldr	r3, [pc, #84]	; (800570c <pvPortMalloc+0x188>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a16      	ldr	r2, [pc, #88]	; (8005714 <pvPortMalloc+0x190>)
 80056bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	4b11      	ldr	r3, [pc, #68]	; (8005708 <pvPortMalloc+0x184>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056d2:	f7ff f891 	bl	80047f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00c      	beq.n	80056fa <pvPortMalloc+0x176>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	b672      	cpsid	i
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	b662      	cpsie	i
 80056f4:	60fb      	str	r3, [r7, #12]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <pvPortMalloc+0x174>
	return pvReturn;
 80056fa:	69fb      	ldr	r3, [r7, #28]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3728      	adds	r7, #40	; 0x28
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	20004110 	.word	0x20004110
 8005708:	2000411c 	.word	0x2000411c
 800570c:	20004114 	.word	0x20004114
 8005710:	20004108 	.word	0x20004108
 8005714:	20004118 	.word	0x20004118

08005718 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d04c      	beq.n	80057c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800572a:	2308      	movs	r3, #8
 800572c:	425b      	negs	r3, r3
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4413      	add	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	4b23      	ldr	r3, [pc, #140]	; (80057cc <vPortFree+0xb4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10c      	bne.n	8005760 <vPortFree+0x48>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	b672      	cpsid	i
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	b662      	cpsie	i
 800575a:	60fb      	str	r3, [r7, #12]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00c      	beq.n	8005782 <vPortFree+0x6a>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	b672      	cpsid	i
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	b662      	cpsie	i
 800577c:	60bb      	str	r3, [r7, #8]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	4b11      	ldr	r3, [pc, #68]	; (80057cc <vPortFree+0xb4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4013      	ands	r3, r2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d019      	beq.n	80057c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d115      	bne.n	80057c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <vPortFree+0xb4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	43db      	mvns	r3, r3
 80057a2:	401a      	ands	r2, r3
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057a8:	f7ff f818 	bl	80047dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <vPortFree+0xb8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4413      	add	r3, r2
 80057b6:	4a06      	ldr	r2, [pc, #24]	; (80057d0 <vPortFree+0xb8>)
 80057b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057ba:	6938      	ldr	r0, [r7, #16]
 80057bc:	f000 f86c 	bl	8005898 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057c0:	f7ff f81a 	bl	80047f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057c4:	bf00      	nop
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	2000411c 	.word	0x2000411c
 80057d0:	20004114 	.word	0x20004114

080057d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80057de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057e0:	4b27      	ldr	r3, [pc, #156]	; (8005880 <prvHeapInit+0xac>)
 80057e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00c      	beq.n	8005808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3307      	adds	r3, #7
 80057f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0307 	bic.w	r3, r3, #7
 80057fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	4a1f      	ldr	r2, [pc, #124]	; (8005880 <prvHeapInit+0xac>)
 8005804:	4413      	add	r3, r2
 8005806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800580c:	4a1d      	ldr	r2, [pc, #116]	; (8005884 <prvHeapInit+0xb0>)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005812:	4b1c      	ldr	r3, [pc, #112]	; (8005884 <prvHeapInit+0xb0>)
 8005814:	2200      	movs	r2, #0
 8005816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	4413      	add	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005820:	2208      	movs	r2, #8
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1a9b      	subs	r3, r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0307 	bic.w	r3, r3, #7
 800582e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4a15      	ldr	r2, [pc, #84]	; (8005888 <prvHeapInit+0xb4>)
 8005834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005836:	4b14      	ldr	r3, [pc, #80]	; (8005888 <prvHeapInit+0xb4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2200      	movs	r2, #0
 800583c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800583e:	4b12      	ldr	r3, [pc, #72]	; (8005888 <prvHeapInit+0xb4>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	1ad2      	subs	r2, r2, r3
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <prvHeapInit+0xb4>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	4a0a      	ldr	r2, [pc, #40]	; (800588c <prvHeapInit+0xb8>)
 8005862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	4a09      	ldr	r2, [pc, #36]	; (8005890 <prvHeapInit+0xbc>)
 800586a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800586c:	4b09      	ldr	r3, [pc, #36]	; (8005894 <prvHeapInit+0xc0>)
 800586e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005872:	601a      	str	r2, [r3, #0]
}
 8005874:	bf00      	nop
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	20000508 	.word	0x20000508
 8005884:	20004108 	.word	0x20004108
 8005888:	20004110 	.word	0x20004110
 800588c:	20004118 	.word	0x20004118
 8005890:	20004114 	.word	0x20004114
 8005894:	2000411c 	.word	0x2000411c

08005898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058a0:	4b28      	ldr	r3, [pc, #160]	; (8005944 <prvInsertBlockIntoFreeList+0xac>)
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	e002      	b.n	80058ac <prvInsertBlockIntoFreeList+0x14>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d8f7      	bhi.n	80058a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	4413      	add	r3, r2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d108      	bne.n	80058da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	441a      	add	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	441a      	add	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d118      	bne.n	8005920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	4b15      	ldr	r3, [pc, #84]	; (8005948 <prvInsertBlockIntoFreeList+0xb0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d00d      	beq.n	8005916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	441a      	add	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	e008      	b.n	8005928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005916:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <prvInsertBlockIntoFreeList+0xb0>)
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e003      	b.n	8005928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	429a      	cmp	r2, r3
 800592e:	d002      	beq.n	8005936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	20004108 	.word	0x20004108
 8005948:	20004110 	.word	0x20004110

0800594c <__errno>:
 800594c:	4b01      	ldr	r3, [pc, #4]	; (8005954 <__errno+0x8>)
 800594e:	6818      	ldr	r0, [r3, #0]
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	20000010 	.word	0x20000010

08005958 <__libc_init_array>:
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	4d0d      	ldr	r5, [pc, #52]	; (8005990 <__libc_init_array+0x38>)
 800595c:	4c0d      	ldr	r4, [pc, #52]	; (8005994 <__libc_init_array+0x3c>)
 800595e:	1b64      	subs	r4, r4, r5
 8005960:	10a4      	asrs	r4, r4, #2
 8005962:	2600      	movs	r6, #0
 8005964:	42a6      	cmp	r6, r4
 8005966:	d109      	bne.n	800597c <__libc_init_array+0x24>
 8005968:	4d0b      	ldr	r5, [pc, #44]	; (8005998 <__libc_init_array+0x40>)
 800596a:	4c0c      	ldr	r4, [pc, #48]	; (800599c <__libc_init_array+0x44>)
 800596c:	f000 fd1e 	bl	80063ac <_init>
 8005970:	1b64      	subs	r4, r4, r5
 8005972:	10a4      	asrs	r4, r4, #2
 8005974:	2600      	movs	r6, #0
 8005976:	42a6      	cmp	r6, r4
 8005978:	d105      	bne.n	8005986 <__libc_init_array+0x2e>
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005980:	4798      	blx	r3
 8005982:	3601      	adds	r6, #1
 8005984:	e7ee      	b.n	8005964 <__libc_init_array+0xc>
 8005986:	f855 3b04 	ldr.w	r3, [r5], #4
 800598a:	4798      	blx	r3
 800598c:	3601      	adds	r6, #1
 800598e:	e7f2      	b.n	8005976 <__libc_init_array+0x1e>
 8005990:	080064d8 	.word	0x080064d8
 8005994:	080064d8 	.word	0x080064d8
 8005998:	080064d8 	.word	0x080064d8
 800599c:	080064dc 	.word	0x080064dc

080059a0 <memset>:
 80059a0:	4402      	add	r2, r0
 80059a2:	4603      	mov	r3, r0
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d100      	bne.n	80059aa <memset+0xa>
 80059a8:	4770      	bx	lr
 80059aa:	f803 1b01 	strb.w	r1, [r3], #1
 80059ae:	e7f9      	b.n	80059a4 <memset+0x4>

080059b0 <_puts_r>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	460e      	mov	r6, r1
 80059b4:	4605      	mov	r5, r0
 80059b6:	b118      	cbz	r0, 80059c0 <_puts_r+0x10>
 80059b8:	6983      	ldr	r3, [r0, #24]
 80059ba:	b90b      	cbnz	r3, 80059c0 <_puts_r+0x10>
 80059bc:	f000 fa48 	bl	8005e50 <__sinit>
 80059c0:	69ab      	ldr	r3, [r5, #24]
 80059c2:	68ac      	ldr	r4, [r5, #8]
 80059c4:	b913      	cbnz	r3, 80059cc <_puts_r+0x1c>
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 fa42 	bl	8005e50 <__sinit>
 80059cc:	4b2c      	ldr	r3, [pc, #176]	; (8005a80 <_puts_r+0xd0>)
 80059ce:	429c      	cmp	r4, r3
 80059d0:	d120      	bne.n	8005a14 <_puts_r+0x64>
 80059d2:	686c      	ldr	r4, [r5, #4]
 80059d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059d6:	07db      	lsls	r3, r3, #31
 80059d8:	d405      	bmi.n	80059e6 <_puts_r+0x36>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	0598      	lsls	r0, r3, #22
 80059de:	d402      	bmi.n	80059e6 <_puts_r+0x36>
 80059e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059e2:	f000 fad3 	bl	8005f8c <__retarget_lock_acquire_recursive>
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	0719      	lsls	r1, r3, #28
 80059ea:	d51d      	bpl.n	8005a28 <_puts_r+0x78>
 80059ec:	6923      	ldr	r3, [r4, #16]
 80059ee:	b1db      	cbz	r3, 8005a28 <_puts_r+0x78>
 80059f0:	3e01      	subs	r6, #1
 80059f2:	68a3      	ldr	r3, [r4, #8]
 80059f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059f8:	3b01      	subs	r3, #1
 80059fa:	60a3      	str	r3, [r4, #8]
 80059fc:	bb39      	cbnz	r1, 8005a4e <_puts_r+0x9e>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	da38      	bge.n	8005a74 <_puts_r+0xc4>
 8005a02:	4622      	mov	r2, r4
 8005a04:	210a      	movs	r1, #10
 8005a06:	4628      	mov	r0, r5
 8005a08:	f000 f848 	bl	8005a9c <__swbuf_r>
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	d011      	beq.n	8005a34 <_puts_r+0x84>
 8005a10:	250a      	movs	r5, #10
 8005a12:	e011      	b.n	8005a38 <_puts_r+0x88>
 8005a14:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <_puts_r+0xd4>)
 8005a16:	429c      	cmp	r4, r3
 8005a18:	d101      	bne.n	8005a1e <_puts_r+0x6e>
 8005a1a:	68ac      	ldr	r4, [r5, #8]
 8005a1c:	e7da      	b.n	80059d4 <_puts_r+0x24>
 8005a1e:	4b1a      	ldr	r3, [pc, #104]	; (8005a88 <_puts_r+0xd8>)
 8005a20:	429c      	cmp	r4, r3
 8005a22:	bf08      	it	eq
 8005a24:	68ec      	ldreq	r4, [r5, #12]
 8005a26:	e7d5      	b.n	80059d4 <_puts_r+0x24>
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 f888 	bl	8005b40 <__swsetup_r>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d0dd      	beq.n	80059f0 <_puts_r+0x40>
 8005a34:	f04f 35ff 	mov.w	r5, #4294967295
 8005a38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a3a:	07da      	lsls	r2, r3, #31
 8005a3c:	d405      	bmi.n	8005a4a <_puts_r+0x9a>
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	059b      	lsls	r3, r3, #22
 8005a42:	d402      	bmi.n	8005a4a <_puts_r+0x9a>
 8005a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a46:	f000 faa2 	bl	8005f8e <__retarget_lock_release_recursive>
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	bd70      	pop	{r4, r5, r6, pc}
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	da04      	bge.n	8005a5c <_puts_r+0xac>
 8005a52:	69a2      	ldr	r2, [r4, #24]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	dc06      	bgt.n	8005a66 <_puts_r+0xb6>
 8005a58:	290a      	cmp	r1, #10
 8005a5a:	d004      	beq.n	8005a66 <_puts_r+0xb6>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	6022      	str	r2, [r4, #0]
 8005a62:	7019      	strb	r1, [r3, #0]
 8005a64:	e7c5      	b.n	80059f2 <_puts_r+0x42>
 8005a66:	4622      	mov	r2, r4
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f000 f817 	bl	8005a9c <__swbuf_r>
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d1bf      	bne.n	80059f2 <_puts_r+0x42>
 8005a72:	e7df      	b.n	8005a34 <_puts_r+0x84>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	250a      	movs	r5, #10
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	6022      	str	r2, [r4, #0]
 8005a7c:	701d      	strb	r5, [r3, #0]
 8005a7e:	e7db      	b.n	8005a38 <_puts_r+0x88>
 8005a80:	08006490 	.word	0x08006490
 8005a84:	080064b0 	.word	0x080064b0
 8005a88:	08006470 	.word	0x08006470

08005a8c <puts>:
 8005a8c:	4b02      	ldr	r3, [pc, #8]	; (8005a98 <puts+0xc>)
 8005a8e:	4601      	mov	r1, r0
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	f7ff bf8d 	b.w	80059b0 <_puts_r>
 8005a96:	bf00      	nop
 8005a98:	20000010 	.word	0x20000010

08005a9c <__swbuf_r>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	460e      	mov	r6, r1
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	b118      	cbz	r0, 8005aae <__swbuf_r+0x12>
 8005aa6:	6983      	ldr	r3, [r0, #24]
 8005aa8:	b90b      	cbnz	r3, 8005aae <__swbuf_r+0x12>
 8005aaa:	f000 f9d1 	bl	8005e50 <__sinit>
 8005aae:	4b21      	ldr	r3, [pc, #132]	; (8005b34 <__swbuf_r+0x98>)
 8005ab0:	429c      	cmp	r4, r3
 8005ab2:	d12b      	bne.n	8005b0c <__swbuf_r+0x70>
 8005ab4:	686c      	ldr	r4, [r5, #4]
 8005ab6:	69a3      	ldr	r3, [r4, #24]
 8005ab8:	60a3      	str	r3, [r4, #8]
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	071a      	lsls	r2, r3, #28
 8005abe:	d52f      	bpl.n	8005b20 <__swbuf_r+0x84>
 8005ac0:	6923      	ldr	r3, [r4, #16]
 8005ac2:	b36b      	cbz	r3, 8005b20 <__swbuf_r+0x84>
 8005ac4:	6923      	ldr	r3, [r4, #16]
 8005ac6:	6820      	ldr	r0, [r4, #0]
 8005ac8:	1ac0      	subs	r0, r0, r3
 8005aca:	6963      	ldr	r3, [r4, #20]
 8005acc:	b2f6      	uxtb	r6, r6
 8005ace:	4283      	cmp	r3, r0
 8005ad0:	4637      	mov	r7, r6
 8005ad2:	dc04      	bgt.n	8005ade <__swbuf_r+0x42>
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f000 f926 	bl	8005d28 <_fflush_r>
 8005adc:	bb30      	cbnz	r0, 8005b2c <__swbuf_r+0x90>
 8005ade:	68a3      	ldr	r3, [r4, #8]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	60a3      	str	r3, [r4, #8]
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	6022      	str	r2, [r4, #0]
 8005aea:	701e      	strb	r6, [r3, #0]
 8005aec:	6963      	ldr	r3, [r4, #20]
 8005aee:	3001      	adds	r0, #1
 8005af0:	4283      	cmp	r3, r0
 8005af2:	d004      	beq.n	8005afe <__swbuf_r+0x62>
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	07db      	lsls	r3, r3, #31
 8005af8:	d506      	bpl.n	8005b08 <__swbuf_r+0x6c>
 8005afa:	2e0a      	cmp	r6, #10
 8005afc:	d104      	bne.n	8005b08 <__swbuf_r+0x6c>
 8005afe:	4621      	mov	r1, r4
 8005b00:	4628      	mov	r0, r5
 8005b02:	f000 f911 	bl	8005d28 <_fflush_r>
 8005b06:	b988      	cbnz	r0, 8005b2c <__swbuf_r+0x90>
 8005b08:	4638      	mov	r0, r7
 8005b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <__swbuf_r+0x9c>)
 8005b0e:	429c      	cmp	r4, r3
 8005b10:	d101      	bne.n	8005b16 <__swbuf_r+0x7a>
 8005b12:	68ac      	ldr	r4, [r5, #8]
 8005b14:	e7cf      	b.n	8005ab6 <__swbuf_r+0x1a>
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <__swbuf_r+0xa0>)
 8005b18:	429c      	cmp	r4, r3
 8005b1a:	bf08      	it	eq
 8005b1c:	68ec      	ldreq	r4, [r5, #12]
 8005b1e:	e7ca      	b.n	8005ab6 <__swbuf_r+0x1a>
 8005b20:	4621      	mov	r1, r4
 8005b22:	4628      	mov	r0, r5
 8005b24:	f000 f80c 	bl	8005b40 <__swsetup_r>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d0cb      	beq.n	8005ac4 <__swbuf_r+0x28>
 8005b2c:	f04f 37ff 	mov.w	r7, #4294967295
 8005b30:	e7ea      	b.n	8005b08 <__swbuf_r+0x6c>
 8005b32:	bf00      	nop
 8005b34:	08006490 	.word	0x08006490
 8005b38:	080064b0 	.word	0x080064b0
 8005b3c:	08006470 	.word	0x08006470

08005b40 <__swsetup_r>:
 8005b40:	4b32      	ldr	r3, [pc, #200]	; (8005c0c <__swsetup_r+0xcc>)
 8005b42:	b570      	push	{r4, r5, r6, lr}
 8005b44:	681d      	ldr	r5, [r3, #0]
 8005b46:	4606      	mov	r6, r0
 8005b48:	460c      	mov	r4, r1
 8005b4a:	b125      	cbz	r5, 8005b56 <__swsetup_r+0x16>
 8005b4c:	69ab      	ldr	r3, [r5, #24]
 8005b4e:	b913      	cbnz	r3, 8005b56 <__swsetup_r+0x16>
 8005b50:	4628      	mov	r0, r5
 8005b52:	f000 f97d 	bl	8005e50 <__sinit>
 8005b56:	4b2e      	ldr	r3, [pc, #184]	; (8005c10 <__swsetup_r+0xd0>)
 8005b58:	429c      	cmp	r4, r3
 8005b5a:	d10f      	bne.n	8005b7c <__swsetup_r+0x3c>
 8005b5c:	686c      	ldr	r4, [r5, #4]
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b64:	0719      	lsls	r1, r3, #28
 8005b66:	d42c      	bmi.n	8005bc2 <__swsetup_r+0x82>
 8005b68:	06dd      	lsls	r5, r3, #27
 8005b6a:	d411      	bmi.n	8005b90 <__swsetup_r+0x50>
 8005b6c:	2309      	movs	r3, #9
 8005b6e:	6033      	str	r3, [r6, #0]
 8005b70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b74:	81a3      	strh	r3, [r4, #12]
 8005b76:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7a:	e03e      	b.n	8005bfa <__swsetup_r+0xba>
 8005b7c:	4b25      	ldr	r3, [pc, #148]	; (8005c14 <__swsetup_r+0xd4>)
 8005b7e:	429c      	cmp	r4, r3
 8005b80:	d101      	bne.n	8005b86 <__swsetup_r+0x46>
 8005b82:	68ac      	ldr	r4, [r5, #8]
 8005b84:	e7eb      	b.n	8005b5e <__swsetup_r+0x1e>
 8005b86:	4b24      	ldr	r3, [pc, #144]	; (8005c18 <__swsetup_r+0xd8>)
 8005b88:	429c      	cmp	r4, r3
 8005b8a:	bf08      	it	eq
 8005b8c:	68ec      	ldreq	r4, [r5, #12]
 8005b8e:	e7e6      	b.n	8005b5e <__swsetup_r+0x1e>
 8005b90:	0758      	lsls	r0, r3, #29
 8005b92:	d512      	bpl.n	8005bba <__swsetup_r+0x7a>
 8005b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b96:	b141      	cbz	r1, 8005baa <__swsetup_r+0x6a>
 8005b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b9c:	4299      	cmp	r1, r3
 8005b9e:	d002      	beq.n	8005ba6 <__swsetup_r+0x66>
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f000 fa5b 	bl	800605c <_free_r>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	6363      	str	r3, [r4, #52]	; 0x34
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	6063      	str	r3, [r4, #4]
 8005bb6:	6923      	ldr	r3, [r4, #16]
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	89a3      	ldrh	r3, [r4, #12]
 8005bbc:	f043 0308 	orr.w	r3, r3, #8
 8005bc0:	81a3      	strh	r3, [r4, #12]
 8005bc2:	6923      	ldr	r3, [r4, #16]
 8005bc4:	b94b      	cbnz	r3, 8005bda <__swsetup_r+0x9a>
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd0:	d003      	beq.n	8005bda <__swsetup_r+0x9a>
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f000 fa01 	bl	8005fdc <__smakebuf_r>
 8005bda:	89a0      	ldrh	r0, [r4, #12]
 8005bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005be0:	f010 0301 	ands.w	r3, r0, #1
 8005be4:	d00a      	beq.n	8005bfc <__swsetup_r+0xbc>
 8005be6:	2300      	movs	r3, #0
 8005be8:	60a3      	str	r3, [r4, #8]
 8005bea:	6963      	ldr	r3, [r4, #20]
 8005bec:	425b      	negs	r3, r3
 8005bee:	61a3      	str	r3, [r4, #24]
 8005bf0:	6923      	ldr	r3, [r4, #16]
 8005bf2:	b943      	cbnz	r3, 8005c06 <__swsetup_r+0xc6>
 8005bf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bf8:	d1ba      	bne.n	8005b70 <__swsetup_r+0x30>
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	0781      	lsls	r1, r0, #30
 8005bfe:	bf58      	it	pl
 8005c00:	6963      	ldrpl	r3, [r4, #20]
 8005c02:	60a3      	str	r3, [r4, #8]
 8005c04:	e7f4      	b.n	8005bf0 <__swsetup_r+0xb0>
 8005c06:	2000      	movs	r0, #0
 8005c08:	e7f7      	b.n	8005bfa <__swsetup_r+0xba>
 8005c0a:	bf00      	nop
 8005c0c:	20000010 	.word	0x20000010
 8005c10:	08006490 	.word	0x08006490
 8005c14:	080064b0 	.word	0x080064b0
 8005c18:	08006470 	.word	0x08006470

08005c1c <__sflush_r>:
 8005c1c:	898a      	ldrh	r2, [r1, #12]
 8005c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c22:	4605      	mov	r5, r0
 8005c24:	0710      	lsls	r0, r2, #28
 8005c26:	460c      	mov	r4, r1
 8005c28:	d458      	bmi.n	8005cdc <__sflush_r+0xc0>
 8005c2a:	684b      	ldr	r3, [r1, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	dc05      	bgt.n	8005c3c <__sflush_r+0x20>
 8005c30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	dc02      	bgt.n	8005c3c <__sflush_r+0x20>
 8005c36:	2000      	movs	r0, #0
 8005c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c3e:	2e00      	cmp	r6, #0
 8005c40:	d0f9      	beq.n	8005c36 <__sflush_r+0x1a>
 8005c42:	2300      	movs	r3, #0
 8005c44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c48:	682f      	ldr	r7, [r5, #0]
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	d032      	beq.n	8005cb4 <__sflush_r+0x98>
 8005c4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	075a      	lsls	r2, r3, #29
 8005c54:	d505      	bpl.n	8005c62 <__sflush_r+0x46>
 8005c56:	6863      	ldr	r3, [r4, #4]
 8005c58:	1ac0      	subs	r0, r0, r3
 8005c5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c5c:	b10b      	cbz	r3, 8005c62 <__sflush_r+0x46>
 8005c5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c60:	1ac0      	subs	r0, r0, r3
 8005c62:	2300      	movs	r3, #0
 8005c64:	4602      	mov	r2, r0
 8005c66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c68:	6a21      	ldr	r1, [r4, #32]
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47b0      	blx	r6
 8005c6e:	1c43      	adds	r3, r0, #1
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	d106      	bne.n	8005c82 <__sflush_r+0x66>
 8005c74:	6829      	ldr	r1, [r5, #0]
 8005c76:	291d      	cmp	r1, #29
 8005c78:	d82c      	bhi.n	8005cd4 <__sflush_r+0xb8>
 8005c7a:	4a2a      	ldr	r2, [pc, #168]	; (8005d24 <__sflush_r+0x108>)
 8005c7c:	40ca      	lsrs	r2, r1
 8005c7e:	07d6      	lsls	r6, r2, #31
 8005c80:	d528      	bpl.n	8005cd4 <__sflush_r+0xb8>
 8005c82:	2200      	movs	r2, #0
 8005c84:	6062      	str	r2, [r4, #4]
 8005c86:	04d9      	lsls	r1, r3, #19
 8005c88:	6922      	ldr	r2, [r4, #16]
 8005c8a:	6022      	str	r2, [r4, #0]
 8005c8c:	d504      	bpl.n	8005c98 <__sflush_r+0x7c>
 8005c8e:	1c42      	adds	r2, r0, #1
 8005c90:	d101      	bne.n	8005c96 <__sflush_r+0x7a>
 8005c92:	682b      	ldr	r3, [r5, #0]
 8005c94:	b903      	cbnz	r3, 8005c98 <__sflush_r+0x7c>
 8005c96:	6560      	str	r0, [r4, #84]	; 0x54
 8005c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c9a:	602f      	str	r7, [r5, #0]
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	d0ca      	beq.n	8005c36 <__sflush_r+0x1a>
 8005ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ca4:	4299      	cmp	r1, r3
 8005ca6:	d002      	beq.n	8005cae <__sflush_r+0x92>
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f000 f9d7 	bl	800605c <_free_r>
 8005cae:	2000      	movs	r0, #0
 8005cb0:	6360      	str	r0, [r4, #52]	; 0x34
 8005cb2:	e7c1      	b.n	8005c38 <__sflush_r+0x1c>
 8005cb4:	6a21      	ldr	r1, [r4, #32]
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4628      	mov	r0, r5
 8005cba:	47b0      	blx	r6
 8005cbc:	1c41      	adds	r1, r0, #1
 8005cbe:	d1c7      	bne.n	8005c50 <__sflush_r+0x34>
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0c4      	beq.n	8005c50 <__sflush_r+0x34>
 8005cc6:	2b1d      	cmp	r3, #29
 8005cc8:	d001      	beq.n	8005cce <__sflush_r+0xb2>
 8005cca:	2b16      	cmp	r3, #22
 8005ccc:	d101      	bne.n	8005cd2 <__sflush_r+0xb6>
 8005cce:	602f      	str	r7, [r5, #0]
 8005cd0:	e7b1      	b.n	8005c36 <__sflush_r+0x1a>
 8005cd2:	89a3      	ldrh	r3, [r4, #12]
 8005cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd8:	81a3      	strh	r3, [r4, #12]
 8005cda:	e7ad      	b.n	8005c38 <__sflush_r+0x1c>
 8005cdc:	690f      	ldr	r7, [r1, #16]
 8005cde:	2f00      	cmp	r7, #0
 8005ce0:	d0a9      	beq.n	8005c36 <__sflush_r+0x1a>
 8005ce2:	0793      	lsls	r3, r2, #30
 8005ce4:	680e      	ldr	r6, [r1, #0]
 8005ce6:	bf08      	it	eq
 8005ce8:	694b      	ldreq	r3, [r1, #20]
 8005cea:	600f      	str	r7, [r1, #0]
 8005cec:	bf18      	it	ne
 8005cee:	2300      	movne	r3, #0
 8005cf0:	eba6 0807 	sub.w	r8, r6, r7
 8005cf4:	608b      	str	r3, [r1, #8]
 8005cf6:	f1b8 0f00 	cmp.w	r8, #0
 8005cfa:	dd9c      	ble.n	8005c36 <__sflush_r+0x1a>
 8005cfc:	6a21      	ldr	r1, [r4, #32]
 8005cfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d00:	4643      	mov	r3, r8
 8005d02:	463a      	mov	r2, r7
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b0      	blx	r6
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	dc06      	bgt.n	8005d1a <__sflush_r+0xfe>
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d12:	81a3      	strh	r3, [r4, #12]
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	e78e      	b.n	8005c38 <__sflush_r+0x1c>
 8005d1a:	4407      	add	r7, r0
 8005d1c:	eba8 0800 	sub.w	r8, r8, r0
 8005d20:	e7e9      	b.n	8005cf6 <__sflush_r+0xda>
 8005d22:	bf00      	nop
 8005d24:	20400001 	.word	0x20400001

08005d28 <_fflush_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	690b      	ldr	r3, [r1, #16]
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	b913      	cbnz	r3, 8005d38 <_fflush_r+0x10>
 8005d32:	2500      	movs	r5, #0
 8005d34:	4628      	mov	r0, r5
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	b118      	cbz	r0, 8005d42 <_fflush_r+0x1a>
 8005d3a:	6983      	ldr	r3, [r0, #24]
 8005d3c:	b90b      	cbnz	r3, 8005d42 <_fflush_r+0x1a>
 8005d3e:	f000 f887 	bl	8005e50 <__sinit>
 8005d42:	4b14      	ldr	r3, [pc, #80]	; (8005d94 <_fflush_r+0x6c>)
 8005d44:	429c      	cmp	r4, r3
 8005d46:	d11b      	bne.n	8005d80 <_fflush_r+0x58>
 8005d48:	686c      	ldr	r4, [r5, #4]
 8005d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0ef      	beq.n	8005d32 <_fflush_r+0xa>
 8005d52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d54:	07d0      	lsls	r0, r2, #31
 8005d56:	d404      	bmi.n	8005d62 <_fflush_r+0x3a>
 8005d58:	0599      	lsls	r1, r3, #22
 8005d5a:	d402      	bmi.n	8005d62 <_fflush_r+0x3a>
 8005d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d5e:	f000 f915 	bl	8005f8c <__retarget_lock_acquire_recursive>
 8005d62:	4628      	mov	r0, r5
 8005d64:	4621      	mov	r1, r4
 8005d66:	f7ff ff59 	bl	8005c1c <__sflush_r>
 8005d6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d6c:	07da      	lsls	r2, r3, #31
 8005d6e:	4605      	mov	r5, r0
 8005d70:	d4e0      	bmi.n	8005d34 <_fflush_r+0xc>
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	059b      	lsls	r3, r3, #22
 8005d76:	d4dd      	bmi.n	8005d34 <_fflush_r+0xc>
 8005d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d7a:	f000 f908 	bl	8005f8e <__retarget_lock_release_recursive>
 8005d7e:	e7d9      	b.n	8005d34 <_fflush_r+0xc>
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <_fflush_r+0x70>)
 8005d82:	429c      	cmp	r4, r3
 8005d84:	d101      	bne.n	8005d8a <_fflush_r+0x62>
 8005d86:	68ac      	ldr	r4, [r5, #8]
 8005d88:	e7df      	b.n	8005d4a <_fflush_r+0x22>
 8005d8a:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <_fflush_r+0x74>)
 8005d8c:	429c      	cmp	r4, r3
 8005d8e:	bf08      	it	eq
 8005d90:	68ec      	ldreq	r4, [r5, #12]
 8005d92:	e7da      	b.n	8005d4a <_fflush_r+0x22>
 8005d94:	08006490 	.word	0x08006490
 8005d98:	080064b0 	.word	0x080064b0
 8005d9c:	08006470 	.word	0x08006470

08005da0 <std>:
 8005da0:	2300      	movs	r3, #0
 8005da2:	b510      	push	{r4, lr}
 8005da4:	4604      	mov	r4, r0
 8005da6:	e9c0 3300 	strd	r3, r3, [r0]
 8005daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dae:	6083      	str	r3, [r0, #8]
 8005db0:	8181      	strh	r1, [r0, #12]
 8005db2:	6643      	str	r3, [r0, #100]	; 0x64
 8005db4:	81c2      	strh	r2, [r0, #14]
 8005db6:	6183      	str	r3, [r0, #24]
 8005db8:	4619      	mov	r1, r3
 8005dba:	2208      	movs	r2, #8
 8005dbc:	305c      	adds	r0, #92	; 0x5c
 8005dbe:	f7ff fdef 	bl	80059a0 <memset>
 8005dc2:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <std+0x38>)
 8005dc4:	6263      	str	r3, [r4, #36]	; 0x24
 8005dc6:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <std+0x3c>)
 8005dc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dca:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <std+0x40>)
 8005dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <std+0x44>)
 8005dd0:	6224      	str	r4, [r4, #32]
 8005dd2:	6323      	str	r3, [r4, #48]	; 0x30
 8005dd4:	bd10      	pop	{r4, pc}
 8005dd6:	bf00      	nop
 8005dd8:	0800623d 	.word	0x0800623d
 8005ddc:	0800625f 	.word	0x0800625f
 8005de0:	08006297 	.word	0x08006297
 8005de4:	080062bb 	.word	0x080062bb

08005de8 <_cleanup_r>:
 8005de8:	4901      	ldr	r1, [pc, #4]	; (8005df0 <_cleanup_r+0x8>)
 8005dea:	f000 b8af 	b.w	8005f4c <_fwalk_reent>
 8005dee:	bf00      	nop
 8005df0:	08005d29 	.word	0x08005d29

08005df4 <__sfmoreglue>:
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	2268      	movs	r2, #104	; 0x68
 8005df8:	1e4d      	subs	r5, r1, #1
 8005dfa:	4355      	muls	r5, r2
 8005dfc:	460e      	mov	r6, r1
 8005dfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e02:	f000 f997 	bl	8006134 <_malloc_r>
 8005e06:	4604      	mov	r4, r0
 8005e08:	b140      	cbz	r0, 8005e1c <__sfmoreglue+0x28>
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	e9c0 1600 	strd	r1, r6, [r0]
 8005e10:	300c      	adds	r0, #12
 8005e12:	60a0      	str	r0, [r4, #8]
 8005e14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e18:	f7ff fdc2 	bl	80059a0 <memset>
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	bd70      	pop	{r4, r5, r6, pc}

08005e20 <__sfp_lock_acquire>:
 8005e20:	4801      	ldr	r0, [pc, #4]	; (8005e28 <__sfp_lock_acquire+0x8>)
 8005e22:	f000 b8b3 	b.w	8005f8c <__retarget_lock_acquire_recursive>
 8005e26:	bf00      	nop
 8005e28:	20004121 	.word	0x20004121

08005e2c <__sfp_lock_release>:
 8005e2c:	4801      	ldr	r0, [pc, #4]	; (8005e34 <__sfp_lock_release+0x8>)
 8005e2e:	f000 b8ae 	b.w	8005f8e <__retarget_lock_release_recursive>
 8005e32:	bf00      	nop
 8005e34:	20004121 	.word	0x20004121

08005e38 <__sinit_lock_acquire>:
 8005e38:	4801      	ldr	r0, [pc, #4]	; (8005e40 <__sinit_lock_acquire+0x8>)
 8005e3a:	f000 b8a7 	b.w	8005f8c <__retarget_lock_acquire_recursive>
 8005e3e:	bf00      	nop
 8005e40:	20004122 	.word	0x20004122

08005e44 <__sinit_lock_release>:
 8005e44:	4801      	ldr	r0, [pc, #4]	; (8005e4c <__sinit_lock_release+0x8>)
 8005e46:	f000 b8a2 	b.w	8005f8e <__retarget_lock_release_recursive>
 8005e4a:	bf00      	nop
 8005e4c:	20004122 	.word	0x20004122

08005e50 <__sinit>:
 8005e50:	b510      	push	{r4, lr}
 8005e52:	4604      	mov	r4, r0
 8005e54:	f7ff fff0 	bl	8005e38 <__sinit_lock_acquire>
 8005e58:	69a3      	ldr	r3, [r4, #24]
 8005e5a:	b11b      	cbz	r3, 8005e64 <__sinit+0x14>
 8005e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e60:	f7ff bff0 	b.w	8005e44 <__sinit_lock_release>
 8005e64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e68:	6523      	str	r3, [r4, #80]	; 0x50
 8005e6a:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <__sinit+0x68>)
 8005e6c:	4a13      	ldr	r2, [pc, #76]	; (8005ebc <__sinit+0x6c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e72:	42a3      	cmp	r3, r4
 8005e74:	bf04      	itt	eq
 8005e76:	2301      	moveq	r3, #1
 8005e78:	61a3      	streq	r3, [r4, #24]
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 f820 	bl	8005ec0 <__sfp>
 8005e80:	6060      	str	r0, [r4, #4]
 8005e82:	4620      	mov	r0, r4
 8005e84:	f000 f81c 	bl	8005ec0 <__sfp>
 8005e88:	60a0      	str	r0, [r4, #8]
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 f818 	bl	8005ec0 <__sfp>
 8005e90:	2200      	movs	r2, #0
 8005e92:	60e0      	str	r0, [r4, #12]
 8005e94:	2104      	movs	r1, #4
 8005e96:	6860      	ldr	r0, [r4, #4]
 8005e98:	f7ff ff82 	bl	8005da0 <std>
 8005e9c:	68a0      	ldr	r0, [r4, #8]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	2109      	movs	r1, #9
 8005ea2:	f7ff ff7d 	bl	8005da0 <std>
 8005ea6:	68e0      	ldr	r0, [r4, #12]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	2112      	movs	r1, #18
 8005eac:	f7ff ff78 	bl	8005da0 <std>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	61a3      	str	r3, [r4, #24]
 8005eb4:	e7d2      	b.n	8005e5c <__sinit+0xc>
 8005eb6:	bf00      	nop
 8005eb8:	0800646c 	.word	0x0800646c
 8005ebc:	08005de9 	.word	0x08005de9

08005ec0 <__sfp>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	4607      	mov	r7, r0
 8005ec4:	f7ff ffac 	bl	8005e20 <__sfp_lock_acquire>
 8005ec8:	4b1e      	ldr	r3, [pc, #120]	; (8005f44 <__sfp+0x84>)
 8005eca:	681e      	ldr	r6, [r3, #0]
 8005ecc:	69b3      	ldr	r3, [r6, #24]
 8005ece:	b913      	cbnz	r3, 8005ed6 <__sfp+0x16>
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f7ff ffbd 	bl	8005e50 <__sinit>
 8005ed6:	3648      	adds	r6, #72	; 0x48
 8005ed8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	d503      	bpl.n	8005ee8 <__sfp+0x28>
 8005ee0:	6833      	ldr	r3, [r6, #0]
 8005ee2:	b30b      	cbz	r3, 8005f28 <__sfp+0x68>
 8005ee4:	6836      	ldr	r6, [r6, #0]
 8005ee6:	e7f7      	b.n	8005ed8 <__sfp+0x18>
 8005ee8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005eec:	b9d5      	cbnz	r5, 8005f24 <__sfp+0x64>
 8005eee:	4b16      	ldr	r3, [pc, #88]	; (8005f48 <__sfp+0x88>)
 8005ef0:	60e3      	str	r3, [r4, #12]
 8005ef2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ef6:	6665      	str	r5, [r4, #100]	; 0x64
 8005ef8:	f000 f847 	bl	8005f8a <__retarget_lock_init_recursive>
 8005efc:	f7ff ff96 	bl	8005e2c <__sfp_lock_release>
 8005f00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f08:	6025      	str	r5, [r4, #0]
 8005f0a:	61a5      	str	r5, [r4, #24]
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	4629      	mov	r1, r5
 8005f10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f14:	f7ff fd44 	bl	80059a0 <memset>
 8005f18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f20:	4620      	mov	r0, r4
 8005f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f24:	3468      	adds	r4, #104	; 0x68
 8005f26:	e7d9      	b.n	8005edc <__sfp+0x1c>
 8005f28:	2104      	movs	r1, #4
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	f7ff ff62 	bl	8005df4 <__sfmoreglue>
 8005f30:	4604      	mov	r4, r0
 8005f32:	6030      	str	r0, [r6, #0]
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d1d5      	bne.n	8005ee4 <__sfp+0x24>
 8005f38:	f7ff ff78 	bl	8005e2c <__sfp_lock_release>
 8005f3c:	230c      	movs	r3, #12
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	e7ee      	b.n	8005f20 <__sfp+0x60>
 8005f42:	bf00      	nop
 8005f44:	0800646c 	.word	0x0800646c
 8005f48:	ffff0001 	.word	0xffff0001

08005f4c <_fwalk_reent>:
 8005f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f50:	4606      	mov	r6, r0
 8005f52:	4688      	mov	r8, r1
 8005f54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f58:	2700      	movs	r7, #0
 8005f5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f5e:	f1b9 0901 	subs.w	r9, r9, #1
 8005f62:	d505      	bpl.n	8005f70 <_fwalk_reent+0x24>
 8005f64:	6824      	ldr	r4, [r4, #0]
 8005f66:	2c00      	cmp	r4, #0
 8005f68:	d1f7      	bne.n	8005f5a <_fwalk_reent+0xe>
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f70:	89ab      	ldrh	r3, [r5, #12]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d907      	bls.n	8005f86 <_fwalk_reent+0x3a>
 8005f76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	d003      	beq.n	8005f86 <_fwalk_reent+0x3a>
 8005f7e:	4629      	mov	r1, r5
 8005f80:	4630      	mov	r0, r6
 8005f82:	47c0      	blx	r8
 8005f84:	4307      	orrs	r7, r0
 8005f86:	3568      	adds	r5, #104	; 0x68
 8005f88:	e7e9      	b.n	8005f5e <_fwalk_reent+0x12>

08005f8a <__retarget_lock_init_recursive>:
 8005f8a:	4770      	bx	lr

08005f8c <__retarget_lock_acquire_recursive>:
 8005f8c:	4770      	bx	lr

08005f8e <__retarget_lock_release_recursive>:
 8005f8e:	4770      	bx	lr

08005f90 <__swhatbuf_r>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	460e      	mov	r6, r1
 8005f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	b096      	sub	sp, #88	; 0x58
 8005f9c:	4614      	mov	r4, r2
 8005f9e:	461d      	mov	r5, r3
 8005fa0:	da08      	bge.n	8005fb4 <__swhatbuf_r+0x24>
 8005fa2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	602a      	str	r2, [r5, #0]
 8005faa:	061a      	lsls	r2, r3, #24
 8005fac:	d410      	bmi.n	8005fd0 <__swhatbuf_r+0x40>
 8005fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fb2:	e00e      	b.n	8005fd2 <__swhatbuf_r+0x42>
 8005fb4:	466a      	mov	r2, sp
 8005fb6:	f000 f9a7 	bl	8006308 <_fstat_r>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	dbf1      	blt.n	8005fa2 <__swhatbuf_r+0x12>
 8005fbe:	9a01      	ldr	r2, [sp, #4]
 8005fc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005fc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005fc8:	425a      	negs	r2, r3
 8005fca:	415a      	adcs	r2, r3
 8005fcc:	602a      	str	r2, [r5, #0]
 8005fce:	e7ee      	b.n	8005fae <__swhatbuf_r+0x1e>
 8005fd0:	2340      	movs	r3, #64	; 0x40
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	b016      	add	sp, #88	; 0x58
 8005fd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005fdc <__smakebuf_r>:
 8005fdc:	898b      	ldrh	r3, [r1, #12]
 8005fde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fe0:	079d      	lsls	r5, r3, #30
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	d507      	bpl.n	8005ff8 <__smakebuf_r+0x1c>
 8005fe8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	6123      	str	r3, [r4, #16]
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	6163      	str	r3, [r4, #20]
 8005ff4:	b002      	add	sp, #8
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
 8005ff8:	ab01      	add	r3, sp, #4
 8005ffa:	466a      	mov	r2, sp
 8005ffc:	f7ff ffc8 	bl	8005f90 <__swhatbuf_r>
 8006000:	9900      	ldr	r1, [sp, #0]
 8006002:	4605      	mov	r5, r0
 8006004:	4630      	mov	r0, r6
 8006006:	f000 f895 	bl	8006134 <_malloc_r>
 800600a:	b948      	cbnz	r0, 8006020 <__smakebuf_r+0x44>
 800600c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006010:	059a      	lsls	r2, r3, #22
 8006012:	d4ef      	bmi.n	8005ff4 <__smakebuf_r+0x18>
 8006014:	f023 0303 	bic.w	r3, r3, #3
 8006018:	f043 0302 	orr.w	r3, r3, #2
 800601c:	81a3      	strh	r3, [r4, #12]
 800601e:	e7e3      	b.n	8005fe8 <__smakebuf_r+0xc>
 8006020:	4b0d      	ldr	r3, [pc, #52]	; (8006058 <__smakebuf_r+0x7c>)
 8006022:	62b3      	str	r3, [r6, #40]	; 0x28
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	6020      	str	r0, [r4, #0]
 8006028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602c:	81a3      	strh	r3, [r4, #12]
 800602e:	9b00      	ldr	r3, [sp, #0]
 8006030:	6163      	str	r3, [r4, #20]
 8006032:	9b01      	ldr	r3, [sp, #4]
 8006034:	6120      	str	r0, [r4, #16]
 8006036:	b15b      	cbz	r3, 8006050 <__smakebuf_r+0x74>
 8006038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800603c:	4630      	mov	r0, r6
 800603e:	f000 f975 	bl	800632c <_isatty_r>
 8006042:	b128      	cbz	r0, 8006050 <__smakebuf_r+0x74>
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	f023 0303 	bic.w	r3, r3, #3
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	81a3      	strh	r3, [r4, #12]
 8006050:	89a0      	ldrh	r0, [r4, #12]
 8006052:	4305      	orrs	r5, r0
 8006054:	81a5      	strh	r5, [r4, #12]
 8006056:	e7cd      	b.n	8005ff4 <__smakebuf_r+0x18>
 8006058:	08005de9 	.word	0x08005de9

0800605c <_free_r>:
 800605c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800605e:	2900      	cmp	r1, #0
 8006060:	d044      	beq.n	80060ec <_free_r+0x90>
 8006062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006066:	9001      	str	r0, [sp, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	f1a1 0404 	sub.w	r4, r1, #4
 800606e:	bfb8      	it	lt
 8006070:	18e4      	addlt	r4, r4, r3
 8006072:	f000 f97d 	bl	8006370 <__malloc_lock>
 8006076:	4a1e      	ldr	r2, [pc, #120]	; (80060f0 <_free_r+0x94>)
 8006078:	9801      	ldr	r0, [sp, #4]
 800607a:	6813      	ldr	r3, [r2, #0]
 800607c:	b933      	cbnz	r3, 800608c <_free_r+0x30>
 800607e:	6063      	str	r3, [r4, #4]
 8006080:	6014      	str	r4, [r2, #0]
 8006082:	b003      	add	sp, #12
 8006084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006088:	f000 b978 	b.w	800637c <__malloc_unlock>
 800608c:	42a3      	cmp	r3, r4
 800608e:	d908      	bls.n	80060a2 <_free_r+0x46>
 8006090:	6825      	ldr	r5, [r4, #0]
 8006092:	1961      	adds	r1, r4, r5
 8006094:	428b      	cmp	r3, r1
 8006096:	bf01      	itttt	eq
 8006098:	6819      	ldreq	r1, [r3, #0]
 800609a:	685b      	ldreq	r3, [r3, #4]
 800609c:	1949      	addeq	r1, r1, r5
 800609e:	6021      	streq	r1, [r4, #0]
 80060a0:	e7ed      	b.n	800607e <_free_r+0x22>
 80060a2:	461a      	mov	r2, r3
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	b10b      	cbz	r3, 80060ac <_free_r+0x50>
 80060a8:	42a3      	cmp	r3, r4
 80060aa:	d9fa      	bls.n	80060a2 <_free_r+0x46>
 80060ac:	6811      	ldr	r1, [r2, #0]
 80060ae:	1855      	adds	r5, r2, r1
 80060b0:	42a5      	cmp	r5, r4
 80060b2:	d10b      	bne.n	80060cc <_free_r+0x70>
 80060b4:	6824      	ldr	r4, [r4, #0]
 80060b6:	4421      	add	r1, r4
 80060b8:	1854      	adds	r4, r2, r1
 80060ba:	42a3      	cmp	r3, r4
 80060bc:	6011      	str	r1, [r2, #0]
 80060be:	d1e0      	bne.n	8006082 <_free_r+0x26>
 80060c0:	681c      	ldr	r4, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	6053      	str	r3, [r2, #4]
 80060c6:	4421      	add	r1, r4
 80060c8:	6011      	str	r1, [r2, #0]
 80060ca:	e7da      	b.n	8006082 <_free_r+0x26>
 80060cc:	d902      	bls.n	80060d4 <_free_r+0x78>
 80060ce:	230c      	movs	r3, #12
 80060d0:	6003      	str	r3, [r0, #0]
 80060d2:	e7d6      	b.n	8006082 <_free_r+0x26>
 80060d4:	6825      	ldr	r5, [r4, #0]
 80060d6:	1961      	adds	r1, r4, r5
 80060d8:	428b      	cmp	r3, r1
 80060da:	bf04      	itt	eq
 80060dc:	6819      	ldreq	r1, [r3, #0]
 80060de:	685b      	ldreq	r3, [r3, #4]
 80060e0:	6063      	str	r3, [r4, #4]
 80060e2:	bf04      	itt	eq
 80060e4:	1949      	addeq	r1, r1, r5
 80060e6:	6021      	streq	r1, [r4, #0]
 80060e8:	6054      	str	r4, [r2, #4]
 80060ea:	e7ca      	b.n	8006082 <_free_r+0x26>
 80060ec:	b003      	add	sp, #12
 80060ee:	bd30      	pop	{r4, r5, pc}
 80060f0:	20004124 	.word	0x20004124

080060f4 <sbrk_aligned>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	4e0e      	ldr	r6, [pc, #56]	; (8006130 <sbrk_aligned+0x3c>)
 80060f8:	460c      	mov	r4, r1
 80060fa:	6831      	ldr	r1, [r6, #0]
 80060fc:	4605      	mov	r5, r0
 80060fe:	b911      	cbnz	r1, 8006106 <sbrk_aligned+0x12>
 8006100:	f000 f88c 	bl	800621c <_sbrk_r>
 8006104:	6030      	str	r0, [r6, #0]
 8006106:	4621      	mov	r1, r4
 8006108:	4628      	mov	r0, r5
 800610a:	f000 f887 	bl	800621c <_sbrk_r>
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	d00a      	beq.n	8006128 <sbrk_aligned+0x34>
 8006112:	1cc4      	adds	r4, r0, #3
 8006114:	f024 0403 	bic.w	r4, r4, #3
 8006118:	42a0      	cmp	r0, r4
 800611a:	d007      	beq.n	800612c <sbrk_aligned+0x38>
 800611c:	1a21      	subs	r1, r4, r0
 800611e:	4628      	mov	r0, r5
 8006120:	f000 f87c 	bl	800621c <_sbrk_r>
 8006124:	3001      	adds	r0, #1
 8006126:	d101      	bne.n	800612c <sbrk_aligned+0x38>
 8006128:	f04f 34ff 	mov.w	r4, #4294967295
 800612c:	4620      	mov	r0, r4
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	20004128 	.word	0x20004128

08006134 <_malloc_r>:
 8006134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006138:	1ccd      	adds	r5, r1, #3
 800613a:	f025 0503 	bic.w	r5, r5, #3
 800613e:	3508      	adds	r5, #8
 8006140:	2d0c      	cmp	r5, #12
 8006142:	bf38      	it	cc
 8006144:	250c      	movcc	r5, #12
 8006146:	2d00      	cmp	r5, #0
 8006148:	4607      	mov	r7, r0
 800614a:	db01      	blt.n	8006150 <_malloc_r+0x1c>
 800614c:	42a9      	cmp	r1, r5
 800614e:	d905      	bls.n	800615c <_malloc_r+0x28>
 8006150:	230c      	movs	r3, #12
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	2600      	movs	r6, #0
 8006156:	4630      	mov	r0, r6
 8006158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800615c:	4e2e      	ldr	r6, [pc, #184]	; (8006218 <_malloc_r+0xe4>)
 800615e:	f000 f907 	bl	8006370 <__malloc_lock>
 8006162:	6833      	ldr	r3, [r6, #0]
 8006164:	461c      	mov	r4, r3
 8006166:	bb34      	cbnz	r4, 80061b6 <_malloc_r+0x82>
 8006168:	4629      	mov	r1, r5
 800616a:	4638      	mov	r0, r7
 800616c:	f7ff ffc2 	bl	80060f4 <sbrk_aligned>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	4604      	mov	r4, r0
 8006174:	d14d      	bne.n	8006212 <_malloc_r+0xde>
 8006176:	6834      	ldr	r4, [r6, #0]
 8006178:	4626      	mov	r6, r4
 800617a:	2e00      	cmp	r6, #0
 800617c:	d140      	bne.n	8006200 <_malloc_r+0xcc>
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	4631      	mov	r1, r6
 8006182:	4638      	mov	r0, r7
 8006184:	eb04 0803 	add.w	r8, r4, r3
 8006188:	f000 f848 	bl	800621c <_sbrk_r>
 800618c:	4580      	cmp	r8, r0
 800618e:	d13a      	bne.n	8006206 <_malloc_r+0xd2>
 8006190:	6821      	ldr	r1, [r4, #0]
 8006192:	3503      	adds	r5, #3
 8006194:	1a6d      	subs	r5, r5, r1
 8006196:	f025 0503 	bic.w	r5, r5, #3
 800619a:	3508      	adds	r5, #8
 800619c:	2d0c      	cmp	r5, #12
 800619e:	bf38      	it	cc
 80061a0:	250c      	movcc	r5, #12
 80061a2:	4629      	mov	r1, r5
 80061a4:	4638      	mov	r0, r7
 80061a6:	f7ff ffa5 	bl	80060f4 <sbrk_aligned>
 80061aa:	3001      	adds	r0, #1
 80061ac:	d02b      	beq.n	8006206 <_malloc_r+0xd2>
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	442b      	add	r3, r5
 80061b2:	6023      	str	r3, [r4, #0]
 80061b4:	e00e      	b.n	80061d4 <_malloc_r+0xa0>
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	1b52      	subs	r2, r2, r5
 80061ba:	d41e      	bmi.n	80061fa <_malloc_r+0xc6>
 80061bc:	2a0b      	cmp	r2, #11
 80061be:	d916      	bls.n	80061ee <_malloc_r+0xba>
 80061c0:	1961      	adds	r1, r4, r5
 80061c2:	42a3      	cmp	r3, r4
 80061c4:	6025      	str	r5, [r4, #0]
 80061c6:	bf18      	it	ne
 80061c8:	6059      	strne	r1, [r3, #4]
 80061ca:	6863      	ldr	r3, [r4, #4]
 80061cc:	bf08      	it	eq
 80061ce:	6031      	streq	r1, [r6, #0]
 80061d0:	5162      	str	r2, [r4, r5]
 80061d2:	604b      	str	r3, [r1, #4]
 80061d4:	4638      	mov	r0, r7
 80061d6:	f104 060b 	add.w	r6, r4, #11
 80061da:	f000 f8cf 	bl	800637c <__malloc_unlock>
 80061de:	f026 0607 	bic.w	r6, r6, #7
 80061e2:	1d23      	adds	r3, r4, #4
 80061e4:	1af2      	subs	r2, r6, r3
 80061e6:	d0b6      	beq.n	8006156 <_malloc_r+0x22>
 80061e8:	1b9b      	subs	r3, r3, r6
 80061ea:	50a3      	str	r3, [r4, r2]
 80061ec:	e7b3      	b.n	8006156 <_malloc_r+0x22>
 80061ee:	6862      	ldr	r2, [r4, #4]
 80061f0:	42a3      	cmp	r3, r4
 80061f2:	bf0c      	ite	eq
 80061f4:	6032      	streq	r2, [r6, #0]
 80061f6:	605a      	strne	r2, [r3, #4]
 80061f8:	e7ec      	b.n	80061d4 <_malloc_r+0xa0>
 80061fa:	4623      	mov	r3, r4
 80061fc:	6864      	ldr	r4, [r4, #4]
 80061fe:	e7b2      	b.n	8006166 <_malloc_r+0x32>
 8006200:	4634      	mov	r4, r6
 8006202:	6876      	ldr	r6, [r6, #4]
 8006204:	e7b9      	b.n	800617a <_malloc_r+0x46>
 8006206:	230c      	movs	r3, #12
 8006208:	603b      	str	r3, [r7, #0]
 800620a:	4638      	mov	r0, r7
 800620c:	f000 f8b6 	bl	800637c <__malloc_unlock>
 8006210:	e7a1      	b.n	8006156 <_malloc_r+0x22>
 8006212:	6025      	str	r5, [r4, #0]
 8006214:	e7de      	b.n	80061d4 <_malloc_r+0xa0>
 8006216:	bf00      	nop
 8006218:	20004124 	.word	0x20004124

0800621c <_sbrk_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	4d06      	ldr	r5, [pc, #24]	; (8006238 <_sbrk_r+0x1c>)
 8006220:	2300      	movs	r3, #0
 8006222:	4604      	mov	r4, r0
 8006224:	4608      	mov	r0, r1
 8006226:	602b      	str	r3, [r5, #0]
 8006228:	f7fa fc3e 	bl	8000aa8 <_sbrk>
 800622c:	1c43      	adds	r3, r0, #1
 800622e:	d102      	bne.n	8006236 <_sbrk_r+0x1a>
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	b103      	cbz	r3, 8006236 <_sbrk_r+0x1a>
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	2000412c 	.word	0x2000412c

0800623c <__sread>:
 800623c:	b510      	push	{r4, lr}
 800623e:	460c      	mov	r4, r1
 8006240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006244:	f000 f8a0 	bl	8006388 <_read_r>
 8006248:	2800      	cmp	r0, #0
 800624a:	bfab      	itete	ge
 800624c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800624e:	89a3      	ldrhlt	r3, [r4, #12]
 8006250:	181b      	addge	r3, r3, r0
 8006252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006256:	bfac      	ite	ge
 8006258:	6563      	strge	r3, [r4, #84]	; 0x54
 800625a:	81a3      	strhlt	r3, [r4, #12]
 800625c:	bd10      	pop	{r4, pc}

0800625e <__swrite>:
 800625e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006262:	461f      	mov	r7, r3
 8006264:	898b      	ldrh	r3, [r1, #12]
 8006266:	05db      	lsls	r3, r3, #23
 8006268:	4605      	mov	r5, r0
 800626a:	460c      	mov	r4, r1
 800626c:	4616      	mov	r6, r2
 800626e:	d505      	bpl.n	800627c <__swrite+0x1e>
 8006270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006274:	2302      	movs	r3, #2
 8006276:	2200      	movs	r2, #0
 8006278:	f000 f868 	bl	800634c <_lseek_r>
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006286:	81a3      	strh	r3, [r4, #12]
 8006288:	4632      	mov	r2, r6
 800628a:	463b      	mov	r3, r7
 800628c:	4628      	mov	r0, r5
 800628e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006292:	f000 b817 	b.w	80062c4 <_write_r>

08006296 <__sseek>:
 8006296:	b510      	push	{r4, lr}
 8006298:	460c      	mov	r4, r1
 800629a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800629e:	f000 f855 	bl	800634c <_lseek_r>
 80062a2:	1c43      	adds	r3, r0, #1
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	bf15      	itete	ne
 80062a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80062aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062b2:	81a3      	strheq	r3, [r4, #12]
 80062b4:	bf18      	it	ne
 80062b6:	81a3      	strhne	r3, [r4, #12]
 80062b8:	bd10      	pop	{r4, pc}

080062ba <__sclose>:
 80062ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062be:	f000 b813 	b.w	80062e8 <_close_r>
	...

080062c4 <_write_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4d07      	ldr	r5, [pc, #28]	; (80062e4 <_write_r+0x20>)
 80062c8:	4604      	mov	r4, r0
 80062ca:	4608      	mov	r0, r1
 80062cc:	4611      	mov	r1, r2
 80062ce:	2200      	movs	r2, #0
 80062d0:	602a      	str	r2, [r5, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	f7fa fb97 	bl	8000a06 <_write>
 80062d8:	1c43      	adds	r3, r0, #1
 80062da:	d102      	bne.n	80062e2 <_write_r+0x1e>
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	b103      	cbz	r3, 80062e2 <_write_r+0x1e>
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
 80062e4:	2000412c 	.word	0x2000412c

080062e8 <_close_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	4d06      	ldr	r5, [pc, #24]	; (8006304 <_close_r+0x1c>)
 80062ec:	2300      	movs	r3, #0
 80062ee:	4604      	mov	r4, r0
 80062f0:	4608      	mov	r0, r1
 80062f2:	602b      	str	r3, [r5, #0]
 80062f4:	f7fa fba3 	bl	8000a3e <_close>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d102      	bne.n	8006302 <_close_r+0x1a>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	b103      	cbz	r3, 8006302 <_close_r+0x1a>
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	2000412c 	.word	0x2000412c

08006308 <_fstat_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4d07      	ldr	r5, [pc, #28]	; (8006328 <_fstat_r+0x20>)
 800630c:	2300      	movs	r3, #0
 800630e:	4604      	mov	r4, r0
 8006310:	4608      	mov	r0, r1
 8006312:	4611      	mov	r1, r2
 8006314:	602b      	str	r3, [r5, #0]
 8006316:	f7fa fb9e 	bl	8000a56 <_fstat>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d102      	bne.n	8006324 <_fstat_r+0x1c>
 800631e:	682b      	ldr	r3, [r5, #0]
 8006320:	b103      	cbz	r3, 8006324 <_fstat_r+0x1c>
 8006322:	6023      	str	r3, [r4, #0]
 8006324:	bd38      	pop	{r3, r4, r5, pc}
 8006326:	bf00      	nop
 8006328:	2000412c 	.word	0x2000412c

0800632c <_isatty_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4d06      	ldr	r5, [pc, #24]	; (8006348 <_isatty_r+0x1c>)
 8006330:	2300      	movs	r3, #0
 8006332:	4604      	mov	r4, r0
 8006334:	4608      	mov	r0, r1
 8006336:	602b      	str	r3, [r5, #0]
 8006338:	f7fa fb9d 	bl	8000a76 <_isatty>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d102      	bne.n	8006346 <_isatty_r+0x1a>
 8006340:	682b      	ldr	r3, [r5, #0]
 8006342:	b103      	cbz	r3, 8006346 <_isatty_r+0x1a>
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	bd38      	pop	{r3, r4, r5, pc}
 8006348:	2000412c 	.word	0x2000412c

0800634c <_lseek_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d07      	ldr	r5, [pc, #28]	; (800636c <_lseek_r+0x20>)
 8006350:	4604      	mov	r4, r0
 8006352:	4608      	mov	r0, r1
 8006354:	4611      	mov	r1, r2
 8006356:	2200      	movs	r2, #0
 8006358:	602a      	str	r2, [r5, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	f7fa fb96 	bl	8000a8c <_lseek>
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d102      	bne.n	800636a <_lseek_r+0x1e>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	b103      	cbz	r3, 800636a <_lseek_r+0x1e>
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	2000412c 	.word	0x2000412c

08006370 <__malloc_lock>:
 8006370:	4801      	ldr	r0, [pc, #4]	; (8006378 <__malloc_lock+0x8>)
 8006372:	f7ff be0b 	b.w	8005f8c <__retarget_lock_acquire_recursive>
 8006376:	bf00      	nop
 8006378:	20004120 	.word	0x20004120

0800637c <__malloc_unlock>:
 800637c:	4801      	ldr	r0, [pc, #4]	; (8006384 <__malloc_unlock+0x8>)
 800637e:	f7ff be06 	b.w	8005f8e <__retarget_lock_release_recursive>
 8006382:	bf00      	nop
 8006384:	20004120 	.word	0x20004120

08006388 <_read_r>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	4d07      	ldr	r5, [pc, #28]	; (80063a8 <_read_r+0x20>)
 800638c:	4604      	mov	r4, r0
 800638e:	4608      	mov	r0, r1
 8006390:	4611      	mov	r1, r2
 8006392:	2200      	movs	r2, #0
 8006394:	602a      	str	r2, [r5, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	f7fa fb18 	bl	80009cc <_read>
 800639c:	1c43      	adds	r3, r0, #1
 800639e:	d102      	bne.n	80063a6 <_read_r+0x1e>
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	b103      	cbz	r3, 80063a6 <_read_r+0x1e>
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	bd38      	pop	{r3, r4, r5, pc}
 80063a8:	2000412c 	.word	0x2000412c

080063ac <_init>:
 80063ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ae:	bf00      	nop
 80063b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b2:	bc08      	pop	{r3}
 80063b4:	469e      	mov	lr, r3
 80063b6:	4770      	bx	lr

080063b8 <_fini>:
 80063b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ba:	bf00      	nop
 80063bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063be:	bc08      	pop	{r3}
 80063c0:	469e      	mov	lr, r3
 80063c2:	4770      	bx	lr
